
usbTiny.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bcc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000bcc  00000c60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003d  00800062  00800062  00000c62  2**0
                  ALLOC
  3 .debug_aranges 00000080  00000000  00000000  00000c68  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000d8  00000000  00000000  00000ce8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007de  00000000  00000000  00000dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002f8  00000000  00000000  0000159e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008ed  00000000  00000000  00001896  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  00002184  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000038b  00000000  00000000  00002264  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	2e c0       	rjmp	.+92     	; 0x5e <__ctors_end>
   2:	5f c0       	rjmp	.+190    	; 0xc2 <__vector_1>
   4:	3c c0       	rjmp	.+120    	; 0x7e <__bad_interrupt>
   6:	3b c0       	rjmp	.+118    	; 0x7e <__bad_interrupt>
   8:	3a c0       	rjmp	.+116    	; 0x7e <__bad_interrupt>
   a:	39 c0       	rjmp	.+114    	; 0x7e <__bad_interrupt>
   c:	38 c0       	rjmp	.+112    	; 0x7e <__bad_interrupt>
   e:	37 c0       	rjmp	.+110    	; 0x7e <__bad_interrupt>
  10:	36 c0       	rjmp	.+108    	; 0x7e <__bad_interrupt>
  12:	35 c0       	rjmp	.+106    	; 0x7e <__bad_interrupt>
  14:	34 c0       	rjmp	.+104    	; 0x7e <__bad_interrupt>
  16:	33 c0       	rjmp	.+102    	; 0x7e <__bad_interrupt>
  18:	32 c0       	rjmp	.+100    	; 0x7e <__bad_interrupt>
  1a:	31 c0       	rjmp	.+98     	; 0x7e <__bad_interrupt>
  1c:	30 c0       	rjmp	.+96     	; 0x7e <__bad_interrupt>
  1e:	2f c0       	rjmp	.+94     	; 0x7e <__bad_interrupt>
  20:	2e c0       	rjmp	.+92     	; 0x7e <__bad_interrupt>
  22:	2d c0       	rjmp	.+90     	; 0x7e <__bad_interrupt>
  24:	2c c0       	rjmp	.+88     	; 0x7e <__bad_interrupt>
  26:	2b c0       	rjmp	.+86     	; 0x7e <__bad_interrupt>
  28:	2a c0       	rjmp	.+84     	; 0x7e <__bad_interrupt>

0000002a <crc4tab>:
  2a:	00 cd       	rjmp	.-1536   	; 0xfffffa2c <__eeprom_end+0xff7efa2c>
  2c:	d9 14       	cp	r13, r9
  2e:	f1 3c       	cpi	r31, 0xC1	; 193
  30:	28 e5       	ldi	r18, 0x58	; 88
  32:	a1 6c       	ori	r26, 0xC1	; 193
  34:	78 b5       	in	r23, 0x28	; 40
  36:	50 9d       	mul	r21, r0
  38:	89 44       	sbci	r24, 0x49	; 73

0000003a <descr_device>:
  3a:	12 01 01 01 ff 00 00 08 81 17 9f 0c 04 01 00 00     ................
  4a:	00 01                                               ..

0000004c <descr_config>:
  4c:	09 02 12 00 01 01 00 80 32 09 04 00 00 00 ff 00     ........2.......
	...

0000005e <__ctors_end>:
  5e:	11 24       	eor	r1, r1
  60:	1f be       	out	0x3f, r1	; 63
  62:	cf e5       	ldi	r28, 0x5F	; 95
  64:	d1 e0       	ldi	r29, 0x01	; 1
  66:	de bf       	out	0x3e, r29	; 62
  68:	cd bf       	out	0x3d, r28	; 61

0000006a <__do_clear_bss>:
  6a:	10 e0       	ldi	r17, 0x00	; 0
  6c:	a2 e6       	ldi	r26, 0x62	; 98
  6e:	b0 e0       	ldi	r27, 0x00	; 0
  70:	01 c0       	rjmp	.+2      	; 0x74 <.do_clear_bss_start>

00000072 <.do_clear_bss_loop>:
  72:	1d 92       	st	X+, r1

00000074 <.do_clear_bss_start>:
  74:	af 39       	cpi	r26, 0x9F	; 159
  76:	b1 07       	cpc	r27, r17
  78:	e1 f7       	brne	.-8      	; 0x72 <.do_clear_bss_loop>
  7a:	e4 d3       	rcall	.+1992   	; 0x844 <main>
  7c:	a5 c5       	rjmp	.+2890   	; 0xbc8 <_exit>

0000007e <__bad_interrupt>:
  7e:	c0 cf       	rjmp	.-128    	; 0x0 <__vectors>

00000080 <crc>:
	.text
	.global	crc
	.type	crc, @function
crc:
	; crc = 0xffff
	movw	XL, r24
  80:	dc 01       	movw	r26, r24
	ldi	crc_h, 0xff
  82:	9f ef       	ldi	r25, 0xFF	; 255
	ldi	crc_l, 0xff
  84:	8f ef       	ldi	r24, 0xFF	; 255
	lsl	len
  86:	66 0f       	add	r22, r22
	breq	done
  88:	b9 f0       	breq	.+46     	; 0xb8 <done>
	ldi	zl, lo8(crc4tab)
  8a:	4a e2       	ldi	r20, 0x2A	; 42
	ldi	ZH, hi8(crc4tab)
  8c:	f0 e0       	ldi	r31, 0x00	; 0

0000008e <next_nibble>:

next_nibble:
	; b = (len & 1 ? b >> 4 : *data++)
	swap	b
  8e:	22 95       	swap	r18
	sbrs	len, 0
  90:	60 ff       	sbrs	r22, 0
	ld	b, X+
  92:	2d 91       	ld	r18, X+

	; index = (crc ^ b) & 0x0f
	mov	ZL, crc_l
  94:	e8 2f       	mov	r30, r24
	eor	ZL, b
  96:	e2 27       	eor	r30, r18
	andi	ZL, 0x0f
  98:	ef 70       	andi	r30, 0x0F	; 15

	; crc >>= 4
	swap	crc_h
  9a:	92 95       	swap	r25
	swap	crc_l
  9c:	82 95       	swap	r24
	andi	crc_l, 0x0f
  9e:	8f 70       	andi	r24, 0x0F	; 15
	mov	tmp, crc_h
  a0:	39 2f       	mov	r19, r25
	andi	tmp, 0xf0
  a2:	30 7f       	andi	r19, 0xF0	; 240
	or	crc_l, tmp
  a4:	83 2b       	or	r24, r19
	andi	crc_h, 0x0f
  a6:	9f 70       	andi	r25, 0x0F	; 15

	; crc ^= crc4tab[index]
	add	ZL, zl
  a8:	e4 0f       	add	r30, r20
	lpm	tmp, Z+
  aa:	35 91       	lpm	r19, Z+
	eor	crc_h, tmp
  ac:	93 27       	eor	r25, r19
	andi	tmp, 1
  ae:	31 70       	andi	r19, 0x01	; 1
	eor	crc_h, tmp
  b0:	93 27       	eor	r25, r19
	eor	crc_l, tmp
  b2:	83 27       	eor	r24, r19

	; next nibble
	dec	len
  b4:	6a 95       	dec	r22
	brne	next_nibble
  b6:	59 f7       	brne	.-42     	; 0x8e <next_nibble>

000000b8 <done>:

done:
	; crc ^= 0xffff
	com	crc_l
  b8:	80 95       	com	r24
	com	crc_h
  ba:	90 95       	com	r25

	; append crc to buffer
	st	X+, crc_l
  bc:	8d 93       	st	X+, r24
	st	X+, crc_h
  be:	9d 93       	st	X+, r25

	ret
  c0:	08 95       	ret

000000c2 <__vector_1>:
; This handler must be reached no later than 34 cycles after D+ goes high
; for the first time.
; ----------------------------------------------------------------------
USB_INT_VECTOR:
	; save registers
	push	count
  c2:	0f 93       	push	r16
	push	usbmask
  c4:	1f 93       	push	r17
	push	odd
  c6:	2f 93       	push	r18
	push	YH
  c8:	df 93       	push	r29
	push	YL
  ca:	cf 93       	push	r28
	in	count, SREG
  cc:	0f b7       	in	r16, 0x3f	; 63
	push	count
  ce:	0f 93       	push	r16

000000d0 <sync>:
; Synchronize to the pattern 10101011 on D+. This code must be reached
; no later than 47 cycles after D+ goes high for the first time.
; ----------------------------------------------------------------------
sync:
	; wait until D+ == 0
	sbic	USB_IN, USBTINY_DPLUS
  d0:	82 99       	sbic	0x10, 2	; 16
	rjmp	sync			; jump if D+ == 1
  d2:	fe cf       	rjmp	.-4      	; 0xd0 <sync>

000000d4 <resync>:
resync:
	; sync on 0-->1 transition on D+ with a 2 cycle resolution
	sbic	USB_IN, USBTINY_DPLUS
  d4:	82 99       	sbic	0x10, 2	; 16
	rjmp	sync6			; jump if D+ == 1
  d6:	0b c0       	rjmp	.+22     	; 0xee <sync6>
	sbic	USB_IN, USBTINY_DPLUS
  d8:	82 99       	sbic	0x10, 2	; 16
	rjmp	sync6			; jump if D+ == 1
  da:	09 c0       	rjmp	.+18     	; 0xee <sync6>
	sbic	USB_IN, USBTINY_DPLUS
  dc:	82 99       	sbic	0x10, 2	; 16
	rjmp	sync6			; jump if D+ == 1
  de:	07 c0       	rjmp	.+14     	; 0xee <sync6>
	sbic	USB_IN, USBTINY_DPLUS
  e0:	82 99       	sbic	0x10, 2	; 16
	rjmp	sync6			; jump if D+ == 1
  e2:	05 c0       	rjmp	.+10     	; 0xee <sync6>
	sbic	USB_IN, USBTINY_DPLUS
  e4:	82 99       	sbic	0x10, 2	; 16
	rjmp	sync6			; jump if D+ == 1
  e6:	03 c0       	rjmp	.+6      	; 0xee <sync6>
	ldi	count, 1<<USB_INT_PENDING_BIT
  e8:	00 e4       	ldi	r16, 0x40	; 64
	out	USB_INT_PENDING, count
  ea:	0a bf       	out	0x3a, r16	; 58
	rjmp	return			; ==> false start, bail out
  ec:	a8 c0       	rjmp	.+336    	; 0x23e <return>

000000ee <sync6>:

sync6:
	; we are now between -1 and +1 cycle from the center of the bit
	; following the 0-->1 transition
	lds	YL, usb_rx_off
  ee:	c0 91 87 00 	lds	r28, 0x0087
	clr	YH
  f2:	dd 27       	eor	r29, r29
	subi	YL, lo8(-(usb_rx_buf))	; Y = & usb_rx_buf[usb_rx_off]
  f4:	c8 57       	subi	r28, 0x78	; 120
	sbci	YH, hi8(-(usb_rx_buf))
  f6:	df 4f       	sbci	r29, 0xFF	; 255
	ldi	count, USB_BUFSIZE	; limit on number of bytes to receive
  f8:	0b e0       	ldi	r16, 0x0B	; 11
	ldi	usbmask, USB_MASK	; why is there no eori instruction?
  fa:	1c e0       	ldi	r17, 0x0C	; 12
	ldi	odd, USB_MASK_DPLUS
  fc:	24 e0       	ldi	r18, 0x04	; 4

000000fe <sync7>:

sync7:
	; the last sync bit should also be 1
	sbis	USB_IN, USBTINY_DPLUS	; bit 7 of sync byte?
  fe:	82 9b       	sbis	0x10, 2	; 16
	rjmp	resync			; no, wait for next transition
 100:	e9 cf       	rjmp	.-46     	; 0xd4 <resync>
	push	byte
 102:	3f 93       	push	r19
	push	fixup
 104:	4f 93       	push	r20
	push	even
 106:	6f 93       	push	r22

; ----------------------------------------------------------------------
; receiver loop
; ----------------------------------------------------------------------
	in	even, USB_IN		; sample bit 0
 108:	60 b3       	in	r22, 0x10	; 16
	ldi	byte, 0x80		; load sync byte for correct unstuffing
 10a:	30 e8       	ldi	r19, 0x80	; 128
	rjmp	rxentry			; 2 cycles
 10c:	03 c0       	rjmp	.+6      	; 0x114 <rxentry>

0000010e <rxloop>:

rxloop:
	in	even, USB_IN		; sample bit 0
 10e:	60 b3       	in	r22, 0x10	; 16
	or	fixup, byte
 110:	43 2b       	or	r20, r19
	st	Y+, fixup		; 2 cycles
 112:	49 93       	st	Y+, r20

00000114 <rxentry>:
rxentry:
	clr	fixup
 114:	44 27       	eor	r20, r20
	andi	even, USB_MASK
 116:	6c 70       	andi	r22, 0x0C	; 12
	eor	odd, even
 118:	26 27       	eor	r18, r22
	subi	odd, 1
 11a:	21 50       	subi	r18, 0x01	; 1
	in	odd, USB_IN		; sample bit 1
 11c:	20 b3       	in	r18, 0x10	; 16
	andi	odd, USB_MASK
 11e:	2c 70       	andi	r18, 0x0C	; 12
	breq	eop			; ==> EOP detected
 120:	a9 f1       	breq	.+106    	; 0x18c <eop>
	ror	byte
 122:	37 95       	ror	r19
	cpi	byte, 0xfc
 124:	3c 3f       	cpi	r19, 0xFC	; 252
	brcc	skip0
 126:	a0 f5       	brcc	.+104    	; 0x190 <skip0>

00000128 <skipped0>:
skipped0:
	eor	even, odd
 128:	62 27       	eor	r22, r18
	subi	even, 1
 12a:	61 50       	subi	r22, 0x01	; 1
	in	even, USB_IN		; sample bit 2
 12c:	60 b3       	in	r22, 0x10	; 16
	andi	even, USB_MASK
 12e:	6c 70       	andi	r22, 0x0C	; 12
	ror	byte
 130:	37 95       	ror	r19
	cpi	byte, 0xfc
 132:	3c 3f       	cpi	r19, 0xFC	; 252
	brcc	skip1
 134:	98 f5       	brcc	.+102    	; 0x19c <skip1>

00000136 <skipped1>:
skipped1:
	eor	odd, even
 136:	26 27       	eor	r18, r22
	subi	odd, 1
 138:	21 50       	subi	r18, 0x01	; 1
	ror	byte
 13a:	37 95       	ror	r19
	in	odd, USB_IN		; sample bit 3
 13c:	20 b3       	in	r18, 0x10	; 16
	andi	odd, USB_MASK
 13e:	2c 70       	andi	r18, 0x0C	; 12
	cpi	byte, 0xfc
 140:	3c 3f       	cpi	r19, 0xFC	; 252
	brcc	skip2
 142:	90 f5       	brcc	.+100    	; 0x1a8 <skip2>
	eor	even, odd
 144:	62 27       	eor	r22, r18
	subi	even, 1
 146:	61 50       	subi	r22, 0x01	; 1
	ror	byte
 148:	37 95       	ror	r19

0000014a <skipped2>:
skipped2:
	cpi	byte, 0xfc
 14a:	3c 3f       	cpi	r19, 0xFC	; 252
	in	even, USB_IN		; sample bit 4
 14c:	60 b3       	in	r22, 0x10	; 16
	andi	even, USB_MASK
 14e:	6c 70       	andi	r22, 0x0C	; 12
	brcc	skip3
 150:	a0 f5       	brcc	.+104    	; 0x1ba <skip3>
	eor	odd, even
 152:	26 27       	eor	r18, r22
	subi	odd, 1
 154:	21 50       	subi	r18, 0x01	; 1
	ror	byte
 156:	37 95       	ror	r19

00000158 <skipped4>:
skipped4:
	cpi	byte, 0xfc
 158:	3c 3f       	cpi	r19, 0xFC	; 252

0000015a <skipped3>:
skipped3:
	brcc	skip4
 15a:	c8 f5       	brcc	.+114    	; 0x1ce <skip4>
	in	odd, USB_IN		; sample bit 5
 15c:	20 b3       	in	r18, 0x10	; 16
	andi	odd, USB_MASK
 15e:	2c 70       	andi	r18, 0x0C	; 12
	eor	even, odd
 160:	62 27       	eor	r22, r18
	subi	even, 1
 162:	61 50       	subi	r22, 0x01	; 1
	ror	byte
 164:	37 95       	ror	r19

00000166 <skipped5>:
skipped5:
	cpi	byte, 0xfc
 166:	3c 3f       	cpi	r19, 0xFC	; 252
	brcc	skip5
 168:	b0 f5       	brcc	.+108    	; 0x1d6 <skip5>
	dec	count
 16a:	0a 95       	dec	r16
	in	even, USB_IN		; sample bit 6
 16c:	60 b3       	in	r22, 0x10	; 16
	brmi	overflow		; ==> overflow
 16e:	7a f0       	brmi	.+30     	; 0x18e <overflow>
	andi	even, USB_MASK
 170:	6c 70       	andi	r22, 0x0C	; 12
	eor	odd, even
 172:	26 27       	eor	r18, r22
	subi	odd, 1
 174:	21 50       	subi	r18, 0x01	; 1
	ror	byte
 176:	37 95       	ror	r19

00000178 <skipped6>:
skipped6:
	cpi	byte, 0xfc
 178:	3c 3f       	cpi	r19, 0xFC	; 252
	brcc	skip6
 17a:	88 f5       	brcc	.+98     	; 0x1de <skip6>
	in	odd, USB_IN		; sample bit 7
 17c:	20 b3       	in	r18, 0x10	; 16
	andi	odd, USB_MASK
 17e:	2c 70       	andi	r18, 0x0C	; 12
	eor	even, odd
 180:	62 27       	eor	r22, r18
	subi	even, 1
 182:	61 50       	subi	r22, 0x01	; 1
	ror	byte
 184:	37 95       	ror	r19
	cpi	byte, 0xfc
 186:	3c 3f       	cpi	r19, 0xFC	; 252
	brcs	rxloop			; 2 cycles
 188:	10 f2       	brcs	.-124    	; 0x10e <rxloop>
	rjmp	skip7
 18a:	2d c0       	rjmp	.+90     	; 0x1e6 <skip7>

0000018c <eop>:

eop:
	rjmp	eop2
 18c:	31 c0       	rjmp	.+98     	; 0x1f0 <eop2>

0000018e <overflow>:
overflow:
	rjmp	ignore
 18e:	48 c0       	rjmp	.+144    	; 0x220 <ignore>

00000190 <skip0>:

; ----------------------------------------------------------------------
; out-of-line code to skip stuffing bits
; ----------------------------------------------------------------------
skip0:					; 1+6 cycles
	eor	even, usbmask
 190:	61 27       	eor	r22, r17
	in	odd, USB_IN		; resample bit 1
 192:	20 b3       	in	r18, 0x10	; 16
	andi	odd, USB_MASK
 194:	2c 70       	andi	r18, 0x0C	; 12
	cbr	byte, (1<<7)
 196:	3f 77       	andi	r19, 0x7F	; 127
	sbr	fixup, (1<<0)
 198:	41 60       	ori	r20, 0x01	; 1
	rjmp	skipped0
 19a:	c6 cf       	rjmp	.-116    	; 0x128 <skipped0>

0000019c <skip1>:

skip1:					; 2+5 cycles
	cbr	byte, (1<<7)
 19c:	3f 77       	andi	r19, 0x7F	; 127
	sbr	fixup, (1<<1)
 19e:	42 60       	ori	r20, 0x02	; 2
	in	even, USB_IN		; resample bit 2
 1a0:	60 b3       	in	r22, 0x10	; 16
	andi	even, USB_MASK
 1a2:	6c 70       	andi	r22, 0x0C	; 12
	eor	odd, usbmask
 1a4:	21 27       	eor	r18, r17
	rjmp	skipped1
 1a6:	c7 cf       	rjmp	.-114    	; 0x136 <skipped1>

000001a8 <skip2>:

skip2:					; 3+7 cycles
	cbr	byte, (1<<7)
 1a8:	3f 77       	andi	r19, 0x7F	; 127
	sbr	fixup, (1<<2)
 1aa:	44 60       	ori	r20, 0x04	; 4
	eor	even, usbmask
 1ac:	61 27       	eor	r22, r17
	in	odd, USB_IN		; resample bit 3
 1ae:	20 b3       	in	r18, 0x10	; 16
	andi	odd, USB_MASK
 1b0:	2c 70       	andi	r18, 0x0C	; 12
	eor	even, odd
 1b2:	62 27       	eor	r22, r18
	subi	even, 1
 1b4:	61 50       	subi	r22, 0x01	; 1
	ror	byte
 1b6:	37 95       	ror	r19
	rjmp	skipped2
 1b8:	c8 cf       	rjmp	.-112    	; 0x14a <skipped2>

000001ba <skip3>:

skip3:					; 4+7 cycles
	cbr	byte, (1<<7)
 1ba:	3f 77       	andi	r19, 0x7F	; 127
	sbr	fixup, (1<<3)
 1bc:	48 60       	ori	r20, 0x08	; 8
	eor	odd, usbmask
 1be:	21 27       	eor	r18, r17
	ori	byte, 1
 1c0:	31 60       	ori	r19, 0x01	; 1
	in	even, USB_IN		; resample bit 4
 1c2:	60 b3       	in	r22, 0x10	; 16
	andi	even, USB_MASK
 1c4:	6c 70       	andi	r22, 0x0C	; 12
	eor	odd, even
 1c6:	26 27       	eor	r18, r22
	subi	odd, 1
 1c8:	21 50       	subi	r18, 0x01	; 1
	ror	byte
 1ca:	37 95       	ror	r19
	rjmp	skipped3
 1cc:	c6 cf       	rjmp	.-116    	; 0x15a <skipped3>

000001ce <skip4>:

skip4:					; 5 cycles
	cbr	byte, (1<<7)
 1ce:	3f 77       	andi	r19, 0x7F	; 127
	sbr	fixup, (1<<4)
 1d0:	40 61       	ori	r20, 0x10	; 16
	eor	even, usbmask
 1d2:	61 27       	eor	r22, r17
	rjmp	skipped4
 1d4:	c1 cf       	rjmp	.-126    	; 0x158 <skipped4>

000001d6 <skip5>:

skip5:					; 5 cycles
	cbr	byte, (1<<7)
 1d6:	3f 77       	andi	r19, 0x7F	; 127
	sbr	fixup, (1<<5)
 1d8:	40 62       	ori	r20, 0x20	; 32
	eor	odd, usbmask
 1da:	21 27       	eor	r18, r17
	rjmp	skipped5
 1dc:	c4 cf       	rjmp	.-120    	; 0x166 <skipped5>

000001de <skip6>:

skip6:					; 5 cycles
	cbr	byte, (1<<7)
 1de:	3f 77       	andi	r19, 0x7F	; 127
	sbr	fixup, (1<<6)
 1e0:	40 64       	ori	r20, 0x40	; 64
	eor	even, usbmask
 1e2:	61 27       	eor	r22, r17
	rjmp	skipped6
 1e4:	c9 cf       	rjmp	.-110    	; 0x178 <skipped6>

000001e6 <skip7>:

skip7:					; 7 cycles
	cbr	byte, (1<<7)
 1e6:	3f 77       	andi	r19, 0x7F	; 127
	sbr	fixup, (1<<7)
 1e8:	40 68       	ori	r20, 0x80	; 128
	eor	odd, usbmask
 1ea:	21 27       	eor	r18, r17
	nop2
 1ec:	00 c0       	rjmp	.+0      	; 0x1ee <skip7+0x8>
	rjmp	rxloop
 1ee:	8f cf       	rjmp	.-226    	; 0x10e <rxloop>

000001f0 <eop2>:
; ----------------------------------------------------------------------
; end-of-packet detected (worst-case: 3 cycles after end of SE0)
; ----------------------------------------------------------------------
eop2:
	; clear pending interrupt (SE0+3)
	ldi	byte, 1<<USB_INT_PENDING_BIT
 1f0:	30 e4       	ldi	r19, 0x40	; 64
	out	USB_INT_PENDING, byte	; clear pending bit at end of packet
 1f2:	3a bf       	out	0x3a, r19	; 58
	; ignore packets shorter than 3 bytes
	subi	count, USB_BUFSIZE
 1f4:	0b 50       	subi	r16, 0x0B	; 11
	neg	count			; count = packet length
 1f6:	01 95       	neg	r16
	cpi	count, 3
 1f8:	03 30       	cpi	r16, 0x03	; 3
	brlo	ignore
 1fa:	90 f0       	brcs	.+36     	; 0x220 <ignore>
	; get PID
	sub	YL, count
 1fc:	c0 1b       	sub	r28, r16
	ld	pid, Y
 1fe:	28 81       	ld	r18, Y
	; check for DATA0/DATA1 first, as this is the critical path (SE0+12)
	cpi	pid, USB_PID_DATA0
 200:	23 3c       	cpi	r18, 0xC3	; 195
	breq	is_data			; handle DATA0 packet
 202:	91 f1       	breq	.+100    	; 0x268 <is_data>
	cpi	pid, USB_PID_DATA1
 204:	2b 34       	cpi	r18, 0x4B	; 75
	breq	is_data			; handle DATA1 packet
 206:	81 f1       	breq	.+96     	; 0x268 <is_data>
	; check ADDR (SE0+16)
	ldd	addr, Y+1
 208:	19 81       	ldd	r17, Y+1	; 0x01
	andi	addr, 0x7f
 20a:	1f 77       	andi	r17, 0x7F	; 127
	lds	tmp, usb_address
 20c:	40 91 9e 00 	lds	r20, 0x009E
	cp	addr, tmp		; is this packet for me?
 210:	14 17       	cp	r17, r20
	brne	ignore			; no, ignore
 212:	31 f4       	brne	.+12     	; 0x220 <ignore>
	; check for other PIDs (SE0+23)
	cpi	pid, USB_PID_IN
 214:	29 36       	cpi	r18, 0x69	; 105
	breq	is_in			; handle IN packet
 216:	d9 f0       	breq	.+54     	; 0x24e <is_in>
	cpi	pid, USB_PID_SETUP
 218:	2d 32       	cpi	r18, 0x2D	; 45
	breq	is_setup_out		; handle SETUP packet
 21a:	49 f0       	breq	.+18     	; 0x22e <is_setup_out>
	cpi	pid, USB_PID_OUT
 21c:	21 3e       	cpi	r18, 0xE1	; 225
	breq	is_setup_out		; handle OUT packet
 21e:	39 f0       	breq	.+14     	; 0x22e <is_setup_out>

00000220 <ignore>:

; ----------------------------------------------------------------------
; exit point for ignored packets
; ----------------------------------------------------------------------
ignore:
	clr	tmp
 220:	44 27       	eor	r20, r20
	sts	token_pid, tmp
 222:	40 93 62 00 	sts	0x0062, r20
	pop	even
 226:	6f 91       	pop	r22
	pop	fixup
 228:	4f 91       	pop	r20
	pop	byte
 22a:	3f 91       	pop	r19
	rjmp	return
 22c:	08 c0       	rjmp	.+16     	; 0x23e <return>

0000022e <is_setup_out>:

; ----------------------------------------------------------------------
; Handle SETUP/OUT (SE0+30)
; ----------------------------------------------------------------------
is_setup_out:
	sts	token_pid, pid		; save PID of token packet
 22e:	20 93 62 00 	sts	0x0062, r18
	pop	even
 232:	6f 91       	pop	r22
	pop	fixup
 234:	4f 91       	pop	r20
	pop	byte
 236:	3f 91       	pop	r19
	in	count, USB_INT_PENDING	; next packet already started?
 238:	0a b7       	in	r16, 0x3a	; 58
	sbrc	count, USB_INT_PENDING_BIT
 23a:	06 fd       	sbrc	r16, 6
	rjmp	sync			; yes, get it right away (SE0+42)
 23c:	49 cf       	rjmp	.-366    	; 0xd0 <sync>

0000023e <return>:

; ----------------------------------------------------------------------
; restore registers and return from interrupt
; ----------------------------------------------------------------------
return:
	pop	count
 23e:	0f 91       	pop	r16
	out	SREG, count
 240:	0f bf       	out	0x3f, r16	; 63
	pop	YL
 242:	cf 91       	pop	r28
	pop	YH
 244:	df 91       	pop	r29
	pop	odd
 246:	2f 91       	pop	r18
	pop	usbmask
 248:	1f 91       	pop	r17
	pop	count
 24a:	0f 91       	pop	r16
	reti
 24c:	18 95       	reti

0000024e <is_in>:

; ----------------------------------------------------------------------
; Handle IN (SE0+26)
; ----------------------------------------------------------------------
is_in:
	lds	count, usb_tx_len
 24e:	00 91 79 00 	lds	r16, 0x0079
	tst	count			; data ready?
 252:	00 23       	and	r16, r16
	breq	nak			; no, reply with NAK
 254:	f1 f0       	breq	.+60     	; 0x292 <nak>
	lds	tmp, usb_rx_len
 256:	40 91 86 00 	lds	r20, 0x0086
	tst	tmp			; unprocessed input packet?
 25a:	44 23       	and	r20, r20
	brne	nak			; yes, don't send old data for new packet
 25c:	d1 f4       	brne	.+52     	; 0x292 <nak>
	sts	usb_tx_len, tmp		; buffer is available again (after reti)
 25e:	40 93 79 00 	sts	0x0079, r20
	ldi	YL, lo8(usb_tx_buf)
 262:	ca e7       	ldi	r28, 0x7A	; 122
	ldi	YH, hi8(usb_tx_buf)
 264:	d0 e0       	ldi	r29, 0x00	; 0
	rjmp	send_packet		; SE0+40, SE0 --> SOP <= 51
 266:	18 c0       	rjmp	.+48     	; 0x298 <send_packet>

00000268 <is_data>:

; ----------------------------------------------------------------------
; Handle DATA0/DATA1 (SE0+17)
; ----------------------------------------------------------------------
is_data:
	lds	pid, token_pid
 268:	20 91 62 00 	lds	r18, 0x0062
	tst	pid			; data following our SETUP/OUT
 26c:	22 23       	and	r18, r18
	breq	ignore			; no, ignore
 26e:	c1 f2       	breq	.-80     	; 0x220 <ignore>
	lds	tmp, usb_rx_len
 270:	40 91 86 00 	lds	r20, 0x0086
	tst	tmp			; buffer free?
 274:	44 23       	and	r20, r20
	brne	nak			; no, reply with NAK
 276:	69 f4       	brne	.+26     	; 0x292 <nak>
	sts	usb_rx_len, count	; pass buffer length
 278:	00 93 86 00 	sts	0x0086, r16
	sts	usb_rx_token, pid	; pass PID of token (SETUP or OUT)
 27c:	20 93 85 00 	sts	0x0085, r18
	lds	count, usb_rx_off	; switch to other input buffer
 280:	00 91 87 00 	lds	r16, 0x0087
	ldi	tmp, USB_BUFSIZE
 284:	4b e0       	ldi	r20, 0x0B	; 11
	sub	tmp, count
 286:	40 1b       	sub	r20, r16
	sts	usb_rx_off, tmp
 288:	40 93 87 00 	sts	0x0087, r20

0000028c <ack>:

; ----------------------------------------------------------------------
; send ACK packet (SE0+35)
; ----------------------------------------------------------------------
ack:
	ldi	YL, lo8(tx_ack)
 28c:	c0 e6       	ldi	r28, 0x60	; 96
	ldi	YH, hi8(tx_ack)
 28e:	d0 e0       	ldi	r29, 0x00	; 0
	rjmp	send_token
 290:	02 c0       	rjmp	.+4      	; 0x296 <send_token>

00000292 <nak>:

; ----------------------------------------------------------------------
; send NAK packet (SE0+36)
; ----------------------------------------------------------------------
nak:
	ldi	YL, lo8(tx_nak)
 292:	c1 e6       	ldi	r28, 0x61	; 97
	ldi	YH, hi8(tx_nak)
 294:	d0 e0       	ldi	r29, 0x00	; 0

00000296 <send_token>:
send_token:
	ldi	count, 1		; SE0+40, SE0 --> SOP <= 51
 296:	01 e0       	ldi	r16, 0x01	; 1

00000298 <send_packet>:

; ----------------------------------------------------------------------
; acquire the bus and send a packet (11 cycles to SOP)
; ----------------------------------------------------------------------
send_packet:
	in	output, USB_OUT
 298:	22 b3       	in	r18, 0x12	; 18
	cbr	output, USB_MASK
 29a:	23 7f       	andi	r18, 0xF3	; 243
	ori	output, USB_MASK_DMINUS
 29c:	28 60       	ori	r18, 0x08	; 8
	in	usbmask, USB_DDR
 29e:	11 b3       	in	r17, 0x11	; 17
	ori	usbmask, USB_MASK
 2a0:	1c 60       	ori	r17, 0x0C	; 12
	out	USB_OUT, output		; idle state
 2a2:	22 bb       	out	0x12, r18	; 18
	out	USB_DDR, usbmask	; acquire bus
 2a4:	11 bb       	out	0x11, r17	; 17
	ldi	usbmask, USB_MASK
 2a6:	1c e0       	ldi	r17, 0x0C	; 12
	ldi	byte, 0x80		; start with sync byte
 2a8:	30 e8       	ldi	r19, 0x80	; 128

000002aa <txloop>:

; ----------------------------------------------------------------------
; transmitter loop
; ----------------------------------------------------------------------
txloop:
	sbrs	byte, 0
 2aa:	30 ff       	sbrs	r19, 0
	eor	output, usbmask
 2ac:	21 27       	eor	r18, r17
	out	USB_OUT, output		; output bit 0
 2ae:	22 bb       	out	0x12, r18	; 18
	ror	byte
 2b0:	37 95       	ror	r19
	ror	done
 2b2:	47 95       	ror	r20

000002b4 <stuffed0>:
stuffed0:
	cpi	done, 0xfc
 2b4:	4c 3f       	cpi	r20, 0xFC	; 252
	brcc	stuff0
 2b6:	c0 f5       	brcc	.+112    	; 0x328 <stuff0>
	sbrs	byte, 0
 2b8:	30 ff       	sbrs	r19, 0
	eor	output, usbmask
 2ba:	21 27       	eor	r18, r17
	ror	byte
 2bc:	37 95       	ror	r19

000002be <stuffed1>:
stuffed1:
	out	USB_OUT, output		; output bit 1
 2be:	22 bb       	out	0x12, r18	; 18
	ror	done
 2c0:	47 95       	ror	r20
	cpi	done, 0xfc
 2c2:	4c 3f       	cpi	r20, 0xFC	; 252
	brcc	stuff1
 2c4:	a8 f5       	brcc	.+106    	; 0x330 <stuff1>
	sbrs	byte, 0
 2c6:	30 ff       	sbrs	r19, 0
	eor	output, usbmask
 2c8:	21 27       	eor	r18, r17
	ror	byte
 2ca:	37 95       	ror	r19
	...

000002ce <stuffed2>:
	nop
stuffed2:
	out	USB_OUT, output		; output bit 2
 2ce:	22 bb       	out	0x12, r18	; 18
	ror	done
 2d0:	47 95       	ror	r20
	cpi	done, 0xfc
 2d2:	4c 3f       	cpi	r20, 0xFC	; 252
	brcc	stuff2
 2d4:	78 f5       	brcc	.+94     	; 0x334 <stuff2>
	sbrs	byte, 0
 2d6:	30 ff       	sbrs	r19, 0
	eor	output, usbmask
 2d8:	21 27       	eor	r18, r17
	ror	byte
 2da:	37 95       	ror	r19
	...

000002de <stuffed3>:
	nop
stuffed3:
	out	USB_OUT, output		; output bit 3
 2de:	22 bb       	out	0x12, r18	; 18
	ror	done
 2e0:	47 95       	ror	r20
	cpi	done, 0xfc
 2e2:	4c 3f       	cpi	r20, 0xFC	; 252
	brcc	stuff3
 2e4:	48 f5       	brcc	.+82     	; 0x338 <stuff3>
	sbrs	byte, 0
 2e6:	30 ff       	sbrs	r19, 0
	eor	output, usbmask
 2e8:	21 27       	eor	r18, r17
	ld	next, Y+		; 2 cycles
 2ea:	69 91       	ld	r22, Y+
	out	USB_OUT, output		; output bit 4
 2ec:	22 bb       	out	0x12, r18	; 18
	ror	byte
 2ee:	37 95       	ror	r19
	ror	done
 2f0:	47 95       	ror	r20

000002f2 <stuffed4>:
stuffed4:
	cpi	done, 0xfc
 2f2:	4c 3f       	cpi	r20, 0xFC	; 252
	brcc	stuff4
 2f4:	18 f5       	brcc	.+70     	; 0x33c <stuff4>
	sbrs	byte, 0
 2f6:	30 ff       	sbrs	r19, 0
	eor	output, usbmask
 2f8:	21 27       	eor	r18, r17
	ror	byte
 2fa:	37 95       	ror	r19

000002fc <stuffed5>:
stuffed5:
	out	USB_OUT, output		; output bit 5
 2fc:	22 bb       	out	0x12, r18	; 18
	ror	done
 2fe:	47 95       	ror	r20
	cpi	done, 0xfc
 300:	4c 3f       	cpi	r20, 0xFC	; 252
	brcc	stuff5
 302:	00 f5       	brcc	.+64     	; 0x344 <stuff5>
	sbrs	byte, 0
 304:	30 ff       	sbrs	r19, 0
	eor	output, usbmask
 306:	21 27       	eor	r18, r17
	ror	byte
 308:	37 95       	ror	r19

0000030a <stuffed6>:
stuffed6:
	ror	done
 30a:	47 95       	ror	r20
	out	USB_OUT, output		; output bit 6
 30c:	22 bb       	out	0x12, r18	; 18
	cpi	done, 0xfc
 30e:	4c 3f       	cpi	r20, 0xFC	; 252
	brcc	stuff6
 310:	d8 f4       	brcc	.+54     	; 0x348 <stuff6>
	sbrs	byte, 0
 312:	30 ff       	sbrs	r19, 0
	eor	output, usbmask
 314:	21 27       	eor	r18, r17
	ror	byte
 316:	37 95       	ror	r19
	mov	byte, next
 318:	36 2f       	mov	r19, r22

0000031a <stuffed7>:
stuffed7:
	ror	done
 31a:	47 95       	ror	r20
	out	USB_OUT, output		; output bit 7
 31c:	22 bb       	out	0x12, r18	; 18
	cpi	done, 0xfc
 31e:	4c 3f       	cpi	r20, 0xFC	; 252
	brcc	stuff7
 320:	a8 f4       	brcc	.+42     	; 0x34c <stuff7>
	dec	count
 322:	0a 95       	dec	r16
	brpl	txloop			; 2 cycles
 324:	12 f6       	brpl	.-124    	; 0x2aa <txloop>

	rjmp	gen_eop
 326:	14 c0       	rjmp	.+40     	; 0x350 <gen_eop>

00000328 <stuff0>:

; ----------------------------------------------------------------------
; out-of-line code to insert stuffing bits
; ----------------------------------------------------------------------
stuff0:					; 2+3
	eor	output, usbmask
 328:	21 27       	eor	r18, r17
	clr	done
 32a:	44 27       	eor	r20, r20
	out	USB_OUT, output
 32c:	22 bb       	out	0x12, r18	; 18
	rjmp	stuffed0
 32e:	c2 cf       	rjmp	.-124    	; 0x2b4 <stuffed0>

00000330 <stuff1>:

stuff1:					; 3
	eor	output, usbmask
 330:	21 27       	eor	r18, r17
	rjmp	stuffed1
 332:	c5 cf       	rjmp	.-118    	; 0x2be <stuffed1>

00000334 <stuff2>:

stuff2:					; 3
	eor	output, usbmask
 334:	21 27       	eor	r18, r17
	rjmp	stuffed2
 336:	cb cf       	rjmp	.-106    	; 0x2ce <stuffed2>

00000338 <stuff3>:

stuff3:					; 3
	eor	output, usbmask
 338:	21 27       	eor	r18, r17
	rjmp	stuffed3
 33a:	d1 cf       	rjmp	.-94     	; 0x2de <stuffed3>

0000033c <stuff4>:

stuff4:					; 2+3
	eor	output, usbmask
 33c:	21 27       	eor	r18, r17
	clr	done
 33e:	44 27       	eor	r20, r20
	out	USB_OUT, output
 340:	22 bb       	out	0x12, r18	; 18
	rjmp	stuffed4
 342:	d7 cf       	rjmp	.-82     	; 0x2f2 <stuffed4>

00000344 <stuff5>:

stuff5:					; 3
	eor	output, usbmask
 344:	21 27       	eor	r18, r17
	rjmp	stuffed5
 346:	da cf       	rjmp	.-76     	; 0x2fc <stuffed5>

00000348 <stuff6>:

stuff6:					; 3
	eor	output, usbmask
 348:	21 27       	eor	r18, r17
	rjmp	stuffed6
 34a:	df cf       	rjmp	.-66     	; 0x30a <stuffed6>

0000034c <stuff7>:

stuff7:					; 3
	eor	output, usbmask
 34c:	21 27       	eor	r18, r17
	rjmp	stuffed7
 34e:	e5 cf       	rjmp	.-54     	; 0x31a <stuffed7>

00000350 <gen_eop>:

; ----------------------------------------------------------------------
; generate EOP, release the bus, and return from interrupt
; ----------------------------------------------------------------------
gen_eop:
	cbr	output, USB_MASK
 350:	23 7f       	andi	r18, 0xF3	; 243
	out	USB_OUT, output		; output SE0 for 2 bit times
 352:	22 bb       	out	0x12, r18	; 18
	pop	even
 354:	6f 91       	pop	r22
	pop	fixup
 356:	4f 91       	pop	r20
	pop	byte
 358:	3f 91       	pop	r19
	ldi	count, 1<<USB_INT_PENDING_BIT
 35a:	00 e4       	ldi	r16, 0x40	; 64
	out	USB_INT_PENDING, count	; interrupt was triggered by transmit
 35c:	0a bf       	out	0x3a, r16	; 58
	pop	YH			; this is the saved SREG
 35e:	df 91       	pop	r29
	pop	YL
 360:	cf 91       	pop	r28
	in	usbmask, USB_DDR
 362:	11 b3       	in	r17, 0x11	; 17
	mov	count, output
 364:	02 2f       	mov	r16, r18
	ori	output, USB_MASK_DMINUS
 366:	28 60       	ori	r18, 0x08	; 8
	out	USB_OUT, output		; output J state for 1 bit time
 368:	22 bb       	out	0x12, r18	; 18
	cbr	usbmask, USB_MASK
 36a:	13 7f       	andi	r17, 0xF3	; 243
	out	SREG, YH
 36c:	df bf       	out	0x3f, r29	; 63
	pop	YH
 36e:	df 91       	pop	r29
	pop	odd			; is the same register as output!
 370:	2f 91       	pop	r18
	nop
 372:	00 00       	nop
	out	USB_DDR, usbmask	; release bus
 374:	11 bb       	out	0x11, r17	; 17
	out	USB_OUT, count		; disable D- pullup
 376:	02 bb       	out	0x12, r16	; 18
	pop	usbmask
 378:	1f 91       	pop	r17
	pop	count
 37a:	0f 91       	pop	r16
	reti
 37c:	18 95       	reti

0000037e <delay>:
// ----------------------------------------------------------------------
// Delay exactly <sck_period> times 0.5 microseconds (6 cycles).
// ----------------------------------------------------------------------
__attribute__((always_inline))
static	void	delay ( void )
{
 37e:	df 93       	push	r29
 380:	cf 93       	push	r28
 382:	cd b7       	in	r28, 0x3d	; 61
 384:	de b7       	in	r29, 0x3e	; 62
	asm volatile(
 386:	80 91 63 00 	lds	r24, 0x0063
 38a:	08 2e       	mov	r0, r24
 38c:	00 c0       	rjmp	.+0      	; 0x38e <delay+0x10>
 38e:	00 00       	nop
 390:	0a 94       	dec	r0
 392:	e1 f7       	brne	.-8      	; 0x38c <delay+0xe>
		"0:	rjmp	1f		\n"
		"1:	nop			\n"
		"	dec	__tmp_reg__	\n"
		"	brne	0b		\n"
		: : "r" (sck_period) );
}
 394:	cf 91       	pop	r28
 396:	df 91       	pop	r29
 398:	08 95       	ret

0000039a <spiOneByte>:

#define SET_MOSI        PORT |= MOSI_MASK
#define CLR_MOSI        PORT &= ~ MOSI_MASK  

static byte_t spiOneByte(byte_t dataOut)
{
 39a:	df 93       	push	r29
 39c:	cf 93       	push	r28
 39e:	00 d0       	rcall	.+0      	; 0x3a0 <spiOneByte+0x6>
 3a0:	0f 92       	push	r0
 3a2:	cd b7       	in	r28, 0x3d	; 61
 3a4:	de b7       	in	r29, 0x3e	; 62
 3a6:	8b 83       	std	Y+3, r24	; 0x03
	byte_t	mask;
	byte_t  dataIn = 0;
 3a8:	19 82       	std	Y+1, r1	; 0x01

	for	( mask = 0x80; mask; mask >>= 1 )
 3aa:	80 e8       	ldi	r24, 0x80	; 128
 3ac:	8a 83       	std	Y+2, r24	; 0x02
 3ae:	35 c0       	rjmp	.+106    	; 0x41a <spiOneByte+0x80>
	{

		SET_SCK;
 3b0:	a8 e3       	ldi	r26, 0x38	; 56
 3b2:	b0 e0       	ldi	r27, 0x00	; 0
 3b4:	e8 e3       	ldi	r30, 0x38	; 56
 3b6:	f0 e0       	ldi	r31, 0x00	; 0
 3b8:	80 81       	ld	r24, Z
 3ba:	80 68       	ori	r24, 0x80	; 128
 3bc:	8c 93       	st	X, r24
		if	( dataOut & mask )
 3be:	9b 81       	ldd	r25, Y+3	; 0x03
 3c0:	8a 81       	ldd	r24, Y+2	; 0x02
 3c2:	89 23       	and	r24, r25
 3c4:	88 23       	and	r24, r24
 3c6:	39 f0       	breq	.+14     	; 0x3d6 <spiOneByte+0x3c>
		{
			SET_MOSI;            
 3c8:	a8 e3       	ldi	r26, 0x38	; 56
 3ca:	b0 e0       	ldi	r27, 0x00	; 0
 3cc:	e8 e3       	ldi	r30, 0x38	; 56
 3ce:	f0 e0       	ldi	r31, 0x00	; 0
 3d0:	80 81       	ld	r24, Z
 3d2:	80 62       	ori	r24, 0x20	; 32
 3d4:	8c 93       	st	X, r24
		}
//			if (! status & INVERTED_SCK_MASK )
		delay();
 3d6:	d3 df       	rcall	.-90     	; 0x37e <delay>

		dataIn <<= 1;
 3d8:	89 81       	ldd	r24, Y+1	; 0x01
 3da:	88 0f       	add	r24, r24
 3dc:	89 83       	std	Y+1, r24	; 0x01
		if	( PIN & MISO_MASK )
 3de:	e6 e3       	ldi	r30, 0x36	; 54
 3e0:	f0 e0       	ldi	r31, 0x00	; 0
 3e2:	80 81       	ld	r24, Z
 3e4:	88 2f       	mov	r24, r24
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	80 74       	andi	r24, 0x40	; 64
 3ea:	90 70       	andi	r25, 0x00	; 0
 3ec:	00 97       	sbiw	r24, 0x00	; 0
 3ee:	19 f0       	breq	.+6      	; 0x3f6 <spiOneByte+0x5c>
		{
			dataIn++;
 3f0:	89 81       	ldd	r24, Y+1	; 0x01
 3f2:	8f 5f       	subi	r24, 0xFF	; 255
 3f4:	89 83       	std	Y+1, r24	; 0x01
		}
		CLR_SCK;
 3f6:	a8 e3       	ldi	r26, 0x38	; 56
 3f8:	b0 e0       	ldi	r27, 0x00	; 0
 3fa:	e8 e3       	ldi	r30, 0x38	; 56
 3fc:	f0 e0       	ldi	r31, 0x00	; 0
 3fe:	80 81       	ld	r24, Z
 400:	8f 77       	andi	r24, 0x7F	; 127
 402:	8c 93       	st	X, r24
        delay();
 404:	bc df       	rcall	.-136    	; 0x37e <delay>
//			if ( status & INVERTED_SCK_MASK )
//				delay();
		CLR_MOSI;		
 406:	a8 e3       	ldi	r26, 0x38	; 56
 408:	b0 e0       	ldi	r27, 0x00	; 0
 40a:	e8 e3       	ldi	r30, 0x38	; 56
 40c:	f0 e0       	ldi	r31, 0x00	; 0
 40e:	80 81       	ld	r24, Z
 410:	8f 7d       	andi	r24, 0xDF	; 223
 412:	8c 93       	st	X, r24
static byte_t spiOneByte(byte_t dataOut)
{
	byte_t	mask;
	byte_t  dataIn = 0;

	for	( mask = 0x80; mask; mask >>= 1 )
 414:	8a 81       	ldd	r24, Y+2	; 0x02
 416:	86 95       	lsr	r24
 418:	8a 83       	std	Y+2, r24	; 0x02
 41a:	8a 81       	ldd	r24, Y+2	; 0x02
 41c:	88 23       	and	r24, r24
 41e:	41 f6       	brne	.-112    	; 0x3b0 <spiOneByte+0x16>
        delay();
//			if ( status & INVERTED_SCK_MASK )
//				delay();
		CLR_MOSI;		
	}
	return dataIn;
 420:	89 81       	ldd	r24, Y+1	; 0x01
}
 422:	0f 90       	pop	r0
 424:	0f 90       	pop	r0
 426:	0f 90       	pop	r0
 428:	cf 91       	pop	r28
 42a:	df 91       	pop	r29
 42c:	08 95       	ret

0000042e <spi>:
// ----------------------------------------------------------------------
// Issue one SPI command.
// ----------------------------------------------------------------------
//__attribute__((naked))
static	void	spi ( byte_t* cmd, byte_t* res, int i )
{
 42e:	df 93       	push	r29
 430:	cf 93       	push	r28
 432:	cd b7       	in	r28, 0x3d	; 61
 434:	de b7       	in	r29, 0x3e	; 62
 436:	29 97       	sbiw	r28, 0x09	; 9
 438:	0f b6       	in	r0, 0x3f	; 63
 43a:	f8 94       	cli
 43c:	de bf       	out	0x3e, r29	; 62
 43e:	0f be       	out	0x3f, r0	; 63
 440:	cd bf       	out	0x3d, r28	; 61
 442:	9d 83       	std	Y+5, r25	; 0x05
 444:	8c 83       	std	Y+4, r24	; 0x04
 446:	7f 83       	std	Y+7, r23	; 0x07
 448:	6e 83       	std	Y+6, r22	; 0x06
 44a:	59 87       	std	Y+9, r21	; 0x09
 44c:	48 87       	std	Y+8, r20	; 0x08
 44e:	1b c0       	rjmp	.+54     	; 0x486 <spi+0x58>
	byte_t	r;
    byte_t  mask;	

	while (i != 0)
	{
	  	i--;
 450:	88 85       	ldd	r24, Y+8	; 0x08
 452:	99 85       	ldd	r25, Y+9	; 0x09
 454:	01 97       	sbiw	r24, 0x01	; 1
 456:	99 87       	std	Y+9, r25	; 0x09
 458:	88 87       	std	Y+8, r24	; 0x08
		c = *cmd++;
 45a:	ec 81       	ldd	r30, Y+4	; 0x04
 45c:	fd 81       	ldd	r31, Y+5	; 0x05
 45e:	80 81       	ld	r24, Z
 460:	8b 83       	std	Y+3, r24	; 0x03
 462:	8c 81       	ldd	r24, Y+4	; 0x04
 464:	9d 81       	ldd	r25, Y+5	; 0x05
 466:	01 96       	adiw	r24, 0x01	; 1
 468:	9d 83       	std	Y+5, r25	; 0x05
 46a:	8c 83       	std	Y+4, r24	; 0x04
		r = 0;
 46c:	1a 82       	std	Y+2, r1	; 0x02
		r = spiOneByte(c);
 46e:	8b 81       	ldd	r24, Y+3	; 0x03
 470:	94 df       	rcall	.-216    	; 0x39a <spiOneByte>
 472:	8a 83       	std	Y+2, r24	; 0x02
		*res++ = r;
 474:	ee 81       	ldd	r30, Y+6	; 0x06
 476:	ff 81       	ldd	r31, Y+7	; 0x07
 478:	8a 81       	ldd	r24, Y+2	; 0x02
 47a:	80 83       	st	Z, r24
 47c:	8e 81       	ldd	r24, Y+6	; 0x06
 47e:	9f 81       	ldd	r25, Y+7	; 0x07
 480:	01 96       	adiw	r24, 0x01	; 1
 482:	9f 83       	std	Y+7, r25	; 0x07
 484:	8e 83       	std	Y+6, r24	; 0x06
{
	byte_t	c;
	byte_t	r;
    byte_t  mask;	

	while (i != 0)
 486:	88 85       	ldd	r24, Y+8	; 0x08
 488:	99 85       	ldd	r25, Y+9	; 0x09
 48a:	00 97       	sbiw	r24, 0x00	; 0
 48c:	09 f7       	brne	.-62     	; 0x450 <spi+0x22>
		c = *cmd++;
		r = 0;
		r = spiOneByte(c);
		*res++ = r;
	}
}
 48e:	29 96       	adiw	r28, 0x09	; 9
 490:	0f b6       	in	r0, 0x3f	; 63
 492:	f8 94       	cli
 494:	de bf       	out	0x3e, r29	; 62
 496:	0f be       	out	0x3f, r0	; 63
 498:	cd bf       	out	0x3d, r28	; 61
 49a:	cf 91       	pop	r28
 49c:	df 91       	pop	r29
 49e:	08 95       	ret

000004a0 <spi_rw>:

// ----------------------------------------------------------------------
// Create and issue a read or write SPI command.
// ----------------------------------------------------------------------
static	void	spi_rw ( void )
{
 4a0:	df 93       	push	r29
 4a2:	cf 93       	push	r28
 4a4:	00 d0       	rcall	.+0      	; 0x4a6 <spi_rw+0x6>
 4a6:	00 d0       	rcall	.+0      	; 0x4a8 <spi_rw+0x8>
 4a8:	0f 92       	push	r0
 4aa:	cd b7       	in	r28, 0x3d	; 61
 4ac:	de b7       	in	r29, 0x3e	; 62
	unsigned char offset = 0;
 4ae:	1d 82       	std	Y+5, r1	; 0x05
	uint_t	a;
	uint_t	tam = (status & TAMANIO_MASK);	
 4b0:	80 91 73 00 	lds	r24, 0x0073
 4b4:	88 2f       	mov	r24, r24
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	87 70       	andi	r24, 0x07	; 7
 4ba:	90 70       	andi	r25, 0x00	; 0
 4bc:	9a 83       	std	Y+2, r25	; 0x02
 4be:	89 83       	std	Y+1, r24	; 0x01

	a = address++;
 4c0:	80 91 66 00 	lds	r24, 0x0066
 4c4:	90 91 67 00 	lds	r25, 0x0067
 4c8:	9c 83       	std	Y+4, r25	; 0x04
 4ca:	8b 83       	std	Y+3, r24	; 0x03
 4cc:	01 96       	adiw	r24, 0x01	; 1
 4ce:	90 93 67 00 	sts	0x0067, r25
 4d2:	80 93 66 00 	sts	0x0066, r24
	cmd[0] = cmd0;
 4d6:	80 91 6a 00 	lds	r24, 0x006A
 4da:	80 93 6b 00 	sts	0x006B, r24
	if ( ( !(status & MICRO_S51_MASK) ) &&  ( ! (cmd0 & 0x80) ) )
 4de:	80 91 73 00 	lds	r24, 0x0073
 4e2:	88 2f       	mov	r24, r24
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	88 73       	andi	r24, 0x38	; 56
 4e8:	90 70       	andi	r25, 0x00	; 0
 4ea:	00 97       	sbiw	r24, 0x00	; 0
 4ec:	a9 f4       	brne	.+42     	; 0x518 <spi_rw+0x78>
 4ee:	80 91 6a 00 	lds	r24, 0x006A
 4f2:	88 23       	and	r24, r24
 4f4:	8c f0       	brlt	.+34     	; 0x518 <spi_rw+0x78>
	{	//Es AVR 							// NOT eeprom
		if ( a & 1 )
 4f6:	8b 81       	ldd	r24, Y+3	; 0x03
 4f8:	9c 81       	ldd	r25, Y+4	; 0x04
 4fa:	81 70       	andi	r24, 0x01	; 1
 4fc:	90 70       	andi	r25, 0x00	; 0
 4fe:	88 23       	and	r24, r24
 500:	29 f0       	breq	.+10     	; 0x50c <spi_rw+0x6c>
		{
			cmd[0] |= 0x08;	//La H
 502:	80 91 6b 00 	lds	r24, 0x006B
 506:	88 60       	ori	r24, 0x08	; 8
 508:	80 93 6b 00 	sts	0x006B, r24
		}
		a >>= 1;	//Corro la direccion
 50c:	8b 81       	ldd	r24, Y+3	; 0x03
 50e:	9c 81       	ldd	r25, Y+4	; 0x04
 510:	96 95       	lsr	r25
 512:	87 95       	ror	r24
 514:	9c 83       	std	Y+4, r25	; 0x04
 516:	8b 83       	std	Y+3, r24	; 0x03
	} 
	cmd[1] = a >> 8;
 518:	8b 81       	ldd	r24, Y+3	; 0x03
 51a:	9c 81       	ldd	r25, Y+4	; 0x04
 51c:	89 2f       	mov	r24, r25
 51e:	99 27       	eor	r25, r25
 520:	80 93 6c 00 	sts	0x006C, r24
	cmd[2] = a;
 524:	8b 81       	ldd	r24, Y+3	; 0x03
 526:	80 93 6d 00 	sts	0x006D, r24
	
	if ( (status & MICRO_S51_MASK ) == MICRO_8252 )
 52a:	80 91 73 00 	lds	r24, 0x0073
 52e:	88 2f       	mov	r24, r24
 530:	90 e0       	ldi	r25, 0x00	; 0
 532:	88 73       	andi	r24, 0x38	; 56
 534:	90 70       	andi	r25, 0x00	; 0
 536:	80 31       	cpi	r24, 0x10	; 16
 538:	91 05       	cpc	r25, r1
 53a:	81 f4       	brne	.+32     	; 0x55c <spi_rw+0xbc>
	{
		cmd[1] <<= 3;
 53c:	80 91 6c 00 	lds	r24, 0x006C
 540:	88 0f       	add	r24, r24
 542:	88 0f       	add	r24, r24
 544:	88 0f       	add	r24, r24
 546:	80 93 6c 00 	sts	0x006C, r24
		cmd[1] |= cmd0;
 54a:	90 91 6c 00 	lds	r25, 0x006C
 54e:	80 91 6a 00 	lds	r24, 0x006A
 552:	89 2b       	or	r24, r25
 554:	80 93 6c 00 	sts	0x006C, r24
		offset = 1;
 558:	81 e0       	ldi	r24, 0x01	; 1
 55a:	8d 83       	std	Y+5, r24	; 0x05
	}
	spi( cmd + offset, res, tam );
 55c:	8d 81       	ldd	r24, Y+5	; 0x05
 55e:	88 2f       	mov	r24, r24
 560:	90 e0       	ldi	r25, 0x00	; 0
 562:	85 59       	subi	r24, 0x95	; 149
 564:	9f 4f       	sbci	r25, 0xFF	; 255
 566:	49 81       	ldd	r20, Y+1	; 0x01
 568:	5a 81       	ldd	r21, Y+2	; 0x02
 56a:	2f e6       	ldi	r18, 0x6F	; 111
 56c:	30 e0       	ldi	r19, 0x00	; 0
 56e:	b9 01       	movw	r22, r18
 570:	5e df       	rcall	.-324    	; 0x42e <spi>
}
 572:	0f 90       	pop	r0
 574:	0f 90       	pop	r0
 576:	0f 90       	pop	r0
 578:	0f 90       	pop	r0
 57a:	0f 90       	pop	r0
 57c:	cf 91       	pop	r28
 57e:	df 91       	pop	r29
 580:	08 95       	ret

00000582 <usb_setup>:

// ----------------------------------------------------------------------
// Handle a non-standard SETUP packet.
// ----------------------------------------------------------------------
extern	byte_t	usb_setup ( byte_t data[8] )
{
 582:	df 93       	push	r29
 584:	cf 93       	push	r28
 586:	00 d0       	rcall	.+0      	; 0x588 <usb_setup+0x6>
 588:	00 d0       	rcall	.+0      	; 0x58a <usb_setup+0x8>
 58a:	00 d0       	rcall	.+0      	; 0x58c <usb_setup+0xa>
 58c:	cd b7       	in	r28, 0x3d	; 61
 58e:	de b7       	in	r29, 0x3e	; 62
 590:	9e 83       	std	Y+6, r25	; 0x06
 592:	8d 83       	std	Y+5, r24	; 0x05
	byte_t	mask;
	byte_t	req;
	byte_t	ans = 0;
 594:	1a 82       	std	Y+2, r1	; 0x02
	byte_t	cmd0_temp;

	// Generic requests
	req = data[1];
 596:	8d 81       	ldd	r24, Y+5	; 0x05
 598:	9e 81       	ldd	r25, Y+6	; 0x06
 59a:	fc 01       	movw	r30, r24
 59c:	31 96       	adiw	r30, 0x01	; 1
 59e:	80 81       	ld	r24, Z
 5a0:	8b 83       	std	Y+3, r24	; 0x03

	// Programming requests
	if	( req == USBTINY_POWERUP )
 5a2:	8b 81       	ldd	r24, Y+3	; 0x03
 5a4:	85 30       	cpi	r24, 0x05	; 5
 5a6:	31 f5       	brne	.+76     	; 0x5f4 <usb_setup+0x72>
	{
		sck_period = data[2];
 5a8:	8d 81       	ldd	r24, Y+5	; 0x05
 5aa:	9e 81       	ldd	r25, Y+6	; 0x06
 5ac:	fc 01       	movw	r30, r24
 5ae:	32 96       	adiw	r30, 0x02	; 2
 5b0:	80 81       	ld	r24, Z
 5b2:	80 93 63 00 	sts	0x0063, r24
		mask = POWER_MASK;
 5b6:	81 e0       	ldi	r24, 0x01	; 1
 5b8:	8c 83       	std	Y+4, r24	; 0x04
		if	( data[4] )
 5ba:	8d 81       	ldd	r24, Y+5	; 0x05
 5bc:	9e 81       	ldd	r25, Y+6	; 0x06
 5be:	fc 01       	movw	r30, r24
 5c0:	34 96       	adiw	r30, 0x04	; 4
 5c2:	80 81       	ld	r24, Z
 5c4:	88 23       	and	r24, r24
 5c6:	19 f0       	breq	.+6      	; 0x5ce <usb_setup+0x4c>
		{
			mask |= RESET_MASK;
 5c8:	8c 81       	ldd	r24, Y+4	; 0x04
 5ca:	80 61       	ori	r24, 0x10	; 16
 5cc:	8c 83       	std	Y+4, r24	; 0x04
		}
		// Use AVR por default
		status = AVR_SCK | MICRO_AVR | TAMANIO_AVR;
 5ce:	84 e0       	ldi	r24, 0x04	; 4
 5d0:	80 93 73 00 	sts	0x0073, r24
		
		PORTD &= ~_BV(4);
 5d4:	a2 e3       	ldi	r26, 0x32	; 50
 5d6:	b0 e0       	ldi	r27, 0x00	; 0
 5d8:	e2 e3       	ldi	r30, 0x32	; 50
 5da:	f0 e0       	ldi	r31, 0x00	; 0
 5dc:	80 81       	ld	r24, Z
 5de:	8f 7e       	andi	r24, 0xEF	; 239
 5e0:	8c 93       	st	X, r24
		DDR  = POWER_MASK | RESET_MASK | SCK_MASK | MOSI_MASK;
 5e2:	e7 e3       	ldi	r30, 0x37	; 55
 5e4:	f0 e0       	ldi	r31, 0x00	; 0
 5e6:	81 eb       	ldi	r24, 0xB1	; 177
 5e8:	80 83       	st	Z, r24
		PORT = mask;
 5ea:	e8 e3       	ldi	r30, 0x38	; 56
 5ec:	f0 e0       	ldi	r31, 0x00	; 0
 5ee:	8c 81       	ldd	r24, Y+4	; 0x04
 5f0:	80 83       	st	Z, r24
 5f2:	8d c0       	rjmp	.+282    	; 0x70e <usb_setup+0x18c>
		// return 0;
	}
	else if	( req == USBTINY_POWERDOWN )
 5f4:	8b 81       	ldd	r24, Y+3	; 0x03
 5f6:	86 30       	cpi	r24, 0x06	; 6
 5f8:	71 f4       	brne	.+28     	; 0x616 <usb_setup+0x94>
	{
	  //PORT |= RESET_MASK;
		DDR  = 0x00;
 5fa:	e7 e3       	ldi	r30, 0x37	; 55
 5fc:	f0 e0       	ldi	r31, 0x00	; 0
 5fe:	10 82       	st	Z, r1
		PORT = 0x00;
 600:	e8 e3       	ldi	r30, 0x38	; 56
 602:	f0 e0       	ldi	r31, 0x00	; 0
 604:	10 82       	st	Z, r1
		PORTD |= _BV(4);
 606:	a2 e3       	ldi	r26, 0x32	; 50
 608:	b0 e0       	ldi	r27, 0x00	; 0
 60a:	e2 e3       	ldi	r30, 0x32	; 50
 60c:	f0 e0       	ldi	r31, 0x00	; 0
 60e:	80 81       	ld	r24, Z
 610:	80 61       	ori	r24, 0x10	; 16
 612:	8c 93       	st	X, r24
 614:	7c c0       	rjmp	.+248    	; 0x70e <usb_setup+0x18c>
		// return 0;
	}
	else if ( req == USBTINY_CONFIGURE )
 616:	8b 81       	ldd	r24, Y+3	; 0x03
 618:	8f 30       	cpi	r24, 0x0F	; 15
 61a:	79 f4       	brne	.+30     	; 0x63a <usb_setup+0xb8>
	{
		status = data[2];
 61c:	8d 81       	ldd	r24, Y+5	; 0x05
 61e:	9e 81       	ldd	r25, Y+6	; 0x06
 620:	fc 01       	movw	r30, r24
 622:	32 96       	adiw	r30, 0x02	; 2
 624:	80 81       	ld	r24, Z
 626:	80 93 73 00 	sts	0x0073, r24
		cmd0 = data[4];
 62a:	8d 81       	ldd	r24, Y+5	; 0x05
 62c:	9e 81       	ldd	r25, Y+6	; 0x06
 62e:	fc 01       	movw	r30, r24
 630:	34 96       	adiw	r30, 0x04	; 4
 632:	80 81       	ld	r24, Z
 634:	80 93 6a 00 	sts	0x006A, r24
 638:	6a c0       	rjmp	.+212    	; 0x70e <usb_setup+0x18c>
	}
	/*else if	( ! PORT )
	{
		//return 0;
	}*/
	else if	( req == USBTINY_SPI )
 63a:	8b 81       	ldd	r24, Y+3	; 0x03
 63c:	87 30       	cpi	r24, 0x07	; 7
 63e:	61 f4       	brne	.+24     	; 0x658 <usb_setup+0xd6>
	{
	  spi( data + 2, data + 0, 4 );
 640:	8d 81       	ldd	r24, Y+5	; 0x05
 642:	9e 81       	ldd	r25, Y+6	; 0x06
 644:	02 96       	adiw	r24, 0x02	; 2
 646:	2d 81       	ldd	r18, Y+5	; 0x05
 648:	3e 81       	ldd	r19, Y+6	; 0x06
 64a:	b9 01       	movw	r22, r18
 64c:	44 e0       	ldi	r20, 0x04	; 4
 64e:	50 e0       	ldi	r21, 0x00	; 0
 650:	ee de       	rcall	.-548    	; 0x42e <spi>
		ans = 4;
 652:	84 e0       	ldi	r24, 0x04	; 4
 654:	8a 83       	std	Y+2, r24	; 0x02
 656:	5b c0       	rjmp	.+182    	; 0x70e <usb_setup+0x18c>
		//return 4;
	}
	else if	( req == USBTINY_SPI1 )
 658:	8b 81       	ldd	r24, Y+3	; 0x03
 65a:	8e 30       	cpi	r24, 0x0E	; 14
 65c:	61 f4       	brne	.+24     	; 0x676 <usb_setup+0xf4>
	{
	  spi( data + 2, data + 0, 1 );
 65e:	8d 81       	ldd	r24, Y+5	; 0x05
 660:	9e 81       	ldd	r25, Y+6	; 0x06
 662:	02 96       	adiw	r24, 0x02	; 2
 664:	2d 81       	ldd	r18, Y+5	; 0x05
 666:	3e 81       	ldd	r19, Y+6	; 0x06
 668:	b9 01       	movw	r22, r18
 66a:	41 e0       	ldi	r20, 0x01	; 1
 66c:	50 e0       	ldi	r21, 0x00	; 0
 66e:	df de       	rcall	.-578    	; 0x42e <spi>
		ans = 1;
 670:	81 e0       	ldi	r24, 0x01	; 1
 672:	8a 83       	std	Y+2, r24	; 0x02
 674:	4c c0       	rjmp	.+152    	; 0x70e <usb_setup+0x18c>
		//return 1;
	}
	else if	( req == USBTINY_POLL_BYTES )
 676:	8b 81       	ldd	r24, Y+3	; 0x03
 678:	88 30       	cpi	r24, 0x08	; 8
 67a:	79 f4       	brne	.+30     	; 0x69a <usb_setup+0x118>
	{
		poll1 = data[2];
 67c:	8d 81       	ldd	r24, Y+5	; 0x05
 67e:	9e 81       	ldd	r25, Y+6	; 0x06
 680:	fc 01       	movw	r30, r24
 682:	32 96       	adiw	r30, 0x02	; 2
 684:	80 81       	ld	r24, Z
 686:	80 93 64 00 	sts	0x0064, r24
		poll2 = data[3];
 68a:	8d 81       	ldd	r24, Y+5	; 0x05
 68c:	9e 81       	ldd	r25, Y+6	; 0x06
 68e:	fc 01       	movw	r30, r24
 690:	33 96       	adiw	r30, 0x03	; 3
 692:	80 81       	ld	r24, Z
 694:	80 93 65 00 	sts	0x0065, r24
 698:	3a c0       	rjmp	.+116    	; 0x70e <usb_setup+0x18c>
		//return 0;
	}
	else 
	{
		address = * (uint_t*) & data[4];
 69a:	8d 81       	ldd	r24, Y+5	; 0x05
 69c:	9e 81       	ldd	r25, Y+6	; 0x06
 69e:	fc 01       	movw	r30, r24
 6a0:	34 96       	adiw	r30, 0x04	; 4
 6a2:	80 81       	ld	r24, Z
 6a4:	91 81       	ldd	r25, Z+1	; 0x01
 6a6:	90 93 67 00 	sts	0x0067, r25
 6aa:	80 93 66 00 	sts	0x0066, r24
		if	( req == USBTINY_FLASH_READ )
 6ae:	8b 81       	ldd	r24, Y+3	; 0x03
 6b0:	89 30       	cpi	r24, 0x09	; 9
 6b2:	29 f4       	brne	.+10     	; 0x6be <usb_setup+0x13c>
		{
			cmd0_temp = 0x20;
 6b4:	80 e2       	ldi	r24, 0x20	; 32
 6b6:	89 83       	std	Y+1, r24	; 0x01
			ans = 0xff;
 6b8:	8f ef       	ldi	r24, 0xFF	; 255
 6ba:	8a 83       	std	Y+2, r24	; 0x02
 6bc:	1d c0       	rjmp	.+58     	; 0x6f8 <usb_setup+0x176>
			//return 0xff;	// usb_in() will be called to get the data
		}
		else if	( req == USBTINY_EEPROM_READ )
 6be:	8b 81       	ldd	r24, Y+3	; 0x03
 6c0:	8b 30       	cpi	r24, 0x0B	; 11
 6c2:	29 f4       	brne	.+10     	; 0x6ce <usb_setup+0x14c>
		{
			cmd0_temp = 0xa0;
 6c4:	80 ea       	ldi	r24, 0xA0	; 160
 6c6:	89 83       	std	Y+1, r24	; 0x01
			ans =  0xff;
 6c8:	8f ef       	ldi	r24, 0xFF	; 255
 6ca:	8a 83       	std	Y+2, r24	; 0x02
 6cc:	15 c0       	rjmp	.+42     	; 0x6f8 <usb_setup+0x176>
			//return 0xff;	// usb_in() will be called to get the data
		}
		else {
			timeout = * (uint_t*) & data[2];
 6ce:	8d 81       	ldd	r24, Y+5	; 0x05
 6d0:	9e 81       	ldd	r25, Y+6	; 0x06
 6d2:	fc 01       	movw	r30, r24
 6d4:	32 96       	adiw	r30, 0x02	; 2
 6d6:	80 81       	ld	r24, Z
 6d8:	91 81       	ldd	r25, Z+1	; 0x01
 6da:	90 93 69 00 	sts	0x0069, r25
 6de:	80 93 68 00 	sts	0x0068, r24
			if	( req == USBTINY_FLASH_WRITE )
 6e2:	8b 81       	ldd	r24, Y+3	; 0x03
 6e4:	8a 30       	cpi	r24, 0x0A	; 10
 6e6:	19 f4       	brne	.+6      	; 0x6ee <usb_setup+0x16c>
			{
				cmd0_temp = 0x40;
 6e8:	80 e4       	ldi	r24, 0x40	; 64
 6ea:	89 83       	std	Y+1, r24	; 0x01
 6ec:	05 c0       	rjmp	.+10     	; 0x6f8 <usb_setup+0x176>
				//return 0;	// data will be received by usb_out()
			}
			else if	( req == USBTINY_EEPROM_WRITE )
 6ee:	8b 81       	ldd	r24, Y+3	; 0x03
 6f0:	8c 30       	cpi	r24, 0x0C	; 12
 6f2:	11 f4       	brne	.+4      	; 0x6f8 <usb_setup+0x176>
			{
				cmd0_temp = 0xc0;
 6f4:	80 ec       	ldi	r24, 0xC0	; 192
 6f6:	89 83       	std	Y+1, r24	; 0x01
				//return 0;	// data will be received by usb_out()
			}
		}	
		if ( ! (status & MICRO_S51_MASK) )		//Solo grabo el dato temp en cmd0 si estoy grabando un AVR	
 6f8:	80 91 73 00 	lds	r24, 0x0073
 6fc:	88 2f       	mov	r24, r24
 6fe:	90 e0       	ldi	r25, 0x00	; 0
 700:	88 73       	andi	r24, 0x38	; 56
 702:	90 70       	andi	r25, 0x00	; 0
 704:	00 97       	sbiw	r24, 0x00	; 0
 706:	19 f4       	brne	.+6      	; 0x70e <usb_setup+0x18c>
		{						//Si estoy programando un S51, tengo que pasarlo en la trama CONFIGURE
			cmd0 = cmd0_temp;
 708:	89 81       	ldd	r24, Y+1	; 0x01
 70a:	80 93 6a 00 	sts	0x006A, r24
		}
	}
	return ans;
 70e:	8a 81       	ldd	r24, Y+2	; 0x02
}
 710:	26 96       	adiw	r28, 0x06	; 6
 712:	0f b6       	in	r0, 0x3f	; 63
 714:	f8 94       	cli
 716:	de bf       	out	0x3e, r29	; 62
 718:	0f be       	out	0x3f, r0	; 63
 71a:	cd bf       	out	0x3d, r28	; 61
 71c:	cf 91       	pop	r28
 71e:	df 91       	pop	r29
 720:	08 95       	ret

00000722 <usb_in>:

// ----------------------------------------------------------------------
// Handle an IN packet.
// ----------------------------------------------------------------------
extern	byte_t	usb_in ( byte_t* data, byte_t len )
{
 722:	df 93       	push	r29
 724:	cf 93       	push	r28
 726:	00 d0       	rcall	.+0      	; 0x728 <usb_in+0x6>
 728:	00 d0       	rcall	.+0      	; 0x72a <usb_in+0x8>
 72a:	cd b7       	in	r28, 0x3d	; 61
 72c:	de b7       	in	r29, 0x3e	; 62
 72e:	9b 83       	std	Y+3, r25	; 0x03
 730:	8a 83       	std	Y+2, r24	; 0x02
 732:	6c 83       	std	Y+4, r22	; 0x04
	byte_t	i;

	for	( i = 0; i < len; i++ )
 734:	19 82       	std	Y+1, r1	; 0x01
 736:	0f c0       	rjmp	.+30     	; 0x756 <usb_in+0x34>
	{
		spi_rw();
 738:	b3 de       	rcall	.-666    	; 0x4a0 <spi_rw>
		data[i] = res[3];
 73a:	89 81       	ldd	r24, Y+1	; 0x01
 73c:	28 2f       	mov	r18, r24
 73e:	30 e0       	ldi	r19, 0x00	; 0
 740:	8a 81       	ldd	r24, Y+2	; 0x02
 742:	9b 81       	ldd	r25, Y+3	; 0x03
 744:	fc 01       	movw	r30, r24
 746:	e2 0f       	add	r30, r18
 748:	f3 1f       	adc	r31, r19
 74a:	80 91 72 00 	lds	r24, 0x0072
 74e:	80 83       	st	Z, r24
// ----------------------------------------------------------------------
extern	byte_t	usb_in ( byte_t* data, byte_t len )
{
	byte_t	i;

	for	( i = 0; i < len; i++ )
 750:	89 81       	ldd	r24, Y+1	; 0x01
 752:	8f 5f       	subi	r24, 0xFF	; 255
 754:	89 83       	std	Y+1, r24	; 0x01
 756:	99 81       	ldd	r25, Y+1	; 0x01
 758:	8c 81       	ldd	r24, Y+4	; 0x04
 75a:	98 17       	cp	r25, r24
 75c:	68 f3       	brcs	.-38     	; 0x738 <usb_in+0x16>
	{
		spi_rw();
		data[i] = res[3];
	}
	return len;
 75e:	8c 81       	ldd	r24, Y+4	; 0x04
}
 760:	0f 90       	pop	r0
 762:	0f 90       	pop	r0
 764:	0f 90       	pop	r0
 766:	0f 90       	pop	r0
 768:	cf 91       	pop	r28
 76a:	df 91       	pop	r29
 76c:	08 95       	ret

0000076e <usb_out>:

// ----------------------------------------------------------------------
// Handle an OUT packet.
// ----------------------------------------------------------------------
extern	void	usb_out ( byte_t* data, byte_t len )
{
 76e:	df 93       	push	r29
 770:	cf 93       	push	r28
 772:	cd b7       	in	r28, 0x3d	; 61
 774:	de b7       	in	r29, 0x3e	; 62
 776:	27 97       	sbiw	r28, 0x07	; 7
 778:	0f b6       	in	r0, 0x3f	; 63
 77a:	f8 94       	cli
 77c:	de bf       	out	0x3e, r29	; 62
 77e:	0f be       	out	0x3f, r0	; 63
 780:	cd bf       	out	0x3d, r28	; 61
 782:	9e 83       	std	Y+6, r25	; 0x06
 784:	8d 83       	std	Y+5, r24	; 0x05
 786:	6f 83       	std	Y+7, r22	; 0x07
	byte_t	i;
	uint_t	usec;
	byte_t	r;

	for	( i = 0; i < len; i++ )
 788:	1c 82       	std	Y+4, r1	; 0x04
 78a:	4e c0       	rjmp	.+156    	; 0x828 <usb_out+0xba>
	{
		cmd[3] = data[i];
 78c:	8c 81       	ldd	r24, Y+4	; 0x04
 78e:	28 2f       	mov	r18, r24
 790:	30 e0       	ldi	r19, 0x00	; 0
 792:	8d 81       	ldd	r24, Y+5	; 0x05
 794:	9e 81       	ldd	r25, Y+6	; 0x06
 796:	fc 01       	movw	r30, r24
 798:	e2 0f       	add	r30, r18
 79a:	f3 1f       	adc	r31, r19
 79c:	80 81       	ld	r24, Z
 79e:	80 93 6e 00 	sts	0x006E, r24
		spi_rw();
 7a2:	7e de       	rcall	.-772    	; 0x4a0 <spi_rw>
		cmd[0] ^= 0x60;	// turn write into read
 7a4:	90 91 6b 00 	lds	r25, 0x006B
 7a8:	80 e6       	ldi	r24, 0x60	; 96
 7aa:	89 27       	eor	r24, r25
 7ac:	80 93 6b 00 	sts	0x006B, r24
		for	( usec = 0; usec < timeout; usec += 32 * sck_period )
 7b0:	1b 82       	std	Y+3, r1	; 0x03
 7b2:	1a 82       	std	Y+2, r1	; 0x02
 7b4:	2d c0       	rjmp	.+90     	; 0x810 <usb_out+0xa2>
		{	// when timeout > 0, poll until byte is written
		  spi( cmd, res, 4 );
 7b6:	8b e6       	ldi	r24, 0x6B	; 107
 7b8:	90 e0       	ldi	r25, 0x00	; 0
 7ba:	2f e6       	ldi	r18, 0x6F	; 111
 7bc:	30 e0       	ldi	r19, 0x00	; 0
 7be:	b9 01       	movw	r22, r18
 7c0:	44 e0       	ldi	r20, 0x04	; 4
 7c2:	50 e0       	ldi	r21, 0x00	; 0
 7c4:	34 de       	rcall	.-920    	; 0x42e <spi>
			r = res[3];
 7c6:	80 91 72 00 	lds	r24, 0x0072
 7ca:	89 83       	std	Y+1, r24	; 0x01
			if	( r == cmd[3] && r != poll1 && r != poll2 )
 7cc:	90 91 6e 00 	lds	r25, 0x006E
 7d0:	89 81       	ldd	r24, Y+1	; 0x01
 7d2:	98 17       	cp	r25, r24
 7d4:	51 f4       	brne	.+20     	; 0x7ea <usb_out+0x7c>
 7d6:	90 91 64 00 	lds	r25, 0x0064
 7da:	89 81       	ldd	r24, Y+1	; 0x01
 7dc:	89 17       	cp	r24, r25
 7de:	29 f0       	breq	.+10     	; 0x7ea <usb_out+0x7c>
 7e0:	90 91 65 00 	lds	r25, 0x0065
 7e4:	89 81       	ldd	r24, Y+1	; 0x01
 7e6:	89 17       	cp	r24, r25
 7e8:	e1 f4       	brne	.+56     	; 0x822 <usb_out+0xb4>
	for	( i = 0; i < len; i++ )
	{
		cmd[3] = data[i];
		spi_rw();
		cmd[0] ^= 0x60;	// turn write into read
		for	( usec = 0; usec < timeout; usec += 32 * sck_period )
 7ea:	80 91 63 00 	lds	r24, 0x0063
 7ee:	88 2f       	mov	r24, r24
 7f0:	90 e0       	ldi	r25, 0x00	; 0
 7f2:	88 0f       	add	r24, r24
 7f4:	99 1f       	adc	r25, r25
 7f6:	82 95       	swap	r24
 7f8:	92 95       	swap	r25
 7fa:	90 7f       	andi	r25, 0xF0	; 240
 7fc:	98 27       	eor	r25, r24
 7fe:	80 7f       	andi	r24, 0xF0	; 240
 800:	98 27       	eor	r25, r24
 802:	9c 01       	movw	r18, r24
 804:	8a 81       	ldd	r24, Y+2	; 0x02
 806:	9b 81       	ldd	r25, Y+3	; 0x03
 808:	82 0f       	add	r24, r18
 80a:	93 1f       	adc	r25, r19
 80c:	9b 83       	std	Y+3, r25	; 0x03
 80e:	8a 83       	std	Y+2, r24	; 0x02
 810:	20 91 68 00 	lds	r18, 0x0068
 814:	30 91 69 00 	lds	r19, 0x0069
 818:	8a 81       	ldd	r24, Y+2	; 0x02
 81a:	9b 81       	ldd	r25, Y+3	; 0x03
 81c:	82 17       	cp	r24, r18
 81e:	93 07       	cpc	r25, r19
 820:	50 f2       	brcs	.-108    	; 0x7b6 <usb_out+0x48>
{
	byte_t	i;
	uint_t	usec;
	byte_t	r;

	for	( i = 0; i < len; i++ )
 822:	8c 81       	ldd	r24, Y+4	; 0x04
 824:	8f 5f       	subi	r24, 0xFF	; 255
 826:	8c 83       	std	Y+4, r24	; 0x04
 828:	9c 81       	ldd	r25, Y+4	; 0x04
 82a:	8f 81       	ldd	r24, Y+7	; 0x07
 82c:	98 17       	cp	r25, r24
 82e:	08 f4       	brcc	.+2      	; 0x832 <usb_out+0xc4>
 830:	ad cf       	rjmp	.-166    	; 0x78c <usb_out+0x1e>
			{
				break;
			}
		}
	}
}	 
 832:	27 96       	adiw	r28, 0x07	; 7
 834:	0f b6       	in	r0, 0x3f	; 63
 836:	f8 94       	cli
 838:	de bf       	out	0x3e, r29	; 62
 83a:	0f be       	out	0x3f, r0	; 63
 83c:	cd bf       	out	0x3d, r28	; 61
 83e:	cf 91       	pop	r28
 840:	df 91       	pop	r29
 842:	08 95       	ret

00000844 <main>:
// Main
// ----------------------------------------------------------------------
__attribute__((naked))		// suppress redundant SP initialization
extern	int	main ( void )
{
  PORTD |= _BV(4);
 844:	a2 e3       	ldi	r26, 0x32	; 50
 846:	b0 e0       	ldi	r27, 0x00	; 0
 848:	e2 e3       	ldi	r30, 0x32	; 50
 84a:	f0 e0       	ldi	r31, 0x00	; 0
 84c:	80 81       	ld	r24, Z
 84e:	80 61       	ori	r24, 0x10	; 16
 850:	8c 93       	st	X, r24
  DDRD = _BV(6) | _BV(5) | _BV(4); // setup USB pullup, LED pin and buffer select pins to output
 852:	e1 e3       	ldi	r30, 0x31	; 49
 854:	f0 e0       	ldi	r31, 0x00	; 0
 856:	80 e7       	ldi	r24, 0x70	; 112
 858:	80 83       	st	Z, r24
  usb_init();
 85a:	58 d1       	rcall	.+688    	; 0xb0c <usb_init>
  PORTD = _BV(6) | _BV(4); // pull pull-up and buffer disable high
 85c:	e2 e3       	ldi	r30, 0x32	; 50
 85e:	f0 e0       	ldi	r31, 0x00	; 0
 860:	80 e5       	ldi	r24, 0x50	; 80
 862:	80 83       	st	Z, r24

  for	( ;; )
    {
      usb_poll();
 864:	69 d1       	rcall	.+722    	; 0xb38 <usb_poll>
 866:	fe cf       	rjmp	.-4      	; 0x864 <main+0x20>

00000868 <usb_receive>:

// ----------------------------------------------------------------------
// Inspect an incoming packet.
// ----------------------------------------------------------------------
static	void	usb_receive ( byte_t* data, byte_t rx_len )
{
 868:	df 93       	push	r29
 86a:	cf 93       	push	r28
 86c:	00 d0       	rcall	.+0      	; 0x86e <usb_receive+0x6>
 86e:	00 d0       	rcall	.+0      	; 0x870 <usb_receive+0x8>
 870:	00 d0       	rcall	.+0      	; 0x872 <usb_receive+0xa>
 872:	cd b7       	in	r28, 0x3d	; 61
 874:	de b7       	in	r29, 0x3e	; 62
 876:	9d 83       	std	Y+5, r25	; 0x05
 878:	8c 83       	std	Y+4, r24	; 0x04
 87a:	6e 83       	std	Y+6, r22	; 0x06
	byte_t	len;
	byte_t	type;
	byte_t	limit;

	usb_tx_state = TX_STATE_RAM;
 87c:	81 e0       	ldi	r24, 0x01	; 1
 87e:	80 93 74 00 	sts	0x0074, r24
	len = 0;
 882:	1b 82       	std	Y+3, r1	; 0x03
	if	( usb_rx_token == USB_PID_SETUP )
 884:	80 91 85 00 	lds	r24, 0x0085
 888:	8d 32       	cpi	r24, 0x2D	; 45
 88a:	09 f0       	breq	.+2      	; 0x88e <usb_receive+0x26>
 88c:	98 c0       	rjmp	.+304    	; 0x9be <usb_receive+0x156>
	{
		limit = data[6];
 88e:	8c 81       	ldd	r24, Y+4	; 0x04
 890:	9d 81       	ldd	r25, Y+5	; 0x05
 892:	fc 01       	movw	r30, r24
 894:	36 96       	adiw	r30, 0x06	; 6
 896:	80 81       	ld	r24, Z
 898:	89 83       	std	Y+1, r24	; 0x01
		if	( data[7] )
 89a:	8c 81       	ldd	r24, Y+4	; 0x04
 89c:	9d 81       	ldd	r25, Y+5	; 0x05
 89e:	fc 01       	movw	r30, r24
 8a0:	37 96       	adiw	r30, 0x07	; 7
 8a2:	80 81       	ld	r24, Z
 8a4:	88 23       	and	r24, r24
 8a6:	11 f0       	breq	.+4      	; 0x8ac <usb_receive+0x44>
		{
			limit = 255;
 8a8:	8f ef       	ldi	r24, 0xFF	; 255
 8aa:	89 83       	std	Y+1, r24	; 0x01
		}
		type = data[0] & 0x60;
 8ac:	ec 81       	ldd	r30, Y+4	; 0x04
 8ae:	fd 81       	ldd	r31, Y+5	; 0x05
 8b0:	80 81       	ld	r24, Z
 8b2:	80 76       	andi	r24, 0x60	; 96
 8b4:	8a 83       	std	Y+2, r24	; 0x02
		if	( type == 0x00 )
 8b6:	8a 81       	ldd	r24, Y+2	; 0x02
 8b8:	88 23       	and	r24, r24
 8ba:	09 f0       	breq	.+2      	; 0x8be <usb_receive+0x56>
 8bc:	69 c0       	rjmp	.+210    	; 0x990 <usb_receive+0x128>
		{	// Standard request
			if	( data[1] == 0 )	// GET_STATUS
 8be:	8c 81       	ldd	r24, Y+4	; 0x04
 8c0:	9d 81       	ldd	r25, Y+5	; 0x05
 8c2:	fc 01       	movw	r30, r24
 8c4:	31 96       	adiw	r30, 0x01	; 1
 8c6:	80 81       	ld	r24, Z
 8c8:	88 23       	and	r24, r24
 8ca:	59 f4       	brne	.+22     	; 0x8e2 <usb_receive+0x7a>
			{
				len = 2;
 8cc:	82 e0       	ldi	r24, 0x02	; 2
 8ce:	8b 83       	std	Y+3, r24	; 0x03
#if	USBTINY_MAX_POWER == 0
				data[0] = (data[0] == 0x80);
#else
				data[0] = 0;
 8d0:	ec 81       	ldd	r30, Y+4	; 0x04
 8d2:	fd 81       	ldd	r31, Y+5	; 0x05
 8d4:	10 82       	st	Z, r1
#endif
				data[1] = 0;
 8d6:	8c 81       	ldd	r24, Y+4	; 0x04
 8d8:	9d 81       	ldd	r25, Y+5	; 0x05
 8da:	fc 01       	movw	r30, r24
 8dc:	31 96       	adiw	r30, 0x01	; 1
 8de:	10 82       	st	Z, r1
 8e0:	61 c0       	rjmp	.+194    	; 0x9a4 <usb_receive+0x13c>
			}
			else if	( data[1] == 5 )	// SET_ADDRESS
 8e2:	8c 81       	ldd	r24, Y+4	; 0x04
 8e4:	9d 81       	ldd	r25, Y+5	; 0x05
 8e6:	fc 01       	movw	r30, r24
 8e8:	31 96       	adiw	r30, 0x01	; 1
 8ea:	80 81       	ld	r24, Z
 8ec:	85 30       	cpi	r24, 0x05	; 5
 8ee:	41 f4       	brne	.+16     	; 0x900 <usb_receive+0x98>
			{
				new_address = data[2];
 8f0:	8c 81       	ldd	r24, Y+4	; 0x04
 8f2:	9d 81       	ldd	r25, Y+5	; 0x05
 8f4:	fc 01       	movw	r30, r24
 8f6:	32 96       	adiw	r30, 0x02	; 2
 8f8:	80 81       	ld	r24, Z
 8fa:	80 93 78 00 	sts	0x0078, r24
 8fe:	52 c0       	rjmp	.+164    	; 0x9a4 <usb_receive+0x13c>
			}
			else if	( data[1] == 6 )	// GET_DESCRIPTOR
 900:	8c 81       	ldd	r24, Y+4	; 0x04
 902:	9d 81       	ldd	r25, Y+5	; 0x05
 904:	fc 01       	movw	r30, r24
 906:	31 96       	adiw	r30, 0x01	; 1
 908:	80 81       	ld	r24, Z
 90a:	86 30       	cpi	r24, 0x06	; 6
 90c:	31 f5       	brne	.+76     	; 0x95a <usb_receive+0xf2>
			{
				usb_tx_state = TX_STATE_ROM;
 90e:	82 e0       	ldi	r24, 0x02	; 2
 910:	80 93 74 00 	sts	0x0074, r24
				if	( data[3] == 1 )
 914:	8c 81       	ldd	r24, Y+4	; 0x04
 916:	9d 81       	ldd	r25, Y+5	; 0x05
 918:	fc 01       	movw	r30, r24
 91a:	33 96       	adiw	r30, 0x03	; 3
 91c:	80 81       	ld	r24, Z
 91e:	81 30       	cpi	r24, 0x01	; 1
 920:	39 f4       	brne	.+14     	; 0x930 <usb_receive+0xc8>
				{	// DEVICE
					data = (byte_t*) &descr_device;
 922:	8a e3       	ldi	r24, 0x3A	; 58
 924:	90 e0       	ldi	r25, 0x00	; 0
 926:	9d 83       	std	Y+5, r25	; 0x05
 928:	8c 83       	std	Y+4, r24	; 0x04
					len = sizeof(descr_device);
 92a:	82 e1       	ldi	r24, 0x12	; 18
 92c:	8b 83       	std	Y+3, r24	; 0x03
 92e:	3a c0       	rjmp	.+116    	; 0x9a4 <usb_receive+0x13c>
				}
				else if	( data[3] == 2 )
 930:	8c 81       	ldd	r24, Y+4	; 0x04
 932:	9d 81       	ldd	r25, Y+5	; 0x05
 934:	fc 01       	movw	r30, r24
 936:	33 96       	adiw	r30, 0x03	; 3
 938:	80 81       	ld	r24, Z
 93a:	82 30       	cpi	r24, 0x02	; 2
 93c:	99 f5       	brne	.+102    	; 0x9a4 <usb_receive+0x13c>
				{	// CONFIGURATION
					data = (byte_t*) &descr_config;
 93e:	8c e4       	ldi	r24, 0x4C	; 76
 940:	90 e0       	ldi	r25, 0x00	; 0
 942:	9d 83       	std	Y+5, r25	; 0x05
 944:	8c 83       	std	Y+4, r24	; 0x04
					len = sizeof(descr_config);
 946:	82 e1       	ldi	r24, 0x12	; 18
 948:	8b 83       	std	Y+3, r24	; 0x03
					// If we got this far, there's a good chance everything is OK with enumeration so turn on the OK led
					PORTD |= _BV(5);
 94a:	a2 e3       	ldi	r26, 0x32	; 50
 94c:	b0 e0       	ldi	r27, 0x00	; 0
 94e:	e2 e3       	ldi	r30, 0x32	; 50
 950:	f0 e0       	ldi	r31, 0x00	; 0
 952:	80 81       	ld	r24, Z
 954:	80 62       	ori	r24, 0x20	; 32
 956:	8c 93       	st	X, r24
 958:	25 c0       	rjmp	.+74     	; 0x9a4 <usb_receive+0x13c>
					}
#endif
				}
#endif
			}
			else if	( data[1] == 8 )	// GET_CONFIGURATION
 95a:	8c 81       	ldd	r24, Y+4	; 0x04
 95c:	9d 81       	ldd	r25, Y+5	; 0x05
 95e:	fc 01       	movw	r30, r24
 960:	31 96       	adiw	r30, 0x01	; 1
 962:	80 81       	ld	r24, Z
 964:	88 30       	cpi	r24, 0x08	; 8
 966:	39 f4       	brne	.+14     	; 0x976 <usb_receive+0x10e>
			{
				data[0] = 1;		// return bConfigurationValue
 968:	ec 81       	ldd	r30, Y+4	; 0x04
 96a:	fd 81       	ldd	r31, Y+5	; 0x05
 96c:	81 e0       	ldi	r24, 0x01	; 1
 96e:	80 83       	st	Z, r24
				len = 1;
 970:	81 e0       	ldi	r24, 0x01	; 1
 972:	8b 83       	std	Y+3, r24	; 0x03
 974:	17 c0       	rjmp	.+46     	; 0x9a4 <usb_receive+0x13c>
			}
			else if	( data[1] == 10 )	// GET_INTERFACE
 976:	8c 81       	ldd	r24, Y+4	; 0x04
 978:	9d 81       	ldd	r25, Y+5	; 0x05
 97a:	fc 01       	movw	r30, r24
 97c:	31 96       	adiw	r30, 0x01	; 1
 97e:	80 81       	ld	r24, Z
 980:	8a 30       	cpi	r24, 0x0A	; 10
 982:	81 f4       	brne	.+32     	; 0x9a4 <usb_receive+0x13c>
			{
				data[0] = 0;
 984:	ec 81       	ldd	r30, Y+4	; 0x04
 986:	fd 81       	ldd	r31, Y+5	; 0x05
 988:	10 82       	st	Z, r1
				len = 1;
 98a:	81 e0       	ldi	r24, 0x01	; 1
 98c:	8b 83       	std	Y+3, r24	; 0x03
 98e:	0a c0       	rjmp	.+20     	; 0x9a4 <usb_receive+0x13c>
			}
		}
		else
		{	// Class or Vendor request
			len = usb_setup( data );
 990:	8c 81       	ldd	r24, Y+4	; 0x04
 992:	9d 81       	ldd	r25, Y+5	; 0x05
 994:	f6 dd       	rcall	.-1044   	; 0x582 <usb_setup>
 996:	8b 83       	std	Y+3, r24	; 0x03
#if	USBTINY_CALLBACK_IN
			if	( len == 0xff )
 998:	8b 81       	ldd	r24, Y+3	; 0x03
 99a:	8f 3f       	cpi	r24, 0xFF	; 255
 99c:	19 f4       	brne	.+6      	; 0x9a4 <usb_receive+0x13c>
			{
				usb_tx_state = TX_STATE_CALLBACK;
 99e:	83 e0       	ldi	r24, 0x03	; 3
 9a0:	80 93 74 00 	sts	0x0074, r24
			}
#endif
		}
		if	( len > limit )
 9a4:	9b 81       	ldd	r25, Y+3	; 0x03
 9a6:	89 81       	ldd	r24, Y+1	; 0x01
 9a8:	89 17       	cp	r24, r25
 9aa:	10 f4       	brcc	.+4      	; 0x9b0 <usb_receive+0x148>
		{
			len = limit;
 9ac:	89 81       	ldd	r24, Y+1	; 0x01
 9ae:	8b 83       	std	Y+3, r24	; 0x03
		}
		usb_tx_data = data;
 9b0:	8c 81       	ldd	r24, Y+4	; 0x04
 9b2:	9d 81       	ldd	r25, Y+5	; 0x05
 9b4:	90 93 77 00 	sts	0x0077, r25
 9b8:	80 93 76 00 	sts	0x0076, r24
 9bc:	07 c0       	rjmp	.+14     	; 0x9cc <usb_receive+0x164>
	}
#if	USBTINY_CALLBACK_OUT
	else if	( rx_len > 0 )
 9be:	8e 81       	ldd	r24, Y+6	; 0x06
 9c0:	88 23       	and	r24, r24
 9c2:	21 f0       	breq	.+8      	; 0x9cc <usb_receive+0x164>
	{	// usb_rx_token == USB_PID_OUT
		usb_out( data, rx_len );
 9c4:	8c 81       	ldd	r24, Y+4	; 0x04
 9c6:	9d 81       	ldd	r25, Y+5	; 0x05
 9c8:	6e 81       	ldd	r22, Y+6	; 0x06
 9ca:	d1 de       	rcall	.-606    	; 0x76e <usb_out>
	}
#endif
	usb_tx_total  = len;
 9cc:	8b 81       	ldd	r24, Y+3	; 0x03
 9ce:	80 93 75 00 	sts	0x0075, r24
	usb_tx_buf[0] = USB_PID_DATA0;	// next data packet will be DATA1
 9d2:	83 ec       	ldi	r24, 0xC3	; 195
 9d4:	80 93 7a 00 	sts	0x007A, r24
}
 9d8:	26 96       	adiw	r28, 0x06	; 6
 9da:	0f b6       	in	r0, 0x3f	; 63
 9dc:	f8 94       	cli
 9de:	de bf       	out	0x3e, r29	; 62
 9e0:	0f be       	out	0x3f, r0	; 63
 9e2:	cd bf       	out	0x3d, r28	; 61
 9e4:	cf 91       	pop	r28
 9e6:	df 91       	pop	r29
 9e8:	08 95       	ret

000009ea <usb_transmit>:

// ----------------------------------------------------------------------
// Load the transmit buffer with the next packet.
// ----------------------------------------------------------------------
static	void	usb_transmit ( void )
{
 9ea:	df 93       	push	r29
 9ec:	cf 93       	push	r28
 9ee:	cd b7       	in	r28, 0x3d	; 61
 9f0:	de b7       	in	r29, 0x3e	; 62
 9f2:	2a 97       	sbiw	r28, 0x0a	; 10
 9f4:	0f b6       	in	r0, 0x3f	; 63
 9f6:	f8 94       	cli
 9f8:	de bf       	out	0x3e, r29	; 62
 9fa:	0f be       	out	0x3f, r0	; 63
 9fc:	cd bf       	out	0x3d, r28	; 61
	byte_t*	src;
	byte_t*	dst;
	byte_t	i;
	byte_t	b;

	usb_tx_buf[0] ^= (USB_PID_DATA0 ^ USB_PID_DATA1);
 9fe:	90 91 7a 00 	lds	r25, 0x007A
 a02:	88 e8       	ldi	r24, 0x88	; 136
 a04:	89 27       	eor	r24, r25
 a06:	80 93 7a 00 	sts	0x007A, r24
	len = usb_tx_total;
 a0a:	80 91 75 00 	lds	r24, 0x0075
 a0e:	8a 87       	std	Y+10, r24	; 0x0a
	if	( len > 8 )
 a10:	8a 85       	ldd	r24, Y+10	; 0x0a
 a12:	89 30       	cpi	r24, 0x09	; 9
 a14:	10 f0       	brcs	.+4      	; 0xa1a <usb_transmit+0x30>
	{
		len = 8;
 a16:	88 e0       	ldi	r24, 0x08	; 8
 a18:	8a 87       	std	Y+10, r24	; 0x0a
	}
	dst = usb_tx_buf + 1;
 a1a:	8b e7       	ldi	r24, 0x7B	; 123
 a1c:	90 e0       	ldi	r25, 0x00	; 0
 a1e:	9f 83       	std	Y+7, r25	; 0x07
 a20:	8e 83       	std	Y+6, r24	; 0x06
	if	( len > 0 )
 a22:	8a 85       	ldd	r24, Y+10	; 0x0a
 a24:	88 23       	and	r24, r24
 a26:	09 f4       	brne	.+2      	; 0xa2a <usb_transmit+0x40>
 a28:	5b c0       	rjmp	.+182    	; 0xae0 <usb_transmit+0xf6>
	{
#if	USBTINY_CALLBACK_IN
		if	( usb_tx_state == TX_STATE_CALLBACK )
 a2a:	80 91 74 00 	lds	r24, 0x0074
 a2e:	83 30       	cpi	r24, 0x03	; 3
 a30:	31 f4       	brne	.+12     	; 0xa3e <usb_transmit+0x54>
		{
			len = usb_in( dst, len );
 a32:	8e 81       	ldd	r24, Y+6	; 0x06
 a34:	9f 81       	ldd	r25, Y+7	; 0x07
 a36:	6a 85       	ldd	r22, Y+10	; 0x0a
 a38:	74 de       	rcall	.-792    	; 0x722 <usb_in>
 a3a:	8a 87       	std	Y+10, r24	; 0x0a
 a3c:	4b c0       	rjmp	.+150    	; 0xad4 <usb_transmit+0xea>
		}
		else
#endif
		{
			src = usb_tx_data;
 a3e:	80 91 76 00 	lds	r24, 0x0076
 a42:	90 91 77 00 	lds	r25, 0x0077
 a46:	99 87       	std	Y+9, r25	; 0x09
 a48:	88 87       	std	Y+8, r24	; 0x08
			if	( usb_tx_state == TX_STATE_RAM )
 a4a:	80 91 74 00 	lds	r24, 0x0074
 a4e:	81 30       	cpi	r24, 0x01	; 1
 a50:	d1 f4       	brne	.+52     	; 0xa86 <usb_transmit+0x9c>
			{
				for	( i = 0; i < len; i++ )
 a52:	1d 82       	std	Y+5, r1	; 0x05
 a54:	13 c0       	rjmp	.+38     	; 0xa7c <usb_transmit+0x92>
				{
					*dst++ = *src++;
 a56:	e8 85       	ldd	r30, Y+8	; 0x08
 a58:	f9 85       	ldd	r31, Y+9	; 0x09
 a5a:	80 81       	ld	r24, Z
 a5c:	ee 81       	ldd	r30, Y+6	; 0x06
 a5e:	ff 81       	ldd	r31, Y+7	; 0x07
 a60:	80 83       	st	Z, r24
 a62:	8e 81       	ldd	r24, Y+6	; 0x06
 a64:	9f 81       	ldd	r25, Y+7	; 0x07
 a66:	01 96       	adiw	r24, 0x01	; 1
 a68:	9f 83       	std	Y+7, r25	; 0x07
 a6a:	8e 83       	std	Y+6, r24	; 0x06
 a6c:	88 85       	ldd	r24, Y+8	; 0x08
 a6e:	99 85       	ldd	r25, Y+9	; 0x09
 a70:	01 96       	adiw	r24, 0x01	; 1
 a72:	99 87       	std	Y+9, r25	; 0x09
 a74:	88 87       	std	Y+8, r24	; 0x08
#endif
		{
			src = usb_tx_data;
			if	( usb_tx_state == TX_STATE_RAM )
			{
				for	( i = 0; i < len; i++ )
 a76:	8d 81       	ldd	r24, Y+5	; 0x05
 a78:	8f 5f       	subi	r24, 0xFF	; 255
 a7a:	8d 83       	std	Y+5, r24	; 0x05
 a7c:	9d 81       	ldd	r25, Y+5	; 0x05
 a7e:	8a 85       	ldd	r24, Y+10	; 0x0a
 a80:	98 17       	cp	r25, r24
 a82:	48 f3       	brcs	.-46     	; 0xa56 <usb_transmit+0x6c>
 a84:	21 c0       	rjmp	.+66     	; 0xac8 <usb_transmit+0xde>
					*dst++ = *src++;
				}
			}
			else	// usb_tx_state == TX_STATE_ROM
			{
				for	( i = 0; i < len; i++ )
 a86:	1d 82       	std	Y+5, r1	; 0x05
 a88:	1b c0       	rjmp	.+54     	; 0xac0 <usb_transmit+0xd6>
				{
					b = pgm_read_byte( src );
 a8a:	88 85       	ldd	r24, Y+8	; 0x08
 a8c:	99 85       	ldd	r25, Y+9	; 0x09
 a8e:	9b 83       	std	Y+3, r25	; 0x03
 a90:	8a 83       	std	Y+2, r24	; 0x02
 a92:	ea 81       	ldd	r30, Y+2	; 0x02
 a94:	fb 81       	ldd	r31, Y+3	; 0x03
 a96:	84 91       	lpm	r24, Z+
 a98:	89 83       	std	Y+1, r24	; 0x01
 a9a:	89 81       	ldd	r24, Y+1	; 0x01
 a9c:	8c 83       	std	Y+4, r24	; 0x04
					src++;
 a9e:	88 85       	ldd	r24, Y+8	; 0x08
 aa0:	99 85       	ldd	r25, Y+9	; 0x09
 aa2:	01 96       	adiw	r24, 0x01	; 1
 aa4:	99 87       	std	Y+9, r25	; 0x09
 aa6:	88 87       	std	Y+8, r24	; 0x08
					*dst++ = b;
 aa8:	ee 81       	ldd	r30, Y+6	; 0x06
 aaa:	ff 81       	ldd	r31, Y+7	; 0x07
 aac:	8c 81       	ldd	r24, Y+4	; 0x04
 aae:	80 83       	st	Z, r24
 ab0:	8e 81       	ldd	r24, Y+6	; 0x06
 ab2:	9f 81       	ldd	r25, Y+7	; 0x07
 ab4:	01 96       	adiw	r24, 0x01	; 1
 ab6:	9f 83       	std	Y+7, r25	; 0x07
 ab8:	8e 83       	std	Y+6, r24	; 0x06
					*dst++ = *src++;
				}
			}
			else	// usb_tx_state == TX_STATE_ROM
			{
				for	( i = 0; i < len; i++ )
 aba:	8d 81       	ldd	r24, Y+5	; 0x05
 abc:	8f 5f       	subi	r24, 0xFF	; 255
 abe:	8d 83       	std	Y+5, r24	; 0x05
 ac0:	9d 81       	ldd	r25, Y+5	; 0x05
 ac2:	8a 85       	ldd	r24, Y+10	; 0x0a
 ac4:	98 17       	cp	r25, r24
 ac6:	08 f3       	brcs	.-62     	; 0xa8a <usb_transmit+0xa0>
					b = pgm_read_byte( src );
					src++;
					*dst++ = b;
				}
			}
			usb_tx_data = src;
 ac8:	88 85       	ldd	r24, Y+8	; 0x08
 aca:	99 85       	ldd	r25, Y+9	; 0x09
 acc:	90 93 77 00 	sts	0x0077, r25
 ad0:	80 93 76 00 	sts	0x0076, r24
		}
		usb_tx_total -= len;
 ad4:	80 91 75 00 	lds	r24, 0x0075
 ad8:	9a 85       	ldd	r25, Y+10	; 0x0a
 ada:	89 1b       	sub	r24, r25
 adc:	80 93 75 00 	sts	0x0075, r24
	}
	crc( usb_tx_buf + 1, len );
 ae0:	8b e7       	ldi	r24, 0x7B	; 123
 ae2:	90 e0       	ldi	r25, 0x00	; 0
 ae4:	6a 85       	ldd	r22, Y+10	; 0x0a
 ae6:	cc da       	rcall	.-2664   	; 0x80 <crc>
	usb_tx_len = len + 3;
 ae8:	8a 85       	ldd	r24, Y+10	; 0x0a
 aea:	8d 5f       	subi	r24, 0xFD	; 253
 aec:	80 93 79 00 	sts	0x0079, r24
	if	( len < 8 )
 af0:	8a 85       	ldd	r24, Y+10	; 0x0a
 af2:	88 30       	cpi	r24, 0x08	; 8
 af4:	10 f4       	brcc	.+4      	; 0xafa <usb_transmit+0x110>
	{	// this is the last packet
		usb_tx_state = TX_STATE_IDLE;
 af6:	10 92 74 00 	sts	0x0074, r1
	}
}
 afa:	2a 96       	adiw	r28, 0x0a	; 10
 afc:	0f b6       	in	r0, 0x3f	; 63
 afe:	f8 94       	cli
 b00:	de bf       	out	0x3e, r29	; 62
 b02:	0f be       	out	0x3f, r0	; 63
 b04:	cd bf       	out	0x3d, r28	; 61
 b06:	cf 91       	pop	r28
 b08:	df 91       	pop	r29
 b0a:	08 95       	ret

00000b0c <usb_init>:

// ----------------------------------------------------------------------
// Initialize the low-level USB driver.
// ----------------------------------------------------------------------
extern	void	usb_init ( void )
{
 b0c:	df 93       	push	r29
 b0e:	cf 93       	push	r28
 b10:	cd b7       	in	r28, 0x3d	; 61
 b12:	de b7       	in	r29, 0x3e	; 62
	USB_INT_CONFIG |= USB_INT_CONFIG_SET;
 b14:	a5 e5       	ldi	r26, 0x55	; 85
 b16:	b0 e0       	ldi	r27, 0x00	; 0
 b18:	e5 e5       	ldi	r30, 0x55	; 85
 b1a:	f0 e0       	ldi	r31, 0x00	; 0
 b1c:	80 81       	ld	r24, Z
 b1e:	83 60       	ori	r24, 0x03	; 3
 b20:	8c 93       	st	X, r24
	USB_INT_ENABLE |= (1 << USB_INT_ENABLE_BIT);
 b22:	ab e5       	ldi	r26, 0x5B	; 91
 b24:	b0 e0       	ldi	r27, 0x00	; 0
 b26:	eb e5       	ldi	r30, 0x5B	; 91
 b28:	f0 e0       	ldi	r31, 0x00	; 0
 b2a:	80 81       	ld	r24, Z
 b2c:	80 64       	ori	r24, 0x40	; 64
 b2e:	8c 93       	st	X, r24
	sei();
 b30:	78 94       	sei
}
 b32:	cf 91       	pop	r28
 b34:	df 91       	pop	r29
 b36:	08 95       	ret

00000b38 <usb_poll>:
// - check for incoming USB packets
// - refill an empty transmit buffer
// - check for USB bus reset
// ----------------------------------------------------------------------
extern	void	usb_poll ( void )
{
 b38:	df 93       	push	r29
 b3a:	cf 93       	push	r28
 b3c:	0f 92       	push	r0
 b3e:	cd b7       	in	r28, 0x3d	; 61
 b40:	de b7       	in	r29, 0x3e	; 62
	byte_t	i;

	// check for incoming USB packets
	if	( usb_rx_len != 0 )
 b42:	80 91 86 00 	lds	r24, 0x0086
 b46:	88 23       	and	r24, r24
 b48:	b1 f0       	breq	.+44     	; 0xb76 <usb_poll+0x3e>
	{
		usb_receive( usb_rx_buf + USB_BUFSIZE - usb_rx_off + 1, usb_rx_len - 3 );
 b4a:	80 91 87 00 	lds	r24, 0x0087
 b4e:	28 2f       	mov	r18, r24
 b50:	30 e0       	ldi	r19, 0x00	; 0
 b52:	8c e0       	ldi	r24, 0x0C	; 12
 b54:	90 e0       	ldi	r25, 0x00	; 0
 b56:	82 1b       	sub	r24, r18
 b58:	93 0b       	sbc	r25, r19
 b5a:	9c 01       	movw	r18, r24
 b5c:	28 57       	subi	r18, 0x78	; 120
 b5e:	3f 4f       	sbci	r19, 0xFF	; 255
 b60:	80 91 86 00 	lds	r24, 0x0086
 b64:	48 2f       	mov	r20, r24
 b66:	43 50       	subi	r20, 0x03	; 3
 b68:	c9 01       	movw	r24, r18
 b6a:	64 2f       	mov	r22, r20
 b6c:	7d de       	rcall	.-774    	; 0x868 <usb_receive>
		usb_tx_len = 0;	// abort pending transmission
 b6e:	10 92 79 00 	sts	0x0079, r1
		usb_rx_len = 0;	// accept next packet
 b72:	10 92 86 00 	sts	0x0086, r1
	}
	// refill an empty transmit buffer, when the transmitter is active
	if	( usb_tx_len == 0 )
 b76:	80 91 79 00 	lds	r24, 0x0079
 b7a:	88 23       	and	r24, r24
 b7c:	51 f4       	brne	.+20     	; 0xb92 <usb_poll+0x5a>
	{
		if	( usb_tx_state != TX_STATE_IDLE )
 b7e:	80 91 74 00 	lds	r24, 0x0074
 b82:	88 23       	and	r24, r24
 b84:	11 f0       	breq	.+4      	; 0xb8a <usb_poll+0x52>
		{
			usb_transmit();
 b86:	31 df       	rcall	.-414    	; 0x9ea <usb_transmit>
 b88:	04 c0       	rjmp	.+8      	; 0xb92 <usb_poll+0x5a>
		}
		else
		{	// change the USB address at the end of a transfer
			usb_address = new_address;
 b8a:	80 91 78 00 	lds	r24, 0x0078
 b8e:	80 93 9e 00 	sts	0x009E, r24
		}
	}
	// check for USB bus reset
	for	( i = 10; i > 0 && ! (USB_IN & USB_MASK_DMINUS); i-- )
 b92:	8a e0       	ldi	r24, 0x0A	; 10
 b94:	89 83       	std	Y+1, r24	; 0x01
 b96:	03 c0       	rjmp	.+6      	; 0xb9e <usb_poll+0x66>
 b98:	89 81       	ldd	r24, Y+1	; 0x01
 b9a:	81 50       	subi	r24, 0x01	; 1
 b9c:	89 83       	std	Y+1, r24	; 0x01
 b9e:	89 81       	ldd	r24, Y+1	; 0x01
 ba0:	88 23       	and	r24, r24
 ba2:	49 f0       	breq	.+18     	; 0xbb6 <usb_poll+0x7e>
 ba4:	e0 e3       	ldi	r30, 0x30	; 48
 ba6:	f0 e0       	ldi	r31, 0x00	; 0
 ba8:	80 81       	ld	r24, Z
 baa:	88 2f       	mov	r24, r24
 bac:	90 e0       	ldi	r25, 0x00	; 0
 bae:	88 70       	andi	r24, 0x08	; 8
 bb0:	90 70       	andi	r25, 0x00	; 0
 bb2:	00 97       	sbiw	r24, 0x00	; 0
 bb4:	89 f3       	breq	.-30     	; 0xb98 <usb_poll+0x60>
	{
	}
	if	( i == 0 )
 bb6:	89 81       	ldd	r24, Y+1	; 0x01
 bb8:	88 23       	and	r24, r24
 bba:	11 f4       	brne	.+4      	; 0xbc0 <usb_poll+0x88>
	{	// SE0 for more than 2.5uS is a reset
		new_address = 0;
 bbc:	10 92 78 00 	sts	0x0078, r1
	}
}
 bc0:	0f 90       	pop	r0
 bc2:	cf 91       	pop	r28
 bc4:	df 91       	pop	r29
 bc6:	08 95       	ret

00000bc8 <_exit>:
 bc8:	f8 94       	cli

00000bca <__stop_program>:
 bca:	ff cf       	rjmp	.-2      	; 0xbca <__stop_program>
