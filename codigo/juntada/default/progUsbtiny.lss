
progUsbtiny.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f02  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000074  00800060  00000f02  00000f96  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000005f  008000d4  008000d4  0000100a  2**0
                  ALLOC
  3 .debug_aranges 000000c0  00000000  00000000  00001010  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000022f  00000000  00000000  000010d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d40  00000000  00000000  000012ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000476  00000000  00000000  0000203f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b91  00000000  00000000  000024b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001f0  00000000  00000000  00003048  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003b8  00000000  00000000  00003238  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	2e c0       	rjmp	.+92     	; 0x5e <__ctors_end>
   2:	49 c0       	rjmp	.+146    	; 0x96 <__vector_1>
   4:	47 c0       	rjmp	.+142    	; 0x94 <__bad_interrupt>
   6:	46 c0       	rjmp	.+140    	; 0x94 <__bad_interrupt>
   8:	45 c0       	rjmp	.+138    	; 0x94 <__bad_interrupt>
   a:	44 c0       	rjmp	.+136    	; 0x94 <__bad_interrupt>
   c:	43 c0       	rjmp	.+134    	; 0x94 <__bad_interrupt>
   e:	42 c0       	rjmp	.+132    	; 0x94 <__bad_interrupt>
  10:	41 c0       	rjmp	.+130    	; 0x94 <__bad_interrupt>
  12:	40 c0       	rjmp	.+128    	; 0x94 <__bad_interrupt>
  14:	3f c0       	rjmp	.+126    	; 0x94 <__bad_interrupt>
  16:	3e c0       	rjmp	.+124    	; 0x94 <__bad_interrupt>
  18:	3d c0       	rjmp	.+122    	; 0x94 <__bad_interrupt>
  1a:	3c c0       	rjmp	.+120    	; 0x94 <__bad_interrupt>
  1c:	3b c0       	rjmp	.+118    	; 0x94 <__bad_interrupt>
  1e:	3a c0       	rjmp	.+116    	; 0x94 <__bad_interrupt>
  20:	39 c0       	rjmp	.+114    	; 0x94 <__bad_interrupt>
  22:	38 c0       	rjmp	.+112    	; 0x94 <__bad_interrupt>
  24:	37 c0       	rjmp	.+110    	; 0x94 <__bad_interrupt>
  26:	36 c0       	rjmp	.+108    	; 0x94 <__bad_interrupt>
  28:	35 c0       	rjmp	.+106    	; 0x94 <__bad_interrupt>

0000002a <descr_device>:
  2a:	12 01 01 01 ff 00 00 08 81 17 9f 0c 04 01 00 00     ................
  3a:	00 01                                               ..

0000003c <descr_config>:
  3c:	09 02 12 00 01 01 00 80 32 09 04 00 00 00 ff 00     ........2.......
	...

0000004e <crc4tab>:
  4e:	00 cd       	rjmp	.-1536   	; 0xfffffa50 <__eeprom_end+0xff7efa50>
  50:	d9 14       	cp	r13, r9
  52:	f1 3c       	cpi	r31, 0xC1	; 193
  54:	28 e5       	ldi	r18, 0x58	; 88
  56:	a1 6c       	ori	r26, 0xC1	; 193
  58:	78 b5       	in	r23, 0x28	; 40
  5a:	50 9d       	mul	r21, r0
  5c:	89 44       	sbci	r24, 0x49	; 73

0000005e <__ctors_end>:
  5e:	11 24       	eor	r1, r1
  60:	1f be       	out	0x3f, r1	; 63
  62:	cf e5       	ldi	r28, 0x5F	; 95
  64:	d1 e0       	ldi	r29, 0x01	; 1
  66:	de bf       	out	0x3e, r29	; 62
  68:	cd bf       	out	0x3d, r28	; 61

0000006a <__do_copy_data>:
  6a:	10 e0       	ldi	r17, 0x00	; 0
  6c:	a0 e6       	ldi	r26, 0x60	; 96
  6e:	b0 e0       	ldi	r27, 0x00	; 0
  70:	e2 e0       	ldi	r30, 0x02	; 2
  72:	ff e0       	ldi	r31, 0x0F	; 15
  74:	02 c0       	rjmp	.+4      	; 0x7a <.do_copy_data_start>

00000076 <.do_copy_data_loop>:
  76:	05 90       	lpm	r0, Z+
  78:	0d 92       	st	X+, r0

0000007a <.do_copy_data_start>:
  7a:	a4 3d       	cpi	r26, 0xD4	; 212
  7c:	b1 07       	cpc	r27, r17
  7e:	d9 f7       	brne	.-10     	; 0x76 <.do_copy_data_loop>

00000080 <__do_clear_bss>:
  80:	11 e0       	ldi	r17, 0x01	; 1
  82:	a4 ed       	ldi	r26, 0xD4	; 212
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	01 c0       	rjmp	.+2      	; 0x8a <.do_clear_bss_start>

00000088 <.do_clear_bss_loop>:
  88:	1d 92       	st	X+, r1

0000008a <.do_clear_bss_start>:
  8a:	a3 33       	cpi	r26, 0x33	; 51
  8c:	b1 07       	cpc	r27, r17
  8e:	e1 f7       	brne	.-8      	; 0x88 <.do_clear_bss_loop>
  90:	7e d2       	rcall	.+1276   	; 0x58e <main>
  92:	35 c7       	rjmp	.+3690   	; 0xefe <_exit>

00000094 <__bad_interrupt>:
  94:	b5 cf       	rjmp	.-150    	; 0x0 <__vectors>

00000096 <__vector_1>:
; This handler must be reached no later than 34 cycles after D+ goes high
; for the first time.
; ----------------------------------------------------------------------
USB_INT_VECTOR:
	; save registers
	push	count
  96:	0f 93       	push	r16
	push	usbmask
  98:	1f 93       	push	r17
	push	odd
  9a:	2f 93       	push	r18
	push	YH
  9c:	df 93       	push	r29
	push	YL
  9e:	cf 93       	push	r28
	in	count, SREG
  a0:	0f b7       	in	r16, 0x3f	; 63
	push	count
  a2:	0f 93       	push	r16

000000a4 <sync>:
; Synchronize to the pattern 10101011 on D+. This code must be reached
; no later than 47 cycles after D+ goes high for the first time.
; ----------------------------------------------------------------------
sync:
	; wait until D+ == 0
	sbic	USB_IN, USBTINY_DPLUS
  a4:	82 99       	sbic	0x10, 2	; 16
	rjmp	sync			; jump if D+ == 1
  a6:	fe cf       	rjmp	.-4      	; 0xa4 <sync>

000000a8 <resync>:
resync:
	; sync on 0-->1 transition on D+ with a 2 cycle resolution
	sbic	USB_IN, USBTINY_DPLUS
  a8:	82 99       	sbic	0x10, 2	; 16
	rjmp	sync6			; jump if D+ == 1
  aa:	0b c0       	rjmp	.+22     	; 0xc2 <sync6>
	sbic	USB_IN, USBTINY_DPLUS
  ac:	82 99       	sbic	0x10, 2	; 16
	rjmp	sync6			; jump if D+ == 1
  ae:	09 c0       	rjmp	.+18     	; 0xc2 <sync6>
	sbic	USB_IN, USBTINY_DPLUS
  b0:	82 99       	sbic	0x10, 2	; 16
	rjmp	sync6			; jump if D+ == 1
  b2:	07 c0       	rjmp	.+14     	; 0xc2 <sync6>
	sbic	USB_IN, USBTINY_DPLUS
  b4:	82 99       	sbic	0x10, 2	; 16
	rjmp	sync6			; jump if D+ == 1
  b6:	05 c0       	rjmp	.+10     	; 0xc2 <sync6>
	sbic	USB_IN, USBTINY_DPLUS
  b8:	82 99       	sbic	0x10, 2	; 16
	rjmp	sync6			; jump if D+ == 1
  ba:	03 c0       	rjmp	.+6      	; 0xc2 <sync6>
	ldi	count, 1<<USB_INT_PENDING_BIT
  bc:	00 e4       	ldi	r16, 0x40	; 64
	out	USB_INT_PENDING, count
  be:	0a bf       	out	0x3a, r16	; 58
	rjmp	return			; ==> false start, bail out
  c0:	a8 c0       	rjmp	.+336    	; 0x212 <return>

000000c2 <sync6>:

sync6:
	; we are now between -1 and +1 cycle from the center of the bit
	; following the 0-->1 transition
	lds	YL, usb_rx_off
  c2:	c0 91 1b 01 	lds	r28, 0x011B
	clr	YH
  c6:	dd 27       	eor	r29, r29
	subi	YL, lo8(-(usb_rx_buf))	; Y = & usb_rx_buf[usb_rx_off]
  c8:	c4 5e       	subi	r28, 0xE4	; 228
	sbci	YH, hi8(-(usb_rx_buf))
  ca:	de 4f       	sbci	r29, 0xFE	; 254
	ldi	count, USB_BUFSIZE	; limit on number of bytes to receive
  cc:	0b e0       	ldi	r16, 0x0B	; 11
	ldi	usbmask, USB_MASK	; why is there no eori instruction?
  ce:	1c e0       	ldi	r17, 0x0C	; 12
	ldi	odd, USB_MASK_DPLUS
  d0:	24 e0       	ldi	r18, 0x04	; 4

000000d2 <sync7>:

sync7:
	; the last sync bit should also be 1
	sbis	USB_IN, USBTINY_DPLUS	; bit 7 of sync byte?
  d2:	82 9b       	sbis	0x10, 2	; 16
	rjmp	resync			; no, wait for next transition
  d4:	e9 cf       	rjmp	.-46     	; 0xa8 <resync>
	push	byte
  d6:	3f 93       	push	r19
	push	fixup
  d8:	4f 93       	push	r20
	push	even
  da:	6f 93       	push	r22

; ----------------------------------------------------------------------
; receiver loop
; ----------------------------------------------------------------------
	in	even, USB_IN		; sample bit 0
  dc:	60 b3       	in	r22, 0x10	; 16
	ldi	byte, 0x80		; load sync byte for correct unstuffing
  de:	30 e8       	ldi	r19, 0x80	; 128
	rjmp	rxentry			; 2 cycles
  e0:	03 c0       	rjmp	.+6      	; 0xe8 <rxentry>

000000e2 <rxloop>:

rxloop:
	in	even, USB_IN		; sample bit 0
  e2:	60 b3       	in	r22, 0x10	; 16
	or	fixup, byte
  e4:	43 2b       	or	r20, r19
	st	Y+, fixup		; 2 cycles
  e6:	49 93       	st	Y+, r20

000000e8 <rxentry>:
rxentry:
	clr	fixup
  e8:	44 27       	eor	r20, r20
	andi	even, USB_MASK
  ea:	6c 70       	andi	r22, 0x0C	; 12
	eor	odd, even
  ec:	26 27       	eor	r18, r22
	subi	odd, 1
  ee:	21 50       	subi	r18, 0x01	; 1
	in	odd, USB_IN		; sample bit 1
  f0:	20 b3       	in	r18, 0x10	; 16
	andi	odd, USB_MASK
  f2:	2c 70       	andi	r18, 0x0C	; 12
	breq	eop			; ==> EOP detected
  f4:	a9 f1       	breq	.+106    	; 0x160 <eop>
	ror	byte
  f6:	37 95       	ror	r19
	cpi	byte, 0xfc
  f8:	3c 3f       	cpi	r19, 0xFC	; 252
	brcc	skip0
  fa:	a0 f5       	brcc	.+104    	; 0x164 <skip0>

000000fc <skipped0>:
skipped0:
	eor	even, odd
  fc:	62 27       	eor	r22, r18
	subi	even, 1
  fe:	61 50       	subi	r22, 0x01	; 1
	in	even, USB_IN		; sample bit 2
 100:	60 b3       	in	r22, 0x10	; 16
	andi	even, USB_MASK
 102:	6c 70       	andi	r22, 0x0C	; 12
	ror	byte
 104:	37 95       	ror	r19
	cpi	byte, 0xfc
 106:	3c 3f       	cpi	r19, 0xFC	; 252
	brcc	skip1
 108:	98 f5       	brcc	.+102    	; 0x170 <skip1>

0000010a <skipped1>:
skipped1:
	eor	odd, even
 10a:	26 27       	eor	r18, r22
	subi	odd, 1
 10c:	21 50       	subi	r18, 0x01	; 1
	ror	byte
 10e:	37 95       	ror	r19
	in	odd, USB_IN		; sample bit 3
 110:	20 b3       	in	r18, 0x10	; 16
	andi	odd, USB_MASK
 112:	2c 70       	andi	r18, 0x0C	; 12
	cpi	byte, 0xfc
 114:	3c 3f       	cpi	r19, 0xFC	; 252
	brcc	skip2
 116:	90 f5       	brcc	.+100    	; 0x17c <skip2>
	eor	even, odd
 118:	62 27       	eor	r22, r18
	subi	even, 1
 11a:	61 50       	subi	r22, 0x01	; 1
	ror	byte
 11c:	37 95       	ror	r19

0000011e <skipped2>:
skipped2:
	cpi	byte, 0xfc
 11e:	3c 3f       	cpi	r19, 0xFC	; 252
	in	even, USB_IN		; sample bit 4
 120:	60 b3       	in	r22, 0x10	; 16
	andi	even, USB_MASK
 122:	6c 70       	andi	r22, 0x0C	; 12
	brcc	skip3
 124:	a0 f5       	brcc	.+104    	; 0x18e <skip3>
	eor	odd, even
 126:	26 27       	eor	r18, r22
	subi	odd, 1
 128:	21 50       	subi	r18, 0x01	; 1
	ror	byte
 12a:	37 95       	ror	r19

0000012c <skipped4>:
skipped4:
	cpi	byte, 0xfc
 12c:	3c 3f       	cpi	r19, 0xFC	; 252

0000012e <skipped3>:
skipped3:
	brcc	skip4
 12e:	c8 f5       	brcc	.+114    	; 0x1a2 <skip4>
	in	odd, USB_IN		; sample bit 5
 130:	20 b3       	in	r18, 0x10	; 16
	andi	odd, USB_MASK
 132:	2c 70       	andi	r18, 0x0C	; 12
	eor	even, odd
 134:	62 27       	eor	r22, r18
	subi	even, 1
 136:	61 50       	subi	r22, 0x01	; 1
	ror	byte
 138:	37 95       	ror	r19

0000013a <skipped5>:
skipped5:
	cpi	byte, 0xfc
 13a:	3c 3f       	cpi	r19, 0xFC	; 252
	brcc	skip5
 13c:	b0 f5       	brcc	.+108    	; 0x1aa <skip5>
	dec	count
 13e:	0a 95       	dec	r16
	in	even, USB_IN		; sample bit 6
 140:	60 b3       	in	r22, 0x10	; 16
	brmi	overflow		; ==> overflow
 142:	7a f0       	brmi	.+30     	; 0x162 <overflow>
	andi	even, USB_MASK
 144:	6c 70       	andi	r22, 0x0C	; 12
	eor	odd, even
 146:	26 27       	eor	r18, r22
	subi	odd, 1
 148:	21 50       	subi	r18, 0x01	; 1
	ror	byte
 14a:	37 95       	ror	r19

0000014c <skipped6>:
skipped6:
	cpi	byte, 0xfc
 14c:	3c 3f       	cpi	r19, 0xFC	; 252
	brcc	skip6
 14e:	88 f5       	brcc	.+98     	; 0x1b2 <skip6>
	in	odd, USB_IN		; sample bit 7
 150:	20 b3       	in	r18, 0x10	; 16
	andi	odd, USB_MASK
 152:	2c 70       	andi	r18, 0x0C	; 12
	eor	even, odd
 154:	62 27       	eor	r22, r18
	subi	even, 1
 156:	61 50       	subi	r22, 0x01	; 1
	ror	byte
 158:	37 95       	ror	r19
	cpi	byte, 0xfc
 15a:	3c 3f       	cpi	r19, 0xFC	; 252
	brcs	rxloop			; 2 cycles
 15c:	10 f2       	brcs	.-124    	; 0xe2 <rxloop>
	rjmp	skip7
 15e:	2d c0       	rjmp	.+90     	; 0x1ba <skip7>

00000160 <eop>:

eop:
	rjmp	eop2
 160:	31 c0       	rjmp	.+98     	; 0x1c4 <eop2>

00000162 <overflow>:
overflow:
	rjmp	ignore
 162:	48 c0       	rjmp	.+144    	; 0x1f4 <ignore>

00000164 <skip0>:

; ----------------------------------------------------------------------
; out-of-line code to skip stuffing bits
; ----------------------------------------------------------------------
skip0:					; 1+6 cycles
	eor	even, usbmask
 164:	61 27       	eor	r22, r17
	in	odd, USB_IN		; resample bit 1
 166:	20 b3       	in	r18, 0x10	; 16
	andi	odd, USB_MASK
 168:	2c 70       	andi	r18, 0x0C	; 12
	cbr	byte, (1<<7)
 16a:	3f 77       	andi	r19, 0x7F	; 127
	sbr	fixup, (1<<0)
 16c:	41 60       	ori	r20, 0x01	; 1
	rjmp	skipped0
 16e:	c6 cf       	rjmp	.-116    	; 0xfc <skipped0>

00000170 <skip1>:

skip1:					; 2+5 cycles
	cbr	byte, (1<<7)
 170:	3f 77       	andi	r19, 0x7F	; 127
	sbr	fixup, (1<<1)
 172:	42 60       	ori	r20, 0x02	; 2
	in	even, USB_IN		; resample bit 2
 174:	60 b3       	in	r22, 0x10	; 16
	andi	even, USB_MASK
 176:	6c 70       	andi	r22, 0x0C	; 12
	eor	odd, usbmask
 178:	21 27       	eor	r18, r17
	rjmp	skipped1
 17a:	c7 cf       	rjmp	.-114    	; 0x10a <skipped1>

0000017c <skip2>:

skip2:					; 3+7 cycles
	cbr	byte, (1<<7)
 17c:	3f 77       	andi	r19, 0x7F	; 127
	sbr	fixup, (1<<2)
 17e:	44 60       	ori	r20, 0x04	; 4
	eor	even, usbmask
 180:	61 27       	eor	r22, r17
	in	odd, USB_IN		; resample bit 3
 182:	20 b3       	in	r18, 0x10	; 16
	andi	odd, USB_MASK
 184:	2c 70       	andi	r18, 0x0C	; 12
	eor	even, odd
 186:	62 27       	eor	r22, r18
	subi	even, 1
 188:	61 50       	subi	r22, 0x01	; 1
	ror	byte
 18a:	37 95       	ror	r19
	rjmp	skipped2
 18c:	c8 cf       	rjmp	.-112    	; 0x11e <skipped2>

0000018e <skip3>:

skip3:					; 4+7 cycles
	cbr	byte, (1<<7)
 18e:	3f 77       	andi	r19, 0x7F	; 127
	sbr	fixup, (1<<3)
 190:	48 60       	ori	r20, 0x08	; 8
	eor	odd, usbmask
 192:	21 27       	eor	r18, r17
	ori	byte, 1
 194:	31 60       	ori	r19, 0x01	; 1
	in	even, USB_IN		; resample bit 4
 196:	60 b3       	in	r22, 0x10	; 16
	andi	even, USB_MASK
 198:	6c 70       	andi	r22, 0x0C	; 12
	eor	odd, even
 19a:	26 27       	eor	r18, r22
	subi	odd, 1
 19c:	21 50       	subi	r18, 0x01	; 1
	ror	byte
 19e:	37 95       	ror	r19
	rjmp	skipped3
 1a0:	c6 cf       	rjmp	.-116    	; 0x12e <skipped3>

000001a2 <skip4>:

skip4:					; 5 cycles
	cbr	byte, (1<<7)
 1a2:	3f 77       	andi	r19, 0x7F	; 127
	sbr	fixup, (1<<4)
 1a4:	40 61       	ori	r20, 0x10	; 16
	eor	even, usbmask
 1a6:	61 27       	eor	r22, r17
	rjmp	skipped4
 1a8:	c1 cf       	rjmp	.-126    	; 0x12c <skipped4>

000001aa <skip5>:

skip5:					; 5 cycles
	cbr	byte, (1<<7)
 1aa:	3f 77       	andi	r19, 0x7F	; 127
	sbr	fixup, (1<<5)
 1ac:	40 62       	ori	r20, 0x20	; 32
	eor	odd, usbmask
 1ae:	21 27       	eor	r18, r17
	rjmp	skipped5
 1b0:	c4 cf       	rjmp	.-120    	; 0x13a <skipped5>

000001b2 <skip6>:

skip6:					; 5 cycles
	cbr	byte, (1<<7)
 1b2:	3f 77       	andi	r19, 0x7F	; 127
	sbr	fixup, (1<<6)
 1b4:	40 64       	ori	r20, 0x40	; 64
	eor	even, usbmask
 1b6:	61 27       	eor	r22, r17
	rjmp	skipped6
 1b8:	c9 cf       	rjmp	.-110    	; 0x14c <skipped6>

000001ba <skip7>:

skip7:					; 7 cycles
	cbr	byte, (1<<7)
 1ba:	3f 77       	andi	r19, 0x7F	; 127
	sbr	fixup, (1<<7)
 1bc:	40 68       	ori	r20, 0x80	; 128
	eor	odd, usbmask
 1be:	21 27       	eor	r18, r17
	nop2
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <skip7+0x8>
	rjmp	rxloop
 1c2:	8f cf       	rjmp	.-226    	; 0xe2 <rxloop>

000001c4 <eop2>:
; ----------------------------------------------------------------------
; end-of-packet detected (worst-case: 3 cycles after end of SE0)
; ----------------------------------------------------------------------
eop2:
	; clear pending interrupt (SE0+3)
	ldi	byte, 1<<USB_INT_PENDING_BIT
 1c4:	30 e4       	ldi	r19, 0x40	; 64
	out	USB_INT_PENDING, byte	; clear pending bit at end of packet
 1c6:	3a bf       	out	0x3a, r19	; 58
	; ignore packets shorter than 3 bytes
	subi	count, USB_BUFSIZE
 1c8:	0b 50       	subi	r16, 0x0B	; 11
	neg	count			; count = packet length
 1ca:	01 95       	neg	r16
	cpi	count, 3
 1cc:	03 30       	cpi	r16, 0x03	; 3
	brlo	ignore
 1ce:	90 f0       	brcs	.+36     	; 0x1f4 <ignore>
	; get PID
	sub	YL, count
 1d0:	c0 1b       	sub	r28, r16
	ld	pid, Y
 1d2:	28 81       	ld	r18, Y
	; check for DATA0/DATA1 first, as this is the critical path (SE0+12)
	cpi	pid, USB_PID_DATA0
 1d4:	23 3c       	cpi	r18, 0xC3	; 195
	breq	is_data			; handle DATA0 packet
 1d6:	91 f1       	breq	.+100    	; 0x23c <is_data>
	cpi	pid, USB_PID_DATA1
 1d8:	2b 34       	cpi	r18, 0x4B	; 75
	breq	is_data			; handle DATA1 packet
 1da:	81 f1       	breq	.+96     	; 0x23c <is_data>
	; check ADDR (SE0+16)
	ldd	addr, Y+1
 1dc:	19 81       	ldd	r17, Y+1	; 0x01
	andi	addr, 0x7f
 1de:	1f 77       	andi	r17, 0x7F	; 127
	lds	tmp, usb_address
 1e0:	40 91 32 01 	lds	r20, 0x0132
	cp	addr, tmp		; is this packet for me?
 1e4:	14 17       	cp	r17, r20
	brne	ignore			; no, ignore
 1e6:	31 f4       	brne	.+12     	; 0x1f4 <ignore>
	; check for other PIDs (SE0+23)
	cpi	pid, USB_PID_IN
 1e8:	29 36       	cpi	r18, 0x69	; 105
	breq	is_in			; handle IN packet
 1ea:	d9 f0       	breq	.+54     	; 0x222 <is_in>
	cpi	pid, USB_PID_SETUP
 1ec:	2d 32       	cpi	r18, 0x2D	; 45
	breq	is_setup_out		; handle SETUP packet
 1ee:	49 f0       	breq	.+18     	; 0x202 <is_setup_out>
	cpi	pid, USB_PID_OUT
 1f0:	21 3e       	cpi	r18, 0xE1	; 225
	breq	is_setup_out		; handle OUT packet
 1f2:	39 f0       	breq	.+14     	; 0x202 <is_setup_out>

000001f4 <ignore>:

; ----------------------------------------------------------------------
; exit point for ignored packets
; ----------------------------------------------------------------------
ignore:
	clr	tmp
 1f4:	44 27       	eor	r20, r20
	sts	token_pid, tmp
 1f6:	40 93 d4 00 	sts	0x00D4, r20
	pop	even
 1fa:	6f 91       	pop	r22
	pop	fixup
 1fc:	4f 91       	pop	r20
	pop	byte
 1fe:	3f 91       	pop	r19
	rjmp	return
 200:	08 c0       	rjmp	.+16     	; 0x212 <return>

00000202 <is_setup_out>:

; ----------------------------------------------------------------------
; Handle SETUP/OUT (SE0+30)
; ----------------------------------------------------------------------
is_setup_out:
	sts	token_pid, pid		; save PID of token packet
 202:	20 93 d4 00 	sts	0x00D4, r18
	pop	even
 206:	6f 91       	pop	r22
	pop	fixup
 208:	4f 91       	pop	r20
	pop	byte
 20a:	3f 91       	pop	r19
	in	count, USB_INT_PENDING	; next packet already started?
 20c:	0a b7       	in	r16, 0x3a	; 58
	sbrc	count, USB_INT_PENDING_BIT
 20e:	06 fd       	sbrc	r16, 6
	rjmp	sync			; yes, get it right away (SE0+42)
 210:	49 cf       	rjmp	.-366    	; 0xa4 <sync>

00000212 <return>:

; ----------------------------------------------------------------------
; restore registers and return from interrupt
; ----------------------------------------------------------------------
return:
	pop	count
 212:	0f 91       	pop	r16
	out	SREG, count
 214:	0f bf       	out	0x3f, r16	; 63
	pop	YL
 216:	cf 91       	pop	r28
	pop	YH
 218:	df 91       	pop	r29
	pop	odd
 21a:	2f 91       	pop	r18
	pop	usbmask
 21c:	1f 91       	pop	r17
	pop	count
 21e:	0f 91       	pop	r16
	reti
 220:	18 95       	reti

00000222 <is_in>:

; ----------------------------------------------------------------------
; Handle IN (SE0+26)
; ----------------------------------------------------------------------
is_in:
	lds	count, usb_tx_len
 222:	00 91 0d 01 	lds	r16, 0x010D
	tst	count			; data ready?
 226:	00 23       	and	r16, r16
	breq	nak			; no, reply with NAK
 228:	f1 f0       	breq	.+60     	; 0x266 <nak>
	lds	tmp, usb_rx_len
 22a:	40 91 1a 01 	lds	r20, 0x011A
	tst	tmp			; unprocessed input packet?
 22e:	44 23       	and	r20, r20
	brne	nak			; yes, don't send old data for new packet
 230:	d1 f4       	brne	.+52     	; 0x266 <nak>
	sts	usb_tx_len, tmp		; buffer is available again (after reti)
 232:	40 93 0d 01 	sts	0x010D, r20
	ldi	YL, lo8(usb_tx_buf)
 236:	ce e0       	ldi	r28, 0x0E	; 14
	ldi	YH, hi8(usb_tx_buf)
 238:	d1 e0       	ldi	r29, 0x01	; 1
	rjmp	send_packet		; SE0+40, SE0 --> SOP <= 51
 23a:	18 c0       	rjmp	.+48     	; 0x26c <send_packet>

0000023c <is_data>:

; ----------------------------------------------------------------------
; Handle DATA0/DATA1 (SE0+17)
; ----------------------------------------------------------------------
is_data:
	lds	pid, token_pid
 23c:	20 91 d4 00 	lds	r18, 0x00D4
	tst	pid			; data following our SETUP/OUT
 240:	22 23       	and	r18, r18
	breq	ignore			; no, ignore
 242:	c1 f2       	breq	.-80     	; 0x1f4 <ignore>
	lds	tmp, usb_rx_len
 244:	40 91 1a 01 	lds	r20, 0x011A
	tst	tmp			; buffer free?
 248:	44 23       	and	r20, r20
	brne	nak			; no, reply with NAK
 24a:	69 f4       	brne	.+26     	; 0x266 <nak>
	sts	usb_rx_len, count	; pass buffer length
 24c:	00 93 1a 01 	sts	0x011A, r16
	sts	usb_rx_token, pid	; pass PID of token (SETUP or OUT)
 250:	20 93 19 01 	sts	0x0119, r18
	lds	count, usb_rx_off	; switch to other input buffer
 254:	00 91 1b 01 	lds	r16, 0x011B
	ldi	tmp, USB_BUFSIZE
 258:	4b e0       	ldi	r20, 0x0B	; 11
	sub	tmp, count
 25a:	40 1b       	sub	r20, r16
	sts	usb_rx_off, tmp
 25c:	40 93 1b 01 	sts	0x011B, r20

00000260 <ack>:

; ----------------------------------------------------------------------
; send ACK packet (SE0+35)
; ----------------------------------------------------------------------
ack:
	ldi	YL, lo8(tx_ack)
 260:	c0 e6       	ldi	r28, 0x60	; 96
	ldi	YH, hi8(tx_ack)
 262:	d0 e0       	ldi	r29, 0x00	; 0
	rjmp	send_token
 264:	02 c0       	rjmp	.+4      	; 0x26a <send_token>

00000266 <nak>:

; ----------------------------------------------------------------------
; send NAK packet (SE0+36)
; ----------------------------------------------------------------------
nak:
	ldi	YL, lo8(tx_nak)
 266:	c1 e6       	ldi	r28, 0x61	; 97
	ldi	YH, hi8(tx_nak)
 268:	d0 e0       	ldi	r29, 0x00	; 0

0000026a <send_token>:
send_token:
	ldi	count, 1		; SE0+40, SE0 --> SOP <= 51
 26a:	01 e0       	ldi	r16, 0x01	; 1

0000026c <send_packet>:

; ----------------------------------------------------------------------
; acquire the bus and send a packet (11 cycles to SOP)
; ----------------------------------------------------------------------
send_packet:
	in	output, USB_OUT
 26c:	22 b3       	in	r18, 0x12	; 18
	cbr	output, USB_MASK
 26e:	23 7f       	andi	r18, 0xF3	; 243
	ori	output, USB_MASK_DMINUS
 270:	28 60       	ori	r18, 0x08	; 8
	in	usbmask, USB_DDR
 272:	11 b3       	in	r17, 0x11	; 17
	ori	usbmask, USB_MASK
 274:	1c 60       	ori	r17, 0x0C	; 12
	out	USB_OUT, output		; idle state
 276:	22 bb       	out	0x12, r18	; 18
	out	USB_DDR, usbmask	; acquire bus
 278:	11 bb       	out	0x11, r17	; 17
	ldi	usbmask, USB_MASK
 27a:	1c e0       	ldi	r17, 0x0C	; 12
	ldi	byte, 0x80		; start with sync byte
 27c:	30 e8       	ldi	r19, 0x80	; 128

0000027e <txloop>:

; ----------------------------------------------------------------------
; transmitter loop
; ----------------------------------------------------------------------
txloop:
	sbrs	byte, 0
 27e:	30 ff       	sbrs	r19, 0
	eor	output, usbmask
 280:	21 27       	eor	r18, r17
	out	USB_OUT, output		; output bit 0
 282:	22 bb       	out	0x12, r18	; 18
	ror	byte
 284:	37 95       	ror	r19
	ror	done
 286:	47 95       	ror	r20

00000288 <stuffed0>:
stuffed0:
	cpi	done, 0xfc
 288:	4c 3f       	cpi	r20, 0xFC	; 252
	brcc	stuff0
 28a:	c0 f5       	brcc	.+112    	; 0x2fc <stuff0>
	sbrs	byte, 0
 28c:	30 ff       	sbrs	r19, 0
	eor	output, usbmask
 28e:	21 27       	eor	r18, r17
	ror	byte
 290:	37 95       	ror	r19

00000292 <stuffed1>:
stuffed1:
	out	USB_OUT, output		; output bit 1
 292:	22 bb       	out	0x12, r18	; 18
	ror	done
 294:	47 95       	ror	r20
	cpi	done, 0xfc
 296:	4c 3f       	cpi	r20, 0xFC	; 252
	brcc	stuff1
 298:	a8 f5       	brcc	.+106    	; 0x304 <stuff1>
	sbrs	byte, 0
 29a:	30 ff       	sbrs	r19, 0
	eor	output, usbmask
 29c:	21 27       	eor	r18, r17
	ror	byte
 29e:	37 95       	ror	r19
	...

000002a2 <stuffed2>:
	nop
stuffed2:
	out	USB_OUT, output		; output bit 2
 2a2:	22 bb       	out	0x12, r18	; 18
	ror	done
 2a4:	47 95       	ror	r20
	cpi	done, 0xfc
 2a6:	4c 3f       	cpi	r20, 0xFC	; 252
	brcc	stuff2
 2a8:	78 f5       	brcc	.+94     	; 0x308 <stuff2>
	sbrs	byte, 0
 2aa:	30 ff       	sbrs	r19, 0
	eor	output, usbmask
 2ac:	21 27       	eor	r18, r17
	ror	byte
 2ae:	37 95       	ror	r19
	...

000002b2 <stuffed3>:
	nop
stuffed3:
	out	USB_OUT, output		; output bit 3
 2b2:	22 bb       	out	0x12, r18	; 18
	ror	done
 2b4:	47 95       	ror	r20
	cpi	done, 0xfc
 2b6:	4c 3f       	cpi	r20, 0xFC	; 252
	brcc	stuff3
 2b8:	48 f5       	brcc	.+82     	; 0x30c <stuff3>
	sbrs	byte, 0
 2ba:	30 ff       	sbrs	r19, 0
	eor	output, usbmask
 2bc:	21 27       	eor	r18, r17
	ld	next, Y+		; 2 cycles
 2be:	69 91       	ld	r22, Y+
	out	USB_OUT, output		; output bit 4
 2c0:	22 bb       	out	0x12, r18	; 18
	ror	byte
 2c2:	37 95       	ror	r19
	ror	done
 2c4:	47 95       	ror	r20

000002c6 <stuffed4>:
stuffed4:
	cpi	done, 0xfc
 2c6:	4c 3f       	cpi	r20, 0xFC	; 252
	brcc	stuff4
 2c8:	18 f5       	brcc	.+70     	; 0x310 <stuff4>
	sbrs	byte, 0
 2ca:	30 ff       	sbrs	r19, 0
	eor	output, usbmask
 2cc:	21 27       	eor	r18, r17
	ror	byte
 2ce:	37 95       	ror	r19

000002d0 <stuffed5>:
stuffed5:
	out	USB_OUT, output		; output bit 5
 2d0:	22 bb       	out	0x12, r18	; 18
	ror	done
 2d2:	47 95       	ror	r20
	cpi	done, 0xfc
 2d4:	4c 3f       	cpi	r20, 0xFC	; 252
	brcc	stuff5
 2d6:	00 f5       	brcc	.+64     	; 0x318 <stuff5>
	sbrs	byte, 0
 2d8:	30 ff       	sbrs	r19, 0
	eor	output, usbmask
 2da:	21 27       	eor	r18, r17
	ror	byte
 2dc:	37 95       	ror	r19

000002de <stuffed6>:
stuffed6:
	ror	done
 2de:	47 95       	ror	r20
	out	USB_OUT, output		; output bit 6
 2e0:	22 bb       	out	0x12, r18	; 18
	cpi	done, 0xfc
 2e2:	4c 3f       	cpi	r20, 0xFC	; 252
	brcc	stuff6
 2e4:	d8 f4       	brcc	.+54     	; 0x31c <stuff6>
	sbrs	byte, 0
 2e6:	30 ff       	sbrs	r19, 0
	eor	output, usbmask
 2e8:	21 27       	eor	r18, r17
	ror	byte
 2ea:	37 95       	ror	r19
	mov	byte, next
 2ec:	36 2f       	mov	r19, r22

000002ee <stuffed7>:
stuffed7:
	ror	done
 2ee:	47 95       	ror	r20
	out	USB_OUT, output		; output bit 7
 2f0:	22 bb       	out	0x12, r18	; 18
	cpi	done, 0xfc
 2f2:	4c 3f       	cpi	r20, 0xFC	; 252
	brcc	stuff7
 2f4:	a8 f4       	brcc	.+42     	; 0x320 <stuff7>
	dec	count
 2f6:	0a 95       	dec	r16
	brpl	txloop			; 2 cycles
 2f8:	12 f6       	brpl	.-124    	; 0x27e <txloop>

	rjmp	gen_eop
 2fa:	14 c0       	rjmp	.+40     	; 0x324 <gen_eop>

000002fc <stuff0>:

; ----------------------------------------------------------------------
; out-of-line code to insert stuffing bits
; ----------------------------------------------------------------------
stuff0:					; 2+3
	eor	output, usbmask
 2fc:	21 27       	eor	r18, r17
	clr	done
 2fe:	44 27       	eor	r20, r20
	out	USB_OUT, output
 300:	22 bb       	out	0x12, r18	; 18
	rjmp	stuffed0
 302:	c2 cf       	rjmp	.-124    	; 0x288 <stuffed0>

00000304 <stuff1>:

stuff1:					; 3
	eor	output, usbmask
 304:	21 27       	eor	r18, r17
	rjmp	stuffed1
 306:	c5 cf       	rjmp	.-118    	; 0x292 <stuffed1>

00000308 <stuff2>:

stuff2:					; 3
	eor	output, usbmask
 308:	21 27       	eor	r18, r17
	rjmp	stuffed2
 30a:	cb cf       	rjmp	.-106    	; 0x2a2 <stuffed2>

0000030c <stuff3>:

stuff3:					; 3
	eor	output, usbmask
 30c:	21 27       	eor	r18, r17
	rjmp	stuffed3
 30e:	d1 cf       	rjmp	.-94     	; 0x2b2 <stuffed3>

00000310 <stuff4>:

stuff4:					; 2+3
	eor	output, usbmask
 310:	21 27       	eor	r18, r17
	clr	done
 312:	44 27       	eor	r20, r20
	out	USB_OUT, output
 314:	22 bb       	out	0x12, r18	; 18
	rjmp	stuffed4
 316:	d7 cf       	rjmp	.-82     	; 0x2c6 <stuffed4>

00000318 <stuff5>:

stuff5:					; 3
	eor	output, usbmask
 318:	21 27       	eor	r18, r17
	rjmp	stuffed5
 31a:	da cf       	rjmp	.-76     	; 0x2d0 <stuffed5>

0000031c <stuff6>:

stuff6:					; 3
	eor	output, usbmask
 31c:	21 27       	eor	r18, r17
	rjmp	stuffed6
 31e:	df cf       	rjmp	.-66     	; 0x2de <stuffed6>

00000320 <stuff7>:

stuff7:					; 3
	eor	output, usbmask
 320:	21 27       	eor	r18, r17
	rjmp	stuffed7
 322:	e5 cf       	rjmp	.-54     	; 0x2ee <stuffed7>

00000324 <gen_eop>:

; ----------------------------------------------------------------------
; generate EOP, release the bus, and return from interrupt
; ----------------------------------------------------------------------
gen_eop:
	cbr	output, USB_MASK
 324:	23 7f       	andi	r18, 0xF3	; 243
	out	USB_OUT, output		; output SE0 for 2 bit times
 326:	22 bb       	out	0x12, r18	; 18
	pop	even
 328:	6f 91       	pop	r22
	pop	fixup
 32a:	4f 91       	pop	r20
	pop	byte
 32c:	3f 91       	pop	r19
	ldi	count, 1<<USB_INT_PENDING_BIT
 32e:	00 e4       	ldi	r16, 0x40	; 64
	out	USB_INT_PENDING, count	; interrupt was triggered by transmit
 330:	0a bf       	out	0x3a, r16	; 58
	pop	YH			; this is the saved SREG
 332:	df 91       	pop	r29
	pop	YL
 334:	cf 91       	pop	r28
	in	usbmask, USB_DDR
 336:	11 b3       	in	r17, 0x11	; 17
	mov	count, output
 338:	02 2f       	mov	r16, r18
	ori	output, USB_MASK_DMINUS
 33a:	28 60       	ori	r18, 0x08	; 8
	out	USB_OUT, output		; output J state for 1 bit time
 33c:	22 bb       	out	0x12, r18	; 18
	cbr	usbmask, USB_MASK
 33e:	13 7f       	andi	r17, 0xF3	; 243
	out	SREG, YH
 340:	df bf       	out	0x3f, r29	; 63
	pop	YH
 342:	df 91       	pop	r29
	pop	odd			; is the same register as output!
 344:	2f 91       	pop	r18
	nop
 346:	00 00       	nop
	out	USB_DDR, usbmask	; release bus
 348:	11 bb       	out	0x11, r17	; 17
	out	USB_OUT, count		; disable D- pullup
 34a:	02 bb       	out	0x12, r16	; 18
	pop	usbmask
 34c:	1f 91       	pop	r17
	pop	count
 34e:	0f 91       	pop	r16
	reti
 350:	18 95       	reti

00000352 <delay>:
// ----------------------------------------------------------------------
// Delay exactly <sck_period> times 0.5 microseconds (6 cycles).
// ----------------------------------------------------------------------
__attribute__((always_inline))
static	void	delay ( void )
{
 352:	df 93       	push	r29
 354:	cf 93       	push	r28
 356:	cd b7       	in	r28, 0x3d	; 61
 358:	de b7       	in	r29, 0x3e	; 62
	asm volatile(
 35a:	80 91 d5 00 	lds	r24, 0x00D5
 35e:	08 2e       	mov	r0, r24
 360:	00 c0       	rjmp	.+0      	; 0x362 <delay+0x10>
 362:	00 00       	nop
 364:	0a 94       	dec	r0
 366:	e1 f7       	brne	.-8      	; 0x360 <delay+0xe>
		"0:	rjmp	1f		\n"
		"1:	nop			\n"
		"	dec	__tmp_reg__	\n"
		"	brne	0b		\n"
		: : "r" (sck_period) );
}
 368:	cf 91       	pop	r28
 36a:	df 91       	pop	r29
 36c:	08 95       	ret

0000036e <spi>:
// ----------------------------------------------------------------------
// Issue one SPI command.
// ----------------------------------------------------------------------
//__attribute__((naked))
static	void	spi ( byte_t* cmd, byte_t* res, int i )
{
 36e:	df 93       	push	r29
 370:	cf 93       	push	r28
 372:	cd b7       	in	r28, 0x3d	; 61
 374:	de b7       	in	r29, 0x3e	; 62
 376:	29 97       	sbiw	r28, 0x09	; 9
 378:	0f b6       	in	r0, 0x3f	; 63
 37a:	f8 94       	cli
 37c:	de bf       	out	0x3e, r29	; 62
 37e:	0f be       	out	0x3f, r0	; 63
 380:	cd bf       	out	0x3d, r28	; 61
 382:	9d 83       	std	Y+5, r25	; 0x05
 384:	8c 83       	std	Y+4, r24	; 0x04
 386:	7f 83       	std	Y+7, r23	; 0x07
 388:	6e 83       	std	Y+6, r22	; 0x06
 38a:	59 87       	std	Y+9, r21	; 0x09
 38c:	48 87       	std	Y+8, r20	; 0x08
 38e:	53 c0       	rjmp	.+166    	; 0x436 <spi+0xc8>
	byte_t	r;
	byte_t	mask;

	while (i != 0)
	{
	  i--;
 390:	88 85       	ldd	r24, Y+8	; 0x08
 392:	99 85       	ldd	r25, Y+9	; 0x09
 394:	01 97       	sbiw	r24, 0x01	; 1
 396:	99 87       	std	Y+9, r25	; 0x09
 398:	88 87       	std	Y+8, r24	; 0x08
		c = *cmd++;
 39a:	ec 81       	ldd	r30, Y+4	; 0x04
 39c:	fd 81       	ldd	r31, Y+5	; 0x05
 39e:	80 81       	ld	r24, Z
 3a0:	8b 83       	std	Y+3, r24	; 0x03
 3a2:	8c 81       	ldd	r24, Y+4	; 0x04
 3a4:	9d 81       	ldd	r25, Y+5	; 0x05
 3a6:	01 96       	adiw	r24, 0x01	; 1
 3a8:	9d 83       	std	Y+5, r25	; 0x05
 3aa:	8c 83       	std	Y+4, r24	; 0x04
		r = 0;
 3ac:	1a 82       	std	Y+2, r1	; 0x02
		for	( mask = 0x80; mask; mask >>= 1 )
 3ae:	80 e8       	ldi	r24, 0x80	; 128
 3b0:	89 83       	std	Y+1, r24	; 0x01
 3b2:	35 c0       	rjmp	.+106    	; 0x41e <spi+0xb0>
		{
			if	( c & mask )
 3b4:	8b 81       	ldd	r24, Y+3	; 0x03
 3b6:	99 81       	ldd	r25, Y+1	; 0x01
 3b8:	89 23       	and	r24, r25
 3ba:	88 23       	and	r24, r24
 3bc:	39 f0       	breq	.+14     	; 0x3cc <spi+0x5e>
			{
				PORT |= MOSI_MASK;
 3be:	a8 e3       	ldi	r26, 0x38	; 56
 3c0:	b0 e0       	ldi	r27, 0x00	; 0
 3c2:	e8 e3       	ldi	r30, 0x38	; 56
 3c4:	f0 e0       	ldi	r31, 0x00	; 0
 3c6:	80 81       	ld	r24, Z
 3c8:	80 62       	ori	r24, 0x20	; 32
 3ca:	8c 93       	st	X, r24
			}
//			if (! status & INVERTED_SCK_MASK )
				delay();
 3cc:	c2 df       	rcall	.-124    	; 0x352 <delay>

			PORT |= SCK_MASK;
 3ce:	a8 e3       	ldi	r26, 0x38	; 56
 3d0:	b0 e0       	ldi	r27, 0x00	; 0
 3d2:	e8 e3       	ldi	r30, 0x38	; 56
 3d4:	f0 e0       	ldi	r31, 0x00	; 0
 3d6:	80 81       	ld	r24, Z
 3d8:	80 68       	ori	r24, 0x80	; 128
 3da:	8c 93       	st	X, r24
			delay();
 3dc:	ba df       	rcall	.-140    	; 0x352 <delay>
			r <<= 1;
 3de:	8a 81       	ldd	r24, Y+2	; 0x02
 3e0:	88 0f       	add	r24, r24
 3e2:	8a 83       	std	Y+2, r24	; 0x02
			if	( PIN & MISO_MASK )
 3e4:	e6 e3       	ldi	r30, 0x36	; 54
 3e6:	f0 e0       	ldi	r31, 0x00	; 0
 3e8:	80 81       	ld	r24, Z
 3ea:	88 2f       	mov	r24, r24
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	80 74       	andi	r24, 0x40	; 64
 3f0:	90 70       	andi	r25, 0x00	; 0
 3f2:	00 97       	sbiw	r24, 0x00	; 0
 3f4:	19 f0       	breq	.+6      	; 0x3fc <spi+0x8e>
			{
				r++;
 3f6:	8a 81       	ldd	r24, Y+2	; 0x02
 3f8:	8f 5f       	subi	r24, 0xFF	; 255
 3fa:	8a 83       	std	Y+2, r24	; 0x02
			}
			PORT &= ~ SCK_MASK;
 3fc:	a8 e3       	ldi	r26, 0x38	; 56
 3fe:	b0 e0       	ldi	r27, 0x00	; 0
 400:	e8 e3       	ldi	r30, 0x38	; 56
 402:	f0 e0       	ldi	r31, 0x00	; 0
 404:	80 81       	ld	r24, Z
 406:	8f 77       	andi	r24, 0x7F	; 127
 408:	8c 93       	st	X, r24
//			if ( status & INVERTED_SCK_MASK )
//				delay();
			
			PORT &= ~ MOSI_MASK;
 40a:	a8 e3       	ldi	r26, 0x38	; 56
 40c:	b0 e0       	ldi	r27, 0x00	; 0
 40e:	e8 e3       	ldi	r30, 0x38	; 56
 410:	f0 e0       	ldi	r31, 0x00	; 0
 412:	80 81       	ld	r24, Z
 414:	8f 7d       	andi	r24, 0xDF	; 223
 416:	8c 93       	st	X, r24
	while (i != 0)
	{
	  i--;
		c = *cmd++;
		r = 0;
		for	( mask = 0x80; mask; mask >>= 1 )
 418:	89 81       	ldd	r24, Y+1	; 0x01
 41a:	86 95       	lsr	r24
 41c:	89 83       	std	Y+1, r24	; 0x01
 41e:	89 81       	ldd	r24, Y+1	; 0x01
 420:	88 23       	and	r24, r24
 422:	41 f6       	brne	.-112    	; 0x3b4 <spi+0x46>
//			if ( status & INVERTED_SCK_MASK )
//				delay();
			
			PORT &= ~ MOSI_MASK;
		}
		*res++ = r;
 424:	ee 81       	ldd	r30, Y+6	; 0x06
 426:	ff 81       	ldd	r31, Y+7	; 0x07
 428:	8a 81       	ldd	r24, Y+2	; 0x02
 42a:	80 83       	st	Z, r24
 42c:	8e 81       	ldd	r24, Y+6	; 0x06
 42e:	9f 81       	ldd	r25, Y+7	; 0x07
 430:	01 96       	adiw	r24, 0x01	; 1
 432:	9f 83       	std	Y+7, r25	; 0x07
 434:	8e 83       	std	Y+6, r24	; 0x06
{
	byte_t	c;
	byte_t	r;
	byte_t	mask;

	while (i != 0)
 436:	88 85       	ldd	r24, Y+8	; 0x08
 438:	99 85       	ldd	r25, Y+9	; 0x09
 43a:	00 97       	sbiw	r24, 0x00	; 0
 43c:	09 f0       	breq	.+2      	; 0x440 <spi+0xd2>
 43e:	a8 cf       	rjmp	.-176    	; 0x390 <spi+0x22>
			
			PORT &= ~ MOSI_MASK;
		}
		*res++ = r;
	}
}
 440:	29 96       	adiw	r28, 0x09	; 9
 442:	0f b6       	in	r0, 0x3f	; 63
 444:	f8 94       	cli
 446:	de bf       	out	0x3e, r29	; 62
 448:	0f be       	out	0x3f, r0	; 63
 44a:	cd bf       	out	0x3d, r28	; 61
 44c:	cf 91       	pop	r28
 44e:	df 91       	pop	r29
 450:	08 95       	ret

00000452 <spi_rw>:

// ----------------------------------------------------------------------
// Create and issue a read or write SPI command.
// ----------------------------------------------------------------------
static	void	spi_rw ( void )
{
 452:	df 93       	push	r29
 454:	cf 93       	push	r28
 456:	00 d0       	rcall	.+0      	; 0x458 <spi_rw+0x6>
 458:	00 d0       	rcall	.+0      	; 0x45a <spi_rw+0x8>
 45a:	0f 92       	push	r0
 45c:	cd b7       	in	r28, 0x3d	; 61
 45e:	de b7       	in	r29, 0x3e	; 62
	unsigned char offset = 0;
 460:	1d 82       	std	Y+5, r1	; 0x05
	uint_t	a;
	uint_t	tam = (status & TAMANIO_MASK);	
 462:	80 91 e5 00 	lds	r24, 0x00E5
 466:	88 2f       	mov	r24, r24
 468:	90 e0       	ldi	r25, 0x00	; 0
 46a:	87 70       	andi	r24, 0x07	; 7
 46c:	90 70       	andi	r25, 0x00	; 0
 46e:	9a 83       	std	Y+2, r25	; 0x02
 470:	89 83       	std	Y+1, r24	; 0x01

	a = address++;
 472:	80 91 d8 00 	lds	r24, 0x00D8
 476:	90 91 d9 00 	lds	r25, 0x00D9
 47a:	9c 83       	std	Y+4, r25	; 0x04
 47c:	8b 83       	std	Y+3, r24	; 0x03
 47e:	01 96       	adiw	r24, 0x01	; 1
 480:	90 93 d9 00 	sts	0x00D9, r25
 484:	80 93 d8 00 	sts	0x00D8, r24
	cmd[0] = cmd0;
 488:	80 91 dc 00 	lds	r24, 0x00DC
 48c:	80 93 dd 00 	sts	0x00DD, r24
	if ( ( !(status & MICRO_S51_MASK) ) &&  ( ! (cmd0 & 0x80) ) )
 490:	80 91 e5 00 	lds	r24, 0x00E5
 494:	88 2f       	mov	r24, r24
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	88 73       	andi	r24, 0x38	; 56
 49a:	90 70       	andi	r25, 0x00	; 0
 49c:	00 97       	sbiw	r24, 0x00	; 0
 49e:	a9 f4       	brne	.+42     	; 0x4ca <spi_rw+0x78>
 4a0:	80 91 dc 00 	lds	r24, 0x00DC
 4a4:	88 23       	and	r24, r24
 4a6:	8c f0       	brlt	.+34     	; 0x4ca <spi_rw+0x78>
	{	//Es AVR 							// NOT eeprom
		if ( a & 1 )
 4a8:	8b 81       	ldd	r24, Y+3	; 0x03
 4aa:	9c 81       	ldd	r25, Y+4	; 0x04
 4ac:	81 70       	andi	r24, 0x01	; 1
 4ae:	90 70       	andi	r25, 0x00	; 0
 4b0:	88 23       	and	r24, r24
 4b2:	29 f0       	breq	.+10     	; 0x4be <spi_rw+0x6c>
		{
			cmd[0] |= 0x08;	//La H
 4b4:	80 91 dd 00 	lds	r24, 0x00DD
 4b8:	88 60       	ori	r24, 0x08	; 8
 4ba:	80 93 dd 00 	sts	0x00DD, r24
		}
		a >>= 1;	//Corro la direccion
 4be:	8b 81       	ldd	r24, Y+3	; 0x03
 4c0:	9c 81       	ldd	r25, Y+4	; 0x04
 4c2:	96 95       	lsr	r25
 4c4:	87 95       	ror	r24
 4c6:	9c 83       	std	Y+4, r25	; 0x04
 4c8:	8b 83       	std	Y+3, r24	; 0x03
	} 
	cmd[1] = a >> 8;
 4ca:	8b 81       	ldd	r24, Y+3	; 0x03
 4cc:	9c 81       	ldd	r25, Y+4	; 0x04
 4ce:	89 2f       	mov	r24, r25
 4d0:	99 27       	eor	r25, r25
 4d2:	80 93 de 00 	sts	0x00DE, r24
	cmd[2] = a;
 4d6:	8b 81       	ldd	r24, Y+3	; 0x03
 4d8:	80 93 df 00 	sts	0x00DF, r24
	
	if ( (status & MICRO_S51_MASK ) == MICRO_8252 )
 4dc:	80 91 e5 00 	lds	r24, 0x00E5
 4e0:	88 2f       	mov	r24, r24
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	88 73       	andi	r24, 0x38	; 56
 4e6:	90 70       	andi	r25, 0x00	; 0
 4e8:	80 31       	cpi	r24, 0x10	; 16
 4ea:	91 05       	cpc	r25, r1
 4ec:	81 f4       	brne	.+32     	; 0x50e <spi_rw+0xbc>
	{
		cmd[1] <<= 3;
 4ee:	80 91 de 00 	lds	r24, 0x00DE
 4f2:	88 0f       	add	r24, r24
 4f4:	88 0f       	add	r24, r24
 4f6:	88 0f       	add	r24, r24
 4f8:	80 93 de 00 	sts	0x00DE, r24
		cmd[1] |= cmd0;
 4fc:	90 91 de 00 	lds	r25, 0x00DE
 500:	80 91 dc 00 	lds	r24, 0x00DC
 504:	89 2b       	or	r24, r25
 506:	80 93 de 00 	sts	0x00DE, r24
		offset = 1;
 50a:	81 e0       	ldi	r24, 0x01	; 1
 50c:	8d 83       	std	Y+5, r24	; 0x05
	}
	spi( cmd + offset, res, tam );
 50e:	8d 81       	ldd	r24, Y+5	; 0x05
 510:	88 2f       	mov	r24, r24
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	83 52       	subi	r24, 0x23	; 35
 516:	9f 4f       	sbci	r25, 0xFF	; 255
 518:	49 81       	ldd	r20, Y+1	; 0x01
 51a:	5a 81       	ldd	r21, Y+2	; 0x02
 51c:	21 ee       	ldi	r18, 0xE1	; 225
 51e:	30 e0       	ldi	r19, 0x00	; 0
 520:	b9 01       	movw	r22, r18
 522:	25 df       	rcall	.-438    	; 0x36e <spi>
}
 524:	0f 90       	pop	r0
 526:	0f 90       	pop	r0
 528:	0f 90       	pop	r0
 52a:	0f 90       	pop	r0
 52c:	0f 90       	pop	r0
 52e:	cf 91       	pop	r28
 530:	df 91       	pop	r29
 532:	08 95       	ret

00000534 <usb_setup>:

// ----------------------------------------------------------------------
// Handle a non-standard SETUP packet.
// ----------------------------------------------------------------------
extern	byte_t	usb_setup ( byte_t data[8] )
{
 534:	df 93       	push	r29
 536:	cf 93       	push	r28
 538:	00 d0       	rcall	.+0      	; 0x53a <usb_setup+0x6>
 53a:	0f 92       	push	r0
 53c:	cd b7       	in	r28, 0x3d	; 61
 53e:	de b7       	in	r29, 0x3e	; 62
 540:	9a 83       	std	Y+2, r25	; 0x02
 542:	89 83       	std	Y+1, r24	; 0x01
		{						//Si estoy programando un S51, tengo que pasarlo en la trama CONFIGURE
			cmd0 = cmd0_temp;
		}
	}
	return ans;*/
}
 544:	0f 90       	pop	r0
 546:	0f 90       	pop	r0
 548:	0f 90       	pop	r0
 54a:	cf 91       	pop	r28
 54c:	df 91       	pop	r29
 54e:	08 95       	ret

00000550 <usb_in>:

// ----------------------------------------------------------------------
// Handle an IN packet.
// ----------------------------------------------------------------------
extern	byte_t	usb_in ( byte_t* data, byte_t len )
{
 550:	df 93       	push	r29
 552:	cf 93       	push	r28
 554:	00 d0       	rcall	.+0      	; 0x556 <usb_in+0x6>
 556:	00 d0       	rcall	.+0      	; 0x558 <usb_in+0x8>
 558:	cd b7       	in	r28, 0x3d	; 61
 55a:	de b7       	in	r29, 0x3e	; 62
 55c:	9a 83       	std	Y+2, r25	; 0x02
 55e:	89 83       	std	Y+1, r24	; 0x01
 560:	6b 83       	std	Y+3, r22	; 0x03
	{
		spi_rw();
		data[i] = res[3];
	}
	return len;*/
}
 562:	0f 90       	pop	r0
 564:	0f 90       	pop	r0
 566:	0f 90       	pop	r0
 568:	0f 90       	pop	r0
 56a:	cf 91       	pop	r28
 56c:	df 91       	pop	r29
 56e:	08 95       	ret

00000570 <usb_out>:

// ----------------------------------------------------------------------
// Handle an OUT packet.
// ----------------------------------------------------------------------
extern	void	usb_out ( byte_t* data, byte_t len )
{
 570:	df 93       	push	r29
 572:	cf 93       	push	r28
 574:	00 d0       	rcall	.+0      	; 0x576 <usb_out+0x6>
 576:	0f 92       	push	r0
 578:	cd b7       	in	r28, 0x3d	; 61
 57a:	de b7       	in	r29, 0x3e	; 62
 57c:	9a 83       	std	Y+2, r25	; 0x02
 57e:	89 83       	std	Y+1, r24	; 0x01
 580:	6b 83       	std	Y+3, r22	; 0x03
			{
				break;
			}
		}
	}*/
}	 
 582:	0f 90       	pop	r0
 584:	0f 90       	pop	r0
 586:	0f 90       	pop	r0
 588:	cf 91       	pop	r28
 58a:	df 91       	pop	r29
 58c:	08 95       	ret

0000058e <main>:
// Main
// ----------------------------------------------------------------------
__attribute__((naked))		// suppress redundant SP initialization
int	main ( void )
{
  PORTD |= _BV(4);
 58e:	a2 e3       	ldi	r26, 0x32	; 50
 590:	b0 e0       	ldi	r27, 0x00	; 0
 592:	e2 e3       	ldi	r30, 0x32	; 50
 594:	f0 e0       	ldi	r31, 0x00	; 0
 596:	80 81       	ld	r24, Z
 598:	80 61       	ori	r24, 0x10	; 16
 59a:	8c 93       	st	X, r24
  DDRD = _BV(6) | _BV(5) | _BV(4); // setup USB pullup, LED pin and buffer select pins to output
 59c:	e1 e3       	ldi	r30, 0x31	; 49
 59e:	f0 e0       	ldi	r31, 0x00	; 0
 5a0:	80 e7       	ldi	r24, 0x70	; 112
 5a2:	80 83       	st	Z, r24
  //usb_init();
  PORTD = _BV(6) | _BV(4); // pull pull-up and buffer disable high
 5a4:	e2 e3       	ldi	r30, 0x32	; 50
 5a6:	f0 e0       	ldi	r31, 0x00	; 0
 5a8:	80 e5       	ldi	r24, 0x50	; 80
 5aa:	80 83       	st	Z, r24
    ProgramLed();
 5ac:	73 d3       	rcall	.+1766   	; 0xc94 <ProgramLed>
 5ae:	ff cf       	rjmp	.-2      	; 0x5ae <main+0x20>

000005b0 <usb_receive>:

// ----------------------------------------------------------------------
// Inspect an incoming packet.
// ----------------------------------------------------------------------
static	void	usb_receive ( byte_t* data, byte_t rx_len )
{
 5b0:	df 93       	push	r29
 5b2:	cf 93       	push	r28
 5b4:	00 d0       	rcall	.+0      	; 0x5b6 <usb_receive+0x6>
 5b6:	00 d0       	rcall	.+0      	; 0x5b8 <usb_receive+0x8>
 5b8:	00 d0       	rcall	.+0      	; 0x5ba <usb_receive+0xa>
 5ba:	cd b7       	in	r28, 0x3d	; 61
 5bc:	de b7       	in	r29, 0x3e	; 62
 5be:	9d 83       	std	Y+5, r25	; 0x05
 5c0:	8c 83       	std	Y+4, r24	; 0x04
 5c2:	6e 83       	std	Y+6, r22	; 0x06
		usb_out( data, rx_len );
	}
#endif
	usb_tx_total  = len;
	usb_tx_buf[0] = USB_PID_DATA0;	// next data packet will be DATA1
*/}
 5c4:	26 96       	adiw	r28, 0x06	; 6
 5c6:	0f b6       	in	r0, 0x3f	; 63
 5c8:	f8 94       	cli
 5ca:	de bf       	out	0x3e, r29	; 62
 5cc:	0f be       	out	0x3f, r0	; 63
 5ce:	cd bf       	out	0x3d, r28	; 61
 5d0:	cf 91       	pop	r28
 5d2:	df 91       	pop	r29
 5d4:	08 95       	ret

000005d6 <usb_transmit>:

// ----------------------------------------------------------------------
// Load the transmit buffer with the next packet.
// ----------------------------------------------------------------------
static	void	usb_transmit ( void )
{
 5d6:	df 93       	push	r29
 5d8:	cf 93       	push	r28
 5da:	cd b7       	in	r28, 0x3d	; 61
 5dc:	de b7       	in	r29, 0x3e	; 62
 5de:	2a 97       	sbiw	r28, 0x0a	; 10
 5e0:	0f b6       	in	r0, 0x3f	; 63
 5e2:	f8 94       	cli
 5e4:	de bf       	out	0x3e, r29	; 62
 5e6:	0f be       	out	0x3f, r0	; 63
 5e8:	cd bf       	out	0x3d, r28	; 61
	byte_t*	src;
	byte_t*	dst;
	byte_t	i;
	byte_t	b;

	usb_tx_buf[0] ^= (USB_PID_DATA0 ^ USB_PID_DATA1);
 5ea:	90 91 0e 01 	lds	r25, 0x010E
 5ee:	88 e8       	ldi	r24, 0x88	; 136
 5f0:	89 27       	eor	r24, r25
 5f2:	80 93 0e 01 	sts	0x010E, r24
	len = usb_tx_total;
 5f6:	80 91 e7 00 	lds	r24, 0x00E7
 5fa:	8a 87       	std	Y+10, r24	; 0x0a
	if	( len > 8 )
 5fc:	8a 85       	ldd	r24, Y+10	; 0x0a
 5fe:	89 30       	cpi	r24, 0x09	; 9
 600:	10 f0       	brcs	.+4      	; 0x606 <usb_transmit+0x30>
	{
		len = 8;
 602:	88 e0       	ldi	r24, 0x08	; 8
 604:	8a 87       	std	Y+10, r24	; 0x0a
	}
	dst = usb_tx_buf + 1;
 606:	8f e0       	ldi	r24, 0x0F	; 15
 608:	91 e0       	ldi	r25, 0x01	; 1
 60a:	9f 83       	std	Y+7, r25	; 0x07
 60c:	8e 83       	std	Y+6, r24	; 0x06
	if	( len > 0 )
 60e:	8a 85       	ldd	r24, Y+10	; 0x0a
 610:	88 23       	and	r24, r24
 612:	09 f4       	brne	.+2      	; 0x616 <usb_transmit+0x40>
 614:	5b c0       	rjmp	.+182    	; 0x6cc <usb_transmit+0xf6>
	{
#if	USBTINY_CALLBACK_IN
		if	( usb_tx_state == TX_STATE_CALLBACK )
 616:	80 91 e6 00 	lds	r24, 0x00E6
 61a:	83 30       	cpi	r24, 0x03	; 3
 61c:	31 f4       	brne	.+12     	; 0x62a <usb_transmit+0x54>
		{
			len = usb_in( dst, len );
 61e:	8e 81       	ldd	r24, Y+6	; 0x06
 620:	9f 81       	ldd	r25, Y+7	; 0x07
 622:	6a 85       	ldd	r22, Y+10	; 0x0a
 624:	95 df       	rcall	.-214    	; 0x550 <usb_in>
 626:	8a 87       	std	Y+10, r24	; 0x0a
 628:	4b c0       	rjmp	.+150    	; 0x6c0 <usb_transmit+0xea>
		}
		else
#endif
		{
			src = usb_tx_data;
 62a:	80 91 e8 00 	lds	r24, 0x00E8
 62e:	90 91 e9 00 	lds	r25, 0x00E9
 632:	99 87       	std	Y+9, r25	; 0x09
 634:	88 87       	std	Y+8, r24	; 0x08
			if	( usb_tx_state == TX_STATE_RAM )
 636:	80 91 e6 00 	lds	r24, 0x00E6
 63a:	81 30       	cpi	r24, 0x01	; 1
 63c:	d1 f4       	brne	.+52     	; 0x672 <usb_transmit+0x9c>
			{
				for	( i = 0; i < len; i++ )
 63e:	1d 82       	std	Y+5, r1	; 0x05
 640:	13 c0       	rjmp	.+38     	; 0x668 <usb_transmit+0x92>
				{
					*dst++ = *src++;
 642:	e8 85       	ldd	r30, Y+8	; 0x08
 644:	f9 85       	ldd	r31, Y+9	; 0x09
 646:	80 81       	ld	r24, Z
 648:	ee 81       	ldd	r30, Y+6	; 0x06
 64a:	ff 81       	ldd	r31, Y+7	; 0x07
 64c:	80 83       	st	Z, r24
 64e:	8e 81       	ldd	r24, Y+6	; 0x06
 650:	9f 81       	ldd	r25, Y+7	; 0x07
 652:	01 96       	adiw	r24, 0x01	; 1
 654:	9f 83       	std	Y+7, r25	; 0x07
 656:	8e 83       	std	Y+6, r24	; 0x06
 658:	88 85       	ldd	r24, Y+8	; 0x08
 65a:	99 85       	ldd	r25, Y+9	; 0x09
 65c:	01 96       	adiw	r24, 0x01	; 1
 65e:	99 87       	std	Y+9, r25	; 0x09
 660:	88 87       	std	Y+8, r24	; 0x08
#endif
		{
			src = usb_tx_data;
			if	( usb_tx_state == TX_STATE_RAM )
			{
				for	( i = 0; i < len; i++ )
 662:	8d 81       	ldd	r24, Y+5	; 0x05
 664:	8f 5f       	subi	r24, 0xFF	; 255
 666:	8d 83       	std	Y+5, r24	; 0x05
 668:	9d 81       	ldd	r25, Y+5	; 0x05
 66a:	8a 85       	ldd	r24, Y+10	; 0x0a
 66c:	98 17       	cp	r25, r24
 66e:	48 f3       	brcs	.-46     	; 0x642 <usb_transmit+0x6c>
 670:	21 c0       	rjmp	.+66     	; 0x6b4 <usb_transmit+0xde>
					*dst++ = *src++;
				}
			}
			else	// usb_tx_state == TX_STATE_ROM
			{
				for	( i = 0; i < len; i++ )
 672:	1d 82       	std	Y+5, r1	; 0x05
 674:	1b c0       	rjmp	.+54     	; 0x6ac <usb_transmit+0xd6>
				{
					b = pgm_read_byte( src );
 676:	88 85       	ldd	r24, Y+8	; 0x08
 678:	99 85       	ldd	r25, Y+9	; 0x09
 67a:	9b 83       	std	Y+3, r25	; 0x03
 67c:	8a 83       	std	Y+2, r24	; 0x02
 67e:	ea 81       	ldd	r30, Y+2	; 0x02
 680:	fb 81       	ldd	r31, Y+3	; 0x03
 682:	84 91       	lpm	r24, Z+
 684:	89 83       	std	Y+1, r24	; 0x01
 686:	89 81       	ldd	r24, Y+1	; 0x01
 688:	8c 83       	std	Y+4, r24	; 0x04
					src++;
 68a:	88 85       	ldd	r24, Y+8	; 0x08
 68c:	99 85       	ldd	r25, Y+9	; 0x09
 68e:	01 96       	adiw	r24, 0x01	; 1
 690:	99 87       	std	Y+9, r25	; 0x09
 692:	88 87       	std	Y+8, r24	; 0x08
					*dst++ = b;
 694:	ee 81       	ldd	r30, Y+6	; 0x06
 696:	ff 81       	ldd	r31, Y+7	; 0x07
 698:	8c 81       	ldd	r24, Y+4	; 0x04
 69a:	80 83       	st	Z, r24
 69c:	8e 81       	ldd	r24, Y+6	; 0x06
 69e:	9f 81       	ldd	r25, Y+7	; 0x07
 6a0:	01 96       	adiw	r24, 0x01	; 1
 6a2:	9f 83       	std	Y+7, r25	; 0x07
 6a4:	8e 83       	std	Y+6, r24	; 0x06
					*dst++ = *src++;
				}
			}
			else	// usb_tx_state == TX_STATE_ROM
			{
				for	( i = 0; i < len; i++ )
 6a6:	8d 81       	ldd	r24, Y+5	; 0x05
 6a8:	8f 5f       	subi	r24, 0xFF	; 255
 6aa:	8d 83       	std	Y+5, r24	; 0x05
 6ac:	9d 81       	ldd	r25, Y+5	; 0x05
 6ae:	8a 85       	ldd	r24, Y+10	; 0x0a
 6b0:	98 17       	cp	r25, r24
 6b2:	08 f3       	brcs	.-62     	; 0x676 <usb_transmit+0xa0>
					b = pgm_read_byte( src );
					src++;
					*dst++ = b;
				}
			}
			usb_tx_data = src;
 6b4:	88 85       	ldd	r24, Y+8	; 0x08
 6b6:	99 85       	ldd	r25, Y+9	; 0x09
 6b8:	90 93 e9 00 	sts	0x00E9, r25
 6bc:	80 93 e8 00 	sts	0x00E8, r24
		}
		usb_tx_total -= len;
 6c0:	80 91 e7 00 	lds	r24, 0x00E7
 6c4:	9a 85       	ldd	r25, Y+10	; 0x0a
 6c6:	89 1b       	sub	r24, r25
 6c8:	80 93 e7 00 	sts	0x00E7, r24
	}
	crc( usb_tx_buf + 1, len );
 6cc:	8f e0       	ldi	r24, 0x0F	; 15
 6ce:	91 e0       	ldi	r25, 0x01	; 1
 6d0:	6a 85       	ldd	r22, Y+10	; 0x0a
 6d2:	f4 d3       	rcall	.+2024   	; 0xebc <crc>
	usb_tx_len = len + 3;
 6d4:	8a 85       	ldd	r24, Y+10	; 0x0a
 6d6:	8d 5f       	subi	r24, 0xFD	; 253
 6d8:	80 93 0d 01 	sts	0x010D, r24
	if	( len < 8 )
 6dc:	8a 85       	ldd	r24, Y+10	; 0x0a
 6de:	88 30       	cpi	r24, 0x08	; 8
 6e0:	10 f4       	brcc	.+4      	; 0x6e6 <usb_transmit+0x110>
	{	// this is the last packet
		usb_tx_state = TX_STATE_IDLE;
 6e2:	10 92 e6 00 	sts	0x00E6, r1
	}
}
 6e6:	2a 96       	adiw	r28, 0x0a	; 10
 6e8:	0f b6       	in	r0, 0x3f	; 63
 6ea:	f8 94       	cli
 6ec:	de bf       	out	0x3e, r29	; 62
 6ee:	0f be       	out	0x3f, r0	; 63
 6f0:	cd bf       	out	0x3d, r28	; 61
 6f2:	cf 91       	pop	r28
 6f4:	df 91       	pop	r29
 6f6:	08 95       	ret

000006f8 <usb_init>:

// ----------------------------------------------------------------------
// Initialize the low-level USB driver.
// ----------------------------------------------------------------------
extern	void	usb_init ( void )
{
 6f8:	df 93       	push	r29
 6fa:	cf 93       	push	r28
 6fc:	cd b7       	in	r28, 0x3d	; 61
 6fe:	de b7       	in	r29, 0x3e	; 62
	USB_INT_CONFIG |= USB_INT_CONFIG_SET;
 700:	a5 e5       	ldi	r26, 0x55	; 85
 702:	b0 e0       	ldi	r27, 0x00	; 0
 704:	e5 e5       	ldi	r30, 0x55	; 85
 706:	f0 e0       	ldi	r31, 0x00	; 0
 708:	80 81       	ld	r24, Z
 70a:	83 60       	ori	r24, 0x03	; 3
 70c:	8c 93       	st	X, r24
	USB_INT_ENABLE |= (1 << USB_INT_ENABLE_BIT);
 70e:	ab e5       	ldi	r26, 0x5B	; 91
 710:	b0 e0       	ldi	r27, 0x00	; 0
 712:	eb e5       	ldi	r30, 0x5B	; 91
 714:	f0 e0       	ldi	r31, 0x00	; 0
 716:	80 81       	ld	r24, Z
 718:	80 64       	ori	r24, 0x40	; 64
 71a:	8c 93       	st	X, r24
	sei();
 71c:	78 94       	sei
}
 71e:	cf 91       	pop	r28
 720:	df 91       	pop	r29
 722:	08 95       	ret

00000724 <usb_poll>:
// - check for incoming USB packets
// - refill an empty transmit buffer
// - check for USB bus reset
// ----------------------------------------------------------------------
extern	void	usb_poll ( void )
{
 724:	df 93       	push	r29
 726:	cf 93       	push	r28
 728:	0f 92       	push	r0
 72a:	cd b7       	in	r28, 0x3d	; 61
 72c:	de b7       	in	r29, 0x3e	; 62
	byte_t	i;

	// check for incoming USB packets
	if	( usb_rx_len != 0 )
 72e:	80 91 1a 01 	lds	r24, 0x011A
 732:	88 23       	and	r24, r24
 734:	b1 f0       	breq	.+44     	; 0x762 <usb_poll+0x3e>
	{
		usb_receive( usb_rx_buf + USB_BUFSIZE - usb_rx_off + 1, usb_rx_len - 3 );
 736:	80 91 1b 01 	lds	r24, 0x011B
 73a:	28 2f       	mov	r18, r24
 73c:	30 e0       	ldi	r19, 0x00	; 0
 73e:	8c e0       	ldi	r24, 0x0C	; 12
 740:	90 e0       	ldi	r25, 0x00	; 0
 742:	82 1b       	sub	r24, r18
 744:	93 0b       	sbc	r25, r19
 746:	9c 01       	movw	r18, r24
 748:	24 5e       	subi	r18, 0xE4	; 228
 74a:	3e 4f       	sbci	r19, 0xFE	; 254
 74c:	80 91 1a 01 	lds	r24, 0x011A
 750:	48 2f       	mov	r20, r24
 752:	43 50       	subi	r20, 0x03	; 3
 754:	c9 01       	movw	r24, r18
 756:	64 2f       	mov	r22, r20
 758:	2b df       	rcall	.-426    	; 0x5b0 <usb_receive>
		usb_tx_len = 0;	// abort pending transmission
 75a:	10 92 0d 01 	sts	0x010D, r1
		usb_rx_len = 0;	// accept next packet
 75e:	10 92 1a 01 	sts	0x011A, r1
	}
	// refill an empty transmit buffer, when the transmitter is active
	if	( usb_tx_len == 0 )
 762:	80 91 0d 01 	lds	r24, 0x010D
 766:	88 23       	and	r24, r24
 768:	51 f4       	brne	.+20     	; 0x77e <usb_poll+0x5a>
	{
		if	( usb_tx_state != TX_STATE_IDLE )
 76a:	80 91 e6 00 	lds	r24, 0x00E6
 76e:	88 23       	and	r24, r24
 770:	11 f0       	breq	.+4      	; 0x776 <usb_poll+0x52>
		{
			usb_transmit();
 772:	31 df       	rcall	.-414    	; 0x5d6 <usb_transmit>
 774:	04 c0       	rjmp	.+8      	; 0x77e <usb_poll+0x5a>
		}
		else
		{	// change the USB address at the end of a transfer
			usb_address = new_address;
 776:	80 91 ea 00 	lds	r24, 0x00EA
 77a:	80 93 32 01 	sts	0x0132, r24
		}
	}
	// check for USB bus reset
	for	( i = 10; i > 0 && ! (USB_IN & USB_MASK_DMINUS); i-- )
 77e:	8a e0       	ldi	r24, 0x0A	; 10
 780:	89 83       	std	Y+1, r24	; 0x01
 782:	03 c0       	rjmp	.+6      	; 0x78a <usb_poll+0x66>
 784:	89 81       	ldd	r24, Y+1	; 0x01
 786:	81 50       	subi	r24, 0x01	; 1
 788:	89 83       	std	Y+1, r24	; 0x01
 78a:	89 81       	ldd	r24, Y+1	; 0x01
 78c:	88 23       	and	r24, r24
 78e:	49 f0       	breq	.+18     	; 0x7a2 <usb_poll+0x7e>
 790:	e0 e3       	ldi	r30, 0x30	; 48
 792:	f0 e0       	ldi	r31, 0x00	; 0
 794:	80 81       	ld	r24, Z
 796:	88 2f       	mov	r24, r24
 798:	90 e0       	ldi	r25, 0x00	; 0
 79a:	88 70       	andi	r24, 0x08	; 8
 79c:	90 70       	andi	r25, 0x00	; 0
 79e:	00 97       	sbiw	r24, 0x00	; 0
 7a0:	89 f3       	breq	.-30     	; 0x784 <usb_poll+0x60>
	{
	}
	if	( i == 0 )
 7a2:	89 81       	ldd	r24, Y+1	; 0x01
 7a4:	88 23       	and	r24, r24
 7a6:	11 f4       	brne	.+4      	; 0x7ac <usb_poll+0x88>
	{	// SE0 for more than 2.5uS is a reset
		new_address = 0;
 7a8:	10 92 ea 00 	sts	0x00EA, r1
	}
}
 7ac:	0f 90       	pop	r0
 7ae:	cf 91       	pop	r28
 7b0:	df 91       	pop	r29
 7b2:	08 95       	ret

000007b4 <delay>:
// ----------------------------------------------------------------------
// Delay exactly <sck_period> times 0.5 microseconds (6 cycles).
// ----------------------------------------------------------------------
__attribute__((always_inline))
static	void	delay ( void )
{
 7b4:	df 93       	push	r29
 7b6:	cf 93       	push	r28
 7b8:	cd b7       	in	r28, 0x3d	; 61
 7ba:	de b7       	in	r29, 0x3e	; 62
	asm volatile(
 7bc:	80 91 eb 00 	lds	r24, 0x00EB
 7c0:	08 2e       	mov	r0, r24
 7c2:	00 c0       	rjmp	.+0      	; 0x7c4 <delay+0x10>
 7c4:	00 00       	nop
 7c6:	0a 94       	dec	r0
 7c8:	e1 f7       	brne	.-8      	; 0x7c2 <delay+0xe>
		"0:	rjmp	1f		\n"
		"1:	nop			\n"
		"	dec	__tmp_reg__	\n"
		"	brne	0b		\n"
		: : "r" (sck_period) );
}
 7ca:	cf 91       	pop	r28
 7cc:	df 91       	pop	r29
 7ce:	08 95       	ret

000007d0 <spi>:
// ----------------------------------------------------------------------
// Issue one SPI command.
// ----------------------------------------------------------------------
//__attribute__((naked))
static	void	spi ( byte_t* cmd, byte_t* res, int i )
{
 7d0:	df 93       	push	r29
 7d2:	cf 93       	push	r28
 7d4:	cd b7       	in	r28, 0x3d	; 61
 7d6:	de b7       	in	r29, 0x3e	; 62
 7d8:	29 97       	sbiw	r28, 0x09	; 9
 7da:	0f b6       	in	r0, 0x3f	; 63
 7dc:	f8 94       	cli
 7de:	de bf       	out	0x3e, r29	; 62
 7e0:	0f be       	out	0x3f, r0	; 63
 7e2:	cd bf       	out	0x3d, r28	; 61
 7e4:	9d 83       	std	Y+5, r25	; 0x05
 7e6:	8c 83       	std	Y+4, r24	; 0x04
 7e8:	7f 83       	std	Y+7, r23	; 0x07
 7ea:	6e 83       	std	Y+6, r22	; 0x06
 7ec:	59 87       	std	Y+9, r21	; 0x09
 7ee:	48 87       	std	Y+8, r20	; 0x08
 7f0:	53 c0       	rjmp	.+166    	; 0x898 <spi+0xc8>
	byte_t	r;
	byte_t	mask;

	while (i != 0)
	{
	  i--;
 7f2:	88 85       	ldd	r24, Y+8	; 0x08
 7f4:	99 85       	ldd	r25, Y+9	; 0x09
 7f6:	01 97       	sbiw	r24, 0x01	; 1
 7f8:	99 87       	std	Y+9, r25	; 0x09
 7fa:	88 87       	std	Y+8, r24	; 0x08
		c = *cmd++;
 7fc:	ec 81       	ldd	r30, Y+4	; 0x04
 7fe:	fd 81       	ldd	r31, Y+5	; 0x05
 800:	80 81       	ld	r24, Z
 802:	8b 83       	std	Y+3, r24	; 0x03
 804:	8c 81       	ldd	r24, Y+4	; 0x04
 806:	9d 81       	ldd	r25, Y+5	; 0x05
 808:	01 96       	adiw	r24, 0x01	; 1
 80a:	9d 83       	std	Y+5, r25	; 0x05
 80c:	8c 83       	std	Y+4, r24	; 0x04
		r = 0;
 80e:	1a 82       	std	Y+2, r1	; 0x02
		for	( mask = 0x80; mask; mask >>= 1 )
 810:	80 e8       	ldi	r24, 0x80	; 128
 812:	89 83       	std	Y+1, r24	; 0x01
 814:	35 c0       	rjmp	.+106    	; 0x880 <spi+0xb0>
		{
			if	( c & mask )
 816:	8b 81       	ldd	r24, Y+3	; 0x03
 818:	99 81       	ldd	r25, Y+1	; 0x01
 81a:	89 23       	and	r24, r25
 81c:	88 23       	and	r24, r24
 81e:	39 f0       	breq	.+14     	; 0x82e <spi+0x5e>
			{
				PORT |= MOSI_MASK;
 820:	a8 e3       	ldi	r26, 0x38	; 56
 822:	b0 e0       	ldi	r27, 0x00	; 0
 824:	e8 e3       	ldi	r30, 0x38	; 56
 826:	f0 e0       	ldi	r31, 0x00	; 0
 828:	80 81       	ld	r24, Z
 82a:	80 62       	ori	r24, 0x20	; 32
 82c:	8c 93       	st	X, r24
			}
//			if (! status & INVERTED_SCK_MASK )
				delay();
 82e:	c2 df       	rcall	.-124    	; 0x7b4 <delay>

			PORT |= SCK_MASK;
 830:	a8 e3       	ldi	r26, 0x38	; 56
 832:	b0 e0       	ldi	r27, 0x00	; 0
 834:	e8 e3       	ldi	r30, 0x38	; 56
 836:	f0 e0       	ldi	r31, 0x00	; 0
 838:	80 81       	ld	r24, Z
 83a:	80 68       	ori	r24, 0x80	; 128
 83c:	8c 93       	st	X, r24
			delay();
 83e:	ba df       	rcall	.-140    	; 0x7b4 <delay>
			r <<= 1;
 840:	8a 81       	ldd	r24, Y+2	; 0x02
 842:	88 0f       	add	r24, r24
 844:	8a 83       	std	Y+2, r24	; 0x02
			if	( PIN & MISO_MASK )
 846:	e6 e3       	ldi	r30, 0x36	; 54
 848:	f0 e0       	ldi	r31, 0x00	; 0
 84a:	80 81       	ld	r24, Z
 84c:	88 2f       	mov	r24, r24
 84e:	90 e0       	ldi	r25, 0x00	; 0
 850:	80 74       	andi	r24, 0x40	; 64
 852:	90 70       	andi	r25, 0x00	; 0
 854:	00 97       	sbiw	r24, 0x00	; 0
 856:	19 f0       	breq	.+6      	; 0x85e <spi+0x8e>
			{
				r++;
 858:	8a 81       	ldd	r24, Y+2	; 0x02
 85a:	8f 5f       	subi	r24, 0xFF	; 255
 85c:	8a 83       	std	Y+2, r24	; 0x02
			}
			PORT &= ~ SCK_MASK;
 85e:	a8 e3       	ldi	r26, 0x38	; 56
 860:	b0 e0       	ldi	r27, 0x00	; 0
 862:	e8 e3       	ldi	r30, 0x38	; 56
 864:	f0 e0       	ldi	r31, 0x00	; 0
 866:	80 81       	ld	r24, Z
 868:	8f 77       	andi	r24, 0x7F	; 127
 86a:	8c 93       	st	X, r24
//			if ( status & INVERTED_SCK_MASK )
//				delay();
			
			PORT &= ~ MOSI_MASK;
 86c:	a8 e3       	ldi	r26, 0x38	; 56
 86e:	b0 e0       	ldi	r27, 0x00	; 0
 870:	e8 e3       	ldi	r30, 0x38	; 56
 872:	f0 e0       	ldi	r31, 0x00	; 0
 874:	80 81       	ld	r24, Z
 876:	8f 7d       	andi	r24, 0xDF	; 223
 878:	8c 93       	st	X, r24
	while (i != 0)
	{
	  i--;
		c = *cmd++;
		r = 0;
		for	( mask = 0x80; mask; mask >>= 1 )
 87a:	89 81       	ldd	r24, Y+1	; 0x01
 87c:	86 95       	lsr	r24
 87e:	89 83       	std	Y+1, r24	; 0x01
 880:	89 81       	ldd	r24, Y+1	; 0x01
 882:	88 23       	and	r24, r24
 884:	41 f6       	brne	.-112    	; 0x816 <spi+0x46>
//			if ( status & INVERTED_SCK_MASK )
//				delay();
			
			PORT &= ~ MOSI_MASK;
		}
		*res++ = r;
 886:	ee 81       	ldd	r30, Y+6	; 0x06
 888:	ff 81       	ldd	r31, Y+7	; 0x07
 88a:	8a 81       	ldd	r24, Y+2	; 0x02
 88c:	80 83       	st	Z, r24
 88e:	8e 81       	ldd	r24, Y+6	; 0x06
 890:	9f 81       	ldd	r25, Y+7	; 0x07
 892:	01 96       	adiw	r24, 0x01	; 1
 894:	9f 83       	std	Y+7, r25	; 0x07
 896:	8e 83       	std	Y+6, r24	; 0x06
{
	byte_t	c;
	byte_t	r;
	byte_t	mask;

	while (i != 0)
 898:	88 85       	ldd	r24, Y+8	; 0x08
 89a:	99 85       	ldd	r25, Y+9	; 0x09
 89c:	00 97       	sbiw	r24, 0x00	; 0
 89e:	09 f0       	breq	.+2      	; 0x8a2 <spi+0xd2>
 8a0:	a8 cf       	rjmp	.-176    	; 0x7f2 <spi+0x22>
			
			PORT &= ~ MOSI_MASK;
		}
		*res++ = r;
	}
}
 8a2:	29 96       	adiw	r28, 0x09	; 9
 8a4:	0f b6       	in	r0, 0x3f	; 63
 8a6:	f8 94       	cli
 8a8:	de bf       	out	0x3e, r29	; 62
 8aa:	0f be       	out	0x3f, r0	; 63
 8ac:	cd bf       	out	0x3d, r28	; 61
 8ae:	cf 91       	pop	r28
 8b0:	df 91       	pop	r29
 8b2:	08 95       	ret

000008b4 <spi_rw>:

// ----------------------------------------------------------------------
// Create and issue a read or write SPI command.
// ----------------------------------------------------------------------
static	void	spi_rw ( void )
{
 8b4:	df 93       	push	r29
 8b6:	cf 93       	push	r28
 8b8:	00 d0       	rcall	.+0      	; 0x8ba <spi_rw+0x6>
 8ba:	00 d0       	rcall	.+0      	; 0x8bc <spi_rw+0x8>
 8bc:	0f 92       	push	r0
 8be:	cd b7       	in	r28, 0x3d	; 61
 8c0:	de b7       	in	r29, 0x3e	; 62
	unsigned char offset = 0;
 8c2:	1d 82       	std	Y+5, r1	; 0x05
	uint_t	a;
	uint_t	tam = (status & TAMANIO_MASK);	
 8c4:	80 91 fb 00 	lds	r24, 0x00FB
 8c8:	88 2f       	mov	r24, r24
 8ca:	90 e0       	ldi	r25, 0x00	; 0
 8cc:	87 70       	andi	r24, 0x07	; 7
 8ce:	90 70       	andi	r25, 0x00	; 0
 8d0:	9a 83       	std	Y+2, r25	; 0x02
 8d2:	89 83       	std	Y+1, r24	; 0x01

	a = address++;
 8d4:	80 91 ee 00 	lds	r24, 0x00EE
 8d8:	90 91 ef 00 	lds	r25, 0x00EF
 8dc:	9c 83       	std	Y+4, r25	; 0x04
 8de:	8b 83       	std	Y+3, r24	; 0x03
 8e0:	01 96       	adiw	r24, 0x01	; 1
 8e2:	90 93 ef 00 	sts	0x00EF, r25
 8e6:	80 93 ee 00 	sts	0x00EE, r24
	cmd[0] = cmd0;
 8ea:	80 91 f2 00 	lds	r24, 0x00F2
 8ee:	80 93 f3 00 	sts	0x00F3, r24
	if ( ( !(status & MICRO_S51_MASK) ) &&  ( ! (cmd0 & 0x80) ) )
 8f2:	80 91 fb 00 	lds	r24, 0x00FB
 8f6:	88 2f       	mov	r24, r24
 8f8:	90 e0       	ldi	r25, 0x00	; 0
 8fa:	88 73       	andi	r24, 0x38	; 56
 8fc:	90 70       	andi	r25, 0x00	; 0
 8fe:	00 97       	sbiw	r24, 0x00	; 0
 900:	a9 f4       	brne	.+42     	; 0x92c <spi_rw+0x78>
 902:	80 91 f2 00 	lds	r24, 0x00F2
 906:	88 23       	and	r24, r24
 908:	8c f0       	brlt	.+34     	; 0x92c <spi_rw+0x78>
	{	//Es AVR 							// NOT eeprom
		if ( a & 1 )
 90a:	8b 81       	ldd	r24, Y+3	; 0x03
 90c:	9c 81       	ldd	r25, Y+4	; 0x04
 90e:	81 70       	andi	r24, 0x01	; 1
 910:	90 70       	andi	r25, 0x00	; 0
 912:	88 23       	and	r24, r24
 914:	29 f0       	breq	.+10     	; 0x920 <spi_rw+0x6c>
		{
			cmd[0] |= 0x08;	//La H
 916:	80 91 f3 00 	lds	r24, 0x00F3
 91a:	88 60       	ori	r24, 0x08	; 8
 91c:	80 93 f3 00 	sts	0x00F3, r24
		}
		a >>= 1;	//Corro la direccion
 920:	8b 81       	ldd	r24, Y+3	; 0x03
 922:	9c 81       	ldd	r25, Y+4	; 0x04
 924:	96 95       	lsr	r25
 926:	87 95       	ror	r24
 928:	9c 83       	std	Y+4, r25	; 0x04
 92a:	8b 83       	std	Y+3, r24	; 0x03
	} 
	cmd[1] = a >> 8;
 92c:	8b 81       	ldd	r24, Y+3	; 0x03
 92e:	9c 81       	ldd	r25, Y+4	; 0x04
 930:	89 2f       	mov	r24, r25
 932:	99 27       	eor	r25, r25
 934:	80 93 f4 00 	sts	0x00F4, r24
	cmd[2] = a;
 938:	8b 81       	ldd	r24, Y+3	; 0x03
 93a:	80 93 f5 00 	sts	0x00F5, r24
	
	if ( (status & MICRO_S51_MASK ) == MICRO_8252 )
 93e:	80 91 fb 00 	lds	r24, 0x00FB
 942:	88 2f       	mov	r24, r24
 944:	90 e0       	ldi	r25, 0x00	; 0
 946:	88 73       	andi	r24, 0x38	; 56
 948:	90 70       	andi	r25, 0x00	; 0
 94a:	80 31       	cpi	r24, 0x10	; 16
 94c:	91 05       	cpc	r25, r1
 94e:	81 f4       	brne	.+32     	; 0x970 <spi_rw+0xbc>
	{
		cmd[1] <<= 3;
 950:	80 91 f4 00 	lds	r24, 0x00F4
 954:	88 0f       	add	r24, r24
 956:	88 0f       	add	r24, r24
 958:	88 0f       	add	r24, r24
 95a:	80 93 f4 00 	sts	0x00F4, r24
		cmd[1] |= cmd0;
 95e:	90 91 f4 00 	lds	r25, 0x00F4
 962:	80 91 f2 00 	lds	r24, 0x00F2
 966:	89 2b       	or	r24, r25
 968:	80 93 f4 00 	sts	0x00F4, r24
		offset = 1;
 96c:	81 e0       	ldi	r24, 0x01	; 1
 96e:	8d 83       	std	Y+5, r24	; 0x05
	}
	spi( cmd + offset, res, tam );
 970:	8d 81       	ldd	r24, Y+5	; 0x05
 972:	88 2f       	mov	r24, r24
 974:	90 e0       	ldi	r25, 0x00	; 0
 976:	8d 50       	subi	r24, 0x0D	; 13
 978:	9f 4f       	sbci	r25, 0xFF	; 255
 97a:	49 81       	ldd	r20, Y+1	; 0x01
 97c:	5a 81       	ldd	r21, Y+2	; 0x02
 97e:	27 ef       	ldi	r18, 0xF7	; 247
 980:	30 e0       	ldi	r19, 0x00	; 0
 982:	b9 01       	movw	r22, r18
 984:	25 df       	rcall	.-438    	; 0x7d0 <spi>
}
 986:	0f 90       	pop	r0
 988:	0f 90       	pop	r0
 98a:	0f 90       	pop	r0
 98c:	0f 90       	pop	r0
 98e:	0f 90       	pop	r0
 990:	cf 91       	pop	r28
 992:	df 91       	pop	r29
 994:	08 95       	ret

00000996 <test8253_normal_write>:
0x22,
};


void test8253_normal_write()
{
 996:	df 93       	push	r29
 998:	cf 93       	push	r28
 99a:	cd b7       	in	r28, 0x3d	; 61
 99c:	de b7       	in	r29, 0x3e	; 62


}
 99e:	cf 91       	pop	r28
 9a0:	df 91       	pop	r29
 9a2:	08 95       	ret

000009a4 <spiOneByte>:
/* Sends one byte over SPI.
   Returns the data in.
*/

static byte_t spiOneByte(byte_t dataOut)
{
 9a4:	df 93       	push	r29
 9a6:	cf 93       	push	r28
 9a8:	00 d0       	rcall	.+0      	; 0x9aa <spiOneByte+0x6>
 9aa:	0f 92       	push	r0
 9ac:	cd b7       	in	r28, 0x3d	; 61
 9ae:	de b7       	in	r29, 0x3e	; 62
 9b0:	8b 83       	std	Y+3, r24	; 0x03
	byte_t	mask;
	byte_t  dataIn = 0;
 9b2:	19 82       	std	Y+1, r1	; 0x01

	for	( mask = 0x80; mask; mask >>= 1 )
 9b4:	80 e8       	ldi	r24, 0x80	; 128
 9b6:	8a 83       	std	Y+2, r24	; 0x02
 9b8:	35 c0       	rjmp	.+106    	; 0xa24 <spiOneByte+0x80>
	{

		SET_SCK;
 9ba:	a8 e3       	ldi	r26, 0x38	; 56
 9bc:	b0 e0       	ldi	r27, 0x00	; 0
 9be:	e8 e3       	ldi	r30, 0x38	; 56
 9c0:	f0 e0       	ldi	r31, 0x00	; 0
 9c2:	80 81       	ld	r24, Z
 9c4:	80 68       	ori	r24, 0x80	; 128
 9c6:	8c 93       	st	X, r24
		if	( dataOut & mask )
 9c8:	9b 81       	ldd	r25, Y+3	; 0x03
 9ca:	8a 81       	ldd	r24, Y+2	; 0x02
 9cc:	89 23       	and	r24, r25
 9ce:	88 23       	and	r24, r24
 9d0:	39 f0       	breq	.+14     	; 0x9e0 <spiOneByte+0x3c>
		{
			SET_MOSI;            
 9d2:	a8 e3       	ldi	r26, 0x38	; 56
 9d4:	b0 e0       	ldi	r27, 0x00	; 0
 9d6:	e8 e3       	ldi	r30, 0x38	; 56
 9d8:	f0 e0       	ldi	r31, 0x00	; 0
 9da:	80 81       	ld	r24, Z
 9dc:	80 62       	ori	r24, 0x20	; 32
 9de:	8c 93       	st	X, r24
		}
//			if (! status & INVERTED_SCK_MASK )
		delay();
 9e0:	e9 de       	rcall	.-558    	; 0x7b4 <delay>

		dataIn <<= 1;
 9e2:	89 81       	ldd	r24, Y+1	; 0x01
 9e4:	88 0f       	add	r24, r24
 9e6:	89 83       	std	Y+1, r24	; 0x01
		if	( PIN & MISO_MASK )
 9e8:	e6 e3       	ldi	r30, 0x36	; 54
 9ea:	f0 e0       	ldi	r31, 0x00	; 0
 9ec:	80 81       	ld	r24, Z
 9ee:	88 2f       	mov	r24, r24
 9f0:	90 e0       	ldi	r25, 0x00	; 0
 9f2:	80 74       	andi	r24, 0x40	; 64
 9f4:	90 70       	andi	r25, 0x00	; 0
 9f6:	00 97       	sbiw	r24, 0x00	; 0
 9f8:	19 f0       	breq	.+6      	; 0xa00 <spiOneByte+0x5c>
		{
			dataIn++;
 9fa:	89 81       	ldd	r24, Y+1	; 0x01
 9fc:	8f 5f       	subi	r24, 0xFF	; 255
 9fe:	89 83       	std	Y+1, r24	; 0x01
		}
		CLR_SCK;
 a00:	a8 e3       	ldi	r26, 0x38	; 56
 a02:	b0 e0       	ldi	r27, 0x00	; 0
 a04:	e8 e3       	ldi	r30, 0x38	; 56
 a06:	f0 e0       	ldi	r31, 0x00	; 0
 a08:	80 81       	ld	r24, Z
 a0a:	8f 77       	andi	r24, 0x7F	; 127
 a0c:	8c 93       	st	X, r24
        delay();
 a0e:	d2 de       	rcall	.-604    	; 0x7b4 <delay>
//			if ( status & INVERTED_SCK_MASK )
//				delay();
		CLR_MOSI;		
 a10:	a8 e3       	ldi	r26, 0x38	; 56
 a12:	b0 e0       	ldi	r27, 0x00	; 0
 a14:	e8 e3       	ldi	r30, 0x38	; 56
 a16:	f0 e0       	ldi	r31, 0x00	; 0
 a18:	80 81       	ld	r24, Z
 a1a:	8f 7d       	andi	r24, 0xDF	; 223
 a1c:	8c 93       	st	X, r24
static byte_t spiOneByte(byte_t dataOut)
{
	byte_t	mask;
	byte_t  dataIn = 0;

	for	( mask = 0x80; mask; mask >>= 1 )
 a1e:	8a 81       	ldd	r24, Y+2	; 0x02
 a20:	86 95       	lsr	r24
 a22:	8a 83       	std	Y+2, r24	; 0x02
 a24:	8a 81       	ldd	r24, Y+2	; 0x02
 a26:	88 23       	and	r24, r24
 a28:	41 f6       	brne	.-112    	; 0x9ba <spiOneByte+0x16>
        delay();
//			if ( status & INVERTED_SCK_MASK )
//				delay();
		CLR_MOSI;		
	}
	return dataIn;
 a2a:	89 81       	ldd	r24, Y+1	; 0x01
}
 a2c:	0f 90       	pop	r0
 a2e:	0f 90       	pop	r0
 a30:	0f 90       	pop	r0
 a32:	cf 91       	pop	r28
 a34:	df 91       	pop	r29
 a36:	08 95       	ret

00000a38 <spiOneCommand>:
	// ----------------------------------------------------------------------
// Issue one SPI command.
// ----------------------------------------------------------------------
//__attribute__((naked))
static	void	spiOneCommand ( byte_t* cmd, byte_t* res, int i )
{
 a38:	df 93       	push	r29
 a3a:	cf 93       	push	r28
 a3c:	cd b7       	in	r28, 0x3d	; 61
 a3e:	de b7       	in	r29, 0x3e	; 62
 a40:	29 97       	sbiw	r28, 0x09	; 9
 a42:	0f b6       	in	r0, 0x3f	; 63
 a44:	f8 94       	cli
 a46:	de bf       	out	0x3e, r29	; 62
 a48:	0f be       	out	0x3f, r0	; 63
 a4a:	cd bf       	out	0x3d, r28	; 61
 a4c:	9d 83       	std	Y+5, r25	; 0x05
 a4e:	8c 83       	std	Y+4, r24	; 0x04
 a50:	7f 83       	std	Y+7, r23	; 0x07
 a52:	6e 83       	std	Y+6, r22	; 0x06
 a54:	59 87       	std	Y+9, r21	; 0x09
 a56:	48 87       	std	Y+8, r20	; 0x08
 a58:	1b c0       	rjmp	.+54     	; 0xa90 <spiOneCommand+0x58>
	byte_t	r;
    byte_t  mask;	

	while (i != 0)
	{
	  	i--;
 a5a:	88 85       	ldd	r24, Y+8	; 0x08
 a5c:	99 85       	ldd	r25, Y+9	; 0x09
 a5e:	01 97       	sbiw	r24, 0x01	; 1
 a60:	99 87       	std	Y+9, r25	; 0x09
 a62:	88 87       	std	Y+8, r24	; 0x08
		c = *cmd++;
 a64:	ec 81       	ldd	r30, Y+4	; 0x04
 a66:	fd 81       	ldd	r31, Y+5	; 0x05
 a68:	80 81       	ld	r24, Z
 a6a:	8b 83       	std	Y+3, r24	; 0x03
 a6c:	8c 81       	ldd	r24, Y+4	; 0x04
 a6e:	9d 81       	ldd	r25, Y+5	; 0x05
 a70:	01 96       	adiw	r24, 0x01	; 1
 a72:	9d 83       	std	Y+5, r25	; 0x05
 a74:	8c 83       	std	Y+4, r24	; 0x04
		r = 0;
 a76:	1a 82       	std	Y+2, r1	; 0x02
		r = spiOneByte(c);
 a78:	8b 81       	ldd	r24, Y+3	; 0x03
 a7a:	94 df       	rcall	.-216    	; 0x9a4 <spiOneByte>
 a7c:	8a 83       	std	Y+2, r24	; 0x02
		*res++ = r;
 a7e:	ee 81       	ldd	r30, Y+6	; 0x06
 a80:	ff 81       	ldd	r31, Y+7	; 0x07
 a82:	8a 81       	ldd	r24, Y+2	; 0x02
 a84:	80 83       	st	Z, r24
 a86:	8e 81       	ldd	r24, Y+6	; 0x06
 a88:	9f 81       	ldd	r25, Y+7	; 0x07
 a8a:	01 96       	adiw	r24, 0x01	; 1
 a8c:	9f 83       	std	Y+7, r25	; 0x07
 a8e:	8e 83       	std	Y+6, r24	; 0x06
{
	byte_t	c;
	byte_t	r;
    byte_t  mask;	

	while (i != 0)
 a90:	88 85       	ldd	r24, Y+8	; 0x08
 a92:	99 85       	ldd	r25, Y+9	; 0x09
 a94:	00 97       	sbiw	r24, 0x00	; 0
 a96:	09 f7       	brne	.-62     	; 0xa5a <spiOneCommand+0x22>
		c = *cmd++;
		r = 0;
		r = spiOneByte(c);
		*res++ = r;
	}
}
 a98:	29 96       	adiw	r28, 0x09	; 9
 a9a:	0f b6       	in	r0, 0x3f	; 63
 a9c:	f8 94       	cli
 a9e:	de bf       	out	0x3e, r29	; 62
 aa0:	0f be       	out	0x3f, r0	; 63
 aa2:	cd bf       	out	0x3d, r28	; 61
 aa4:	cf 91       	pop	r28
 aa6:	df 91       	pop	r29
 aa8:	08 95       	ret

00000aaa <CheckChipErase>:

void CheckChipErase()
{
 aaa:	df 93       	push	r29
 aac:	cf 93       	push	r28
 aae:	00 d0       	rcall	.+0      	; 0xab0 <CheckChipErase+0x6>
 ab0:	00 d0       	rcall	.+0      	; 0xab2 <CheckChipErase+0x8>
 ab2:	cd b7       	in	r28, 0x3d	; 61
 ab4:	de b7       	in	r29, 0x3e	; 62
    byte_t result[4] = {0x00,0x00,0x00,0x00} ;
 ab6:	19 82       	std	Y+1, r1	; 0x01
 ab8:	1a 82       	std	Y+2, r1	; 0x02
 aba:	1b 82       	std	Y+3, r1	; 0x03
 abc:	1c 82       	std	Y+4, r1	; 0x04
 abe:	09 c0       	rjmp	.+18     	; 0xad2 <CheckChipErase+0x28>
    while(result[3] != 0xFF)
    {
        spiOneCommand(readByte_Cmm,result,4);//Leo la direccion 0x00
 ac0:	8e e6       	ldi	r24, 0x6E	; 110
 ac2:	90 e0       	ldi	r25, 0x00	; 0
 ac4:	9e 01       	movw	r18, r28
 ac6:	2f 5f       	subi	r18, 0xFF	; 255
 ac8:	3f 4f       	sbci	r19, 0xFF	; 255
 aca:	b9 01       	movw	r22, r18
 acc:	44 e0       	ldi	r20, 0x04	; 4
 ace:	50 e0       	ldi	r21, 0x00	; 0
 ad0:	b3 df       	rcall	.-154    	; 0xa38 <spiOneCommand>
}

void CheckChipErase()
{
    byte_t result[4] = {0x00,0x00,0x00,0x00} ;
    while(result[3] != 0xFF)
 ad2:	8c 81       	ldd	r24, Y+4	; 0x04
 ad4:	8f 3f       	cpi	r24, 0xFF	; 255
 ad6:	a1 f7       	brne	.-24     	; 0xac0 <CheckChipErase+0x16>
    {
        spiOneCommand(readByte_Cmm,result,4);//Leo la direccion 0x00
    }
}
 ad8:	0f 90       	pop	r0
 ada:	0f 90       	pop	r0
 adc:	0f 90       	pop	r0
 ade:	0f 90       	pop	r0
 ae0:	cf 91       	pop	r28
 ae2:	df 91       	pop	r29
 ae4:	08 95       	ret

00000ae6 <WaitDateWriteCompletion>:

void WaitDateWriteCompletion(byte_t writeByte, byte_t address, byte_t size)
{
 ae6:	df 93       	push	r29
 ae8:	cf 93       	push	r28
 aea:	cd b7       	in	r28, 0x3d	; 61
 aec:	de b7       	in	r29, 0x3e	; 62
 aee:	27 97       	sbiw	r28, 0x07	; 7
 af0:	0f b6       	in	r0, 0x3f	; 63
 af2:	f8 94       	cli
 af4:	de bf       	out	0x3e, r29	; 62
 af6:	0f be       	out	0x3f, r0	; 63
 af8:	cd bf       	out	0x3d, r28	; 61
 afa:	8d 83       	std	Y+5, r24	; 0x05
 afc:	6e 83       	std	Y+6, r22	; 0x06
 afe:	4f 83       	std	Y+7, r20	; 0x07
    byte_t result[4] = {0x00,0x00,0x00,(~writeByte) };
 b00:	8d 81       	ldd	r24, Y+5	; 0x05
 b02:	80 95       	com	r24
 b04:	19 82       	std	Y+1, r1	; 0x01
 b06:	1a 82       	std	Y+2, r1	; 0x02
 b08:	1b 82       	std	Y+3, r1	; 0x03
 b0a:	8c 83       	std	Y+4, r24	; 0x04
    readByte_Cmm [2] = address;
 b0c:	8e 81       	ldd	r24, Y+6	; 0x06
 b0e:	80 93 70 00 	sts	0x0070, r24
 b12:	0a c0       	rjmp	.+20     	; 0xb28 <WaitDateWriteCompletion+0x42>
    while (result[3] != writeByte)
    {
        spiOneCommand(readByte_Cmm,result,size);
 b14:	8f 81       	ldd	r24, Y+7	; 0x07
 b16:	48 2f       	mov	r20, r24
 b18:	50 e0       	ldi	r21, 0x00	; 0
 b1a:	8e e6       	ldi	r24, 0x6E	; 110
 b1c:	90 e0       	ldi	r25, 0x00	; 0
 b1e:	9e 01       	movw	r18, r28
 b20:	2f 5f       	subi	r18, 0xFF	; 255
 b22:	3f 4f       	sbci	r19, 0xFF	; 255
 b24:	b9 01       	movw	r22, r18
 b26:	88 df       	rcall	.-240    	; 0xa38 <spiOneCommand>

void WaitDateWriteCompletion(byte_t writeByte, byte_t address, byte_t size)
{
    byte_t result[4] = {0x00,0x00,0x00,(~writeByte) };
    readByte_Cmm [2] = address;
    while (result[3] != writeByte)
 b28:	9c 81       	ldd	r25, Y+4	; 0x04
 b2a:	8d 81       	ldd	r24, Y+5	; 0x05
 b2c:	98 17       	cp	r25, r24
 b2e:	91 f7       	brne	.-28     	; 0xb14 <WaitDateWriteCompletion+0x2e>
    {
        spiOneCommand(readByte_Cmm,result,size);
    }
}
 b30:	27 96       	adiw	r28, 0x07	; 7
 b32:	0f b6       	in	r0, 0x3f	; 63
 b34:	f8 94       	cli
 b36:	de bf       	out	0x3e, r29	; 62
 b38:	0f be       	out	0x3f, r0	; 63
 b3a:	cd bf       	out	0x3d, r28	; 61
 b3c:	cf 91       	pop	r28
 b3e:	df 91       	pop	r29
 b40:	08 95       	ret

00000b42 <WriteProgramByByte>:

void WriteProgramByByte()
{
 b42:	df 93       	push	r29
 b44:	cf 93       	push	r28
 b46:	cd b7       	in	r28, 0x3d	; 61
 b48:	de b7       	in	r29, 0x3e	; 62
 b4a:	27 97       	sbiw	r28, 0x07	; 7
 b4c:	0f b6       	in	r0, 0x3f	; 63
 b4e:	f8 94       	cli
 b50:	de bf       	out	0x3e, r29	; 62
 b52:	0f be       	out	0x3f, r0	; 63
 b54:	cd bf       	out	0x3d, r28	; 61
    byte_t address = 0 ,i ;
 b56:	1b 82       	std	Y+3, r1	; 0x03
    byte_t addressTotal = 45;
 b58:	8d e2       	ldi	r24, 0x2D	; 45
 b5a:	89 83       	std	Y+1, r24	; 0x01
    byte_t result[4];

    for (i = 0; i < addressTotal; i++,address++)
 b5c:	1a 82       	std	Y+2, r1	; 0x02
 b5e:	20 c0       	rjmp	.+64     	; 0xba0 <WriteProgramByByte+0x5e>
    {
        writeByte_Cmm[2] = address;
 b60:	8b 81       	ldd	r24, Y+3	; 0x03
 b62:	80 93 6c 00 	sts	0x006C, r24
        writeByte_Cmm[3] = led_1s_program[i];        
 b66:	8a 81       	ldd	r24, Y+2	; 0x02
 b68:	88 2f       	mov	r24, r24
 b6a:	90 e0       	ldi	r25, 0x00	; 0
 b6c:	fc 01       	movw	r30, r24
 b6e:	e9 55       	subi	r30, 0x59	; 89
 b70:	ff 4f       	sbci	r31, 0xFF	; 255
 b72:	80 81       	ld	r24, Z
 b74:	80 93 6d 00 	sts	0x006D, r24
        spiOneCommand(writeByte_Cmm,result,4);
 b78:	8a e6       	ldi	r24, 0x6A	; 106
 b7a:	90 e0       	ldi	r25, 0x00	; 0
 b7c:	9e 01       	movw	r18, r28
 b7e:	2c 5f       	subi	r18, 0xFC	; 252
 b80:	3f 4f       	sbci	r19, 0xFF	; 255
 b82:	b9 01       	movw	r22, r18
 b84:	44 e0       	ldi	r20, 0x04	; 4
 b86:	50 e0       	ldi	r21, 0x00	; 0
 b88:	57 df       	rcall	.-338    	; 0xa38 <spiOneCommand>
        WaitDateWriteCompletion(writeByte_Cmm[3], address, 4);
 b8a:	80 91 6d 00 	lds	r24, 0x006D
 b8e:	6b 81       	ldd	r22, Y+3	; 0x03
 b90:	44 e0       	ldi	r20, 0x04	; 4
 b92:	a9 df       	rcall	.-174    	; 0xae6 <WaitDateWriteCompletion>
{
    byte_t address = 0 ,i ;
    byte_t addressTotal = 45;
    byte_t result[4];

    for (i = 0; i < addressTotal; i++,address++)
 b94:	8a 81       	ldd	r24, Y+2	; 0x02
 b96:	8f 5f       	subi	r24, 0xFF	; 255
 b98:	8a 83       	std	Y+2, r24	; 0x02
 b9a:	8b 81       	ldd	r24, Y+3	; 0x03
 b9c:	8f 5f       	subi	r24, 0xFF	; 255
 b9e:	8b 83       	std	Y+3, r24	; 0x03
 ba0:	9a 81       	ldd	r25, Y+2	; 0x02
 ba2:	89 81       	ldd	r24, Y+1	; 0x01
 ba4:	98 17       	cp	r25, r24
 ba6:	e0 f2       	brcs	.-72     	; 0xb60 <WriteProgramByByte+0x1e>
        writeByte_Cmm[2] = address;
        writeByte_Cmm[3] = led_1s_program[i];        
        spiOneCommand(writeByte_Cmm,result,4);
        WaitDateWriteCompletion(writeByte_Cmm[3], address, 4);
    }
}
 ba8:	27 96       	adiw	r28, 0x07	; 7
 baa:	0f b6       	in	r0, 0x3f	; 63
 bac:	f8 94       	cli
 bae:	de bf       	out	0x3e, r29	; 62
 bb0:	0f be       	out	0x3f, r0	; 63
 bb2:	cd bf       	out	0x3d, r28	; 61
 bb4:	cf 91       	pop	r28
 bb6:	df 91       	pop	r29
 bb8:	08 95       	ret

00000bba <WriteProgramByPage>:

void WriteProgramByPage()
{
 bba:	df 93       	push	r29
 bbc:	cf 93       	push	r28
 bbe:	cd b7       	in	r28, 0x3d	; 61
 bc0:	de b7       	in	r29, 0x3e	; 62
 bc2:	27 97       	sbiw	r28, 0x07	; 7
 bc4:	0f b6       	in	r0, 0x3f	; 63
 bc6:	f8 94       	cli
 bc8:	de bf       	out	0x3e, r29	; 62
 bca:	0f be       	out	0x3f, r0	; 63
 bcc:	cd bf       	out	0x3d, r28	; 61
    byte_t address = 0 ,i ;
 bce:	1b 82       	std	Y+3, r1	; 0x03
    byte_t addressTotal = 45;
 bd0:	8d e2       	ldi	r24, 0x2D	; 45
 bd2:	89 83       	std	Y+1, r24	; 0x01
    byte_t result[4];

    spiOneByte(writePage_Cmm[0]);
 bd4:	80 91 72 00 	lds	r24, 0x0072
 bd8:	e5 de       	rcall	.-566    	; 0x9a4 <spiOneByte>
    spiOneByte(writePage_Cmm[1]);
 bda:	80 91 73 00 	lds	r24, 0x0073
 bde:	e2 de       	rcall	.-572    	; 0x9a4 <spiOneByte>
    spiOneByte(writePage_Cmm[2]);
 be0:	80 91 74 00 	lds	r24, 0x0074
 be4:	df de       	rcall	.-578    	; 0x9a4 <spiOneByte>
    for (i = 0; i < addressTotal; i++,address++)
 be6:	1a 82       	std	Y+2, r1	; 0x02
 be8:	0e c0       	rjmp	.+28     	; 0xc06 <WriteProgramByPage+0x4c>
    {
        spiOneByte(led_05s_program[i]);        
 bea:	8a 81       	ldd	r24, Y+2	; 0x02
 bec:	88 2f       	mov	r24, r24
 bee:	90 e0       	ldi	r25, 0x00	; 0
 bf0:	fc 01       	movw	r30, r24
 bf2:	e6 58       	subi	r30, 0x86	; 134
 bf4:	ff 4f       	sbci	r31, 0xFF	; 255
 bf6:	80 81       	ld	r24, Z
 bf8:	d5 de       	rcall	.-598    	; 0x9a4 <spiOneByte>
    byte_t result[4];

    spiOneByte(writePage_Cmm[0]);
    spiOneByte(writePage_Cmm[1]);
    spiOneByte(writePage_Cmm[2]);
    for (i = 0; i < addressTotal; i++,address++)
 bfa:	8a 81       	ldd	r24, Y+2	; 0x02
 bfc:	8f 5f       	subi	r24, 0xFF	; 255
 bfe:	8a 83       	std	Y+2, r24	; 0x02
 c00:	8b 81       	ldd	r24, Y+3	; 0x03
 c02:	8f 5f       	subi	r24, 0xFF	; 255
 c04:	8b 83       	std	Y+3, r24	; 0x03
 c06:	9a 81       	ldd	r25, Y+2	; 0x02
 c08:	89 81       	ldd	r24, Y+1	; 0x01
 c0a:	98 17       	cp	r25, r24
 c0c:	70 f3       	brcs	.-36     	; 0xbea <WriteProgramByPage+0x30>
 c0e:	05 c0       	rjmp	.+10     	; 0xc1a <WriteProgramByPage+0x60>
    }
    
    //Completo la pagina con 0x00
    for (; address < 64 ; address++)
    {   
        spiOneByte(0x00);
 c10:	80 e0       	ldi	r24, 0x00	; 0
 c12:	c8 de       	rcall	.-624    	; 0x9a4 <spiOneByte>
    {
        spiOneByte(led_05s_program[i]);        
    }
    
    //Completo la pagina con 0x00
    for (; address < 64 ; address++)
 c14:	8b 81       	ldd	r24, Y+3	; 0x03
 c16:	8f 5f       	subi	r24, 0xFF	; 255
 c18:	8b 83       	std	Y+3, r24	; 0x03
 c1a:	8b 81       	ldd	r24, Y+3	; 0x03
 c1c:	80 34       	cpi	r24, 0x40	; 64
 c1e:	c0 f3       	brcs	.-16     	; 0xc10 <WriteProgramByPage+0x56>
    {   
        spiOneByte(0x00);
    }

    WaitDateWriteCompletion(led_05s_program[0], 0x00, 4);    //Chequeeo la primer posicion
 c20:	80 91 7a 00 	lds	r24, 0x007A
 c24:	60 e0       	ldi	r22, 0x00	; 0
 c26:	44 e0       	ldi	r20, 0x04	; 4
 c28:	5e df       	rcall	.-324    	; 0xae6 <WaitDateWriteCompletion>

}
 c2a:	27 96       	adiw	r28, 0x07	; 7
 c2c:	0f b6       	in	r0, 0x3f	; 63
 c2e:	f8 94       	cli
 c30:	de bf       	out	0x3e, r29	; 62
 c32:	0f be       	out	0x3f, r0	; 63
 c34:	cd bf       	out	0x3d, r28	; 61
 c36:	cf 91       	pop	r28
 c38:	df 91       	pop	r29
 c3a:	08 95       	ret

00000c3c <PreparePrograming>:

//Inicio, activo el buffer, subo el reset, prendo el LED y configuro el MOSI como salida.
void PreparePrograming()
{
 c3c:	df 93       	push	r29
 c3e:	cf 93       	push	r28
 c40:	0f 92       	push	r0
 c42:	cd b7       	in	r28, 0x3d	; 61
 c44:	de b7       	in	r29, 0x3e	; 62
    byte_t mask;
    PORTD &= ~_BV(4);   //Enable Buffer
 c46:	a2 e3       	ldi	r26, 0x32	; 50
 c48:	b0 e0       	ldi	r27, 0x00	; 0
 c4a:	e2 e3       	ldi	r30, 0x32	; 50
 c4c:	f0 e0       	ldi	r31, 0x00	; 0
 c4e:	80 81       	ld	r24, Z
 c50:	8f 7e       	andi	r24, 0xEF	; 239
 c52:	8c 93       	st	X, r24
	DDR  = POWER_MASK | RESET_MASK | SCK_MASK | MOSI_MASK;
 c54:	e7 e3       	ldi	r30, 0x37	; 55
 c56:	f0 e0       	ldi	r31, 0x00	; 0
 c58:	81 eb       	ldi	r24, 0xB1	; 177
 c5a:	80 83       	st	Z, r24
	PORT = POWER_MASK | RESET_MASK;
 c5c:	e8 e3       	ldi	r30, 0x38	; 56
 c5e:	f0 e0       	ldi	r31, 0x00	; 0
 c60:	81 e1       	ldi	r24, 0x11	; 17
 c62:	80 83       	st	Z, r24
}
 c64:	0f 90       	pop	r0
 c66:	cf 91       	pop	r28
 c68:	df 91       	pop	r29
 c6a:	08 95       	ret

00000c6c <ClosePrograming>:

//Fin, bajo el reset, pongo el buffer en alta impedancia, apago el LED y pongo el MOSI como entrada.
void ClosePrograming()
{
 c6c:	df 93       	push	r29
 c6e:	cf 93       	push	r28
 c70:	cd b7       	in	r28, 0x3d	; 61
 c72:	de b7       	in	r29, 0x3e	; 62
    
    DDR  = 0x00;
 c74:	e7 e3       	ldi	r30, 0x37	; 55
 c76:	f0 e0       	ldi	r31, 0x00	; 0
 c78:	10 82       	st	Z, r1
	PORT = 0x00;
 c7a:	e8 e3       	ldi	r30, 0x38	; 56
 c7c:	f0 e0       	ldi	r31, 0x00	; 0
 c7e:	10 82       	st	Z, r1
	PORTD |= _BV(4);
 c80:	a2 e3       	ldi	r26, 0x32	; 50
 c82:	b0 e0       	ldi	r27, 0x00	; 0
 c84:	e2 e3       	ldi	r30, 0x32	; 50
 c86:	f0 e0       	ldi	r31, 0x00	; 0
 c88:	80 81       	ld	r24, Z
 c8a:	80 61       	ori	r24, 0x10	; 16
 c8c:	8c 93       	st	X, r24
}
 c8e:	cf 91       	pop	r28
 c90:	df 91       	pop	r29
 c92:	08 95       	ret

00000c94 <ProgramLed>:

void ProgramLed()
{
 c94:	df 93       	push	r29
 c96:	cf 93       	push	r28
 c98:	00 d0       	rcall	.+0      	; 0xc9a <ProgramLed+0x6>
 c9a:	00 d0       	rcall	.+0      	; 0xc9c <ProgramLed+0x8>
 c9c:	cd b7       	in	r28, 0x3d	; 61
 c9e:	de b7       	in	r29, 0x3e	; 62
    byte_t result[4];


    PreparePrograming();
 ca0:	cd df       	rcall	.-102    	; 0xc3c <PreparePrograming>


    spiOneCommand(programEnable_Cmm,result,4);
 ca2:	82 e6       	ldi	r24, 0x62	; 98
 ca4:	90 e0       	ldi	r25, 0x00	; 0
 ca6:	9e 01       	movw	r18, r28
 ca8:	2f 5f       	subi	r18, 0xFF	; 255
 caa:	3f 4f       	sbci	r19, 0xFF	; 255
 cac:	b9 01       	movw	r22, r18
 cae:	44 e0       	ldi	r20, 0x04	; 4
 cb0:	50 e0       	ldi	r21, 0x00	; 0
 cb2:	c2 de       	rcall	.-636    	; 0xa38 <spiOneCommand>
    
    spiOneCommand(chipErase_Cmm,result,4);
 cb4:	86 e6       	ldi	r24, 0x66	; 102
 cb6:	90 e0       	ldi	r25, 0x00	; 0
 cb8:	9e 01       	movw	r18, r28
 cba:	2f 5f       	subi	r18, 0xFF	; 255
 cbc:	3f 4f       	sbci	r19, 0xFF	; 255
 cbe:	b9 01       	movw	r22, r18
 cc0:	44 e0       	ldi	r20, 0x04	; 4
 cc2:	50 e0       	ldi	r21, 0x00	; 0
 cc4:	b9 de       	rcall	.-654    	; 0xa38 <spiOneCommand>
    CheckChipErase();    
 cc6:	f1 de       	rcall	.-542    	; 0xaaa <CheckChipErase>

    //WriteProgramByByte();
    WriteProgramByPage();
 cc8:	78 df       	rcall	.-272    	; 0xbba <WriteProgramByPage>
    
    ClosePrograming();
 cca:	d0 df       	rcall	.-96     	; 0xc6c <ClosePrograming>
}
 ccc:	0f 90       	pop	r0
 cce:	0f 90       	pop	r0
 cd0:	0f 90       	pop	r0
 cd2:	0f 90       	pop	r0
 cd4:	cf 91       	pop	r28
 cd6:	df 91       	pop	r29
 cd8:	08 95       	ret

00000cda <delay>:
// ----------------------------------------------------------------------
// Delay exactly <sck_period> times 0.5 microseconds (6 cycles).
// ----------------------------------------------------------------------
__attribute__((always_inline))
static	void	delay ( void )
{
 cda:	df 93       	push	r29
 cdc:	cf 93       	push	r28
 cde:	cd b7       	in	r28, 0x3d	; 61
 ce0:	de b7       	in	r29, 0x3e	; 62
	asm volatile(
 ce2:	80 91 fc 00 	lds	r24, 0x00FC
 ce6:	08 2e       	mov	r0, r24
 ce8:	00 c0       	rjmp	.+0      	; 0xcea <delay+0x10>
 cea:	00 00       	nop
 cec:	0a 94       	dec	r0
 cee:	e1 f7       	brne	.-8      	; 0xce8 <delay+0xe>
		"0:	rjmp	1f		\n"
		"1:	nop			\n"
		"	dec	__tmp_reg__	\n"
		"	brne	0b		\n"
		: : "r" (sck_period) );
}
 cf0:	cf 91       	pop	r28
 cf2:	df 91       	pop	r29
 cf4:	08 95       	ret

00000cf6 <spi>:
// ----------------------------------------------------------------------
// Issue one SPI command.
// ----------------------------------------------------------------------
//__attribute__((naked))
static	void	spi ( byte_t* cmd, byte_t* res, int i )
{
 cf6:	df 93       	push	r29
 cf8:	cf 93       	push	r28
 cfa:	cd b7       	in	r28, 0x3d	; 61
 cfc:	de b7       	in	r29, 0x3e	; 62
 cfe:	29 97       	sbiw	r28, 0x09	; 9
 d00:	0f b6       	in	r0, 0x3f	; 63
 d02:	f8 94       	cli
 d04:	de bf       	out	0x3e, r29	; 62
 d06:	0f be       	out	0x3f, r0	; 63
 d08:	cd bf       	out	0x3d, r28	; 61
 d0a:	9d 83       	std	Y+5, r25	; 0x05
 d0c:	8c 83       	std	Y+4, r24	; 0x04
 d0e:	7f 83       	std	Y+7, r23	; 0x07
 d10:	6e 83       	std	Y+6, r22	; 0x06
 d12:	59 87       	std	Y+9, r21	; 0x09
 d14:	48 87       	std	Y+8, r20	; 0x08
 d16:	53 c0       	rjmp	.+166    	; 0xdbe <spi+0xc8>
	byte_t	r;
	byte_t	mask;

	while (i != 0)
	{
	  i--;
 d18:	88 85       	ldd	r24, Y+8	; 0x08
 d1a:	99 85       	ldd	r25, Y+9	; 0x09
 d1c:	01 97       	sbiw	r24, 0x01	; 1
 d1e:	99 87       	std	Y+9, r25	; 0x09
 d20:	88 87       	std	Y+8, r24	; 0x08
		c = *cmd++;
 d22:	ec 81       	ldd	r30, Y+4	; 0x04
 d24:	fd 81       	ldd	r31, Y+5	; 0x05
 d26:	80 81       	ld	r24, Z
 d28:	8b 83       	std	Y+3, r24	; 0x03
 d2a:	8c 81       	ldd	r24, Y+4	; 0x04
 d2c:	9d 81       	ldd	r25, Y+5	; 0x05
 d2e:	01 96       	adiw	r24, 0x01	; 1
 d30:	9d 83       	std	Y+5, r25	; 0x05
 d32:	8c 83       	std	Y+4, r24	; 0x04
		r = 0;
 d34:	1a 82       	std	Y+2, r1	; 0x02
		for	( mask = 0x80; mask; mask >>= 1 )
 d36:	80 e8       	ldi	r24, 0x80	; 128
 d38:	89 83       	std	Y+1, r24	; 0x01
 d3a:	35 c0       	rjmp	.+106    	; 0xda6 <spi+0xb0>
		{
			if	( c & mask )
 d3c:	8b 81       	ldd	r24, Y+3	; 0x03
 d3e:	99 81       	ldd	r25, Y+1	; 0x01
 d40:	89 23       	and	r24, r25
 d42:	88 23       	and	r24, r24
 d44:	39 f0       	breq	.+14     	; 0xd54 <spi+0x5e>
			{
				PORT |= MOSI_MASK;
 d46:	a8 e3       	ldi	r26, 0x38	; 56
 d48:	b0 e0       	ldi	r27, 0x00	; 0
 d4a:	e8 e3       	ldi	r30, 0x38	; 56
 d4c:	f0 e0       	ldi	r31, 0x00	; 0
 d4e:	80 81       	ld	r24, Z
 d50:	80 62       	ori	r24, 0x20	; 32
 d52:	8c 93       	st	X, r24
			}
//			if (! status & INVERTED_SCK_MASK )
				delay();
 d54:	c2 df       	rcall	.-124    	; 0xcda <delay>

			PORT |= SCK_MASK;
 d56:	a8 e3       	ldi	r26, 0x38	; 56
 d58:	b0 e0       	ldi	r27, 0x00	; 0
 d5a:	e8 e3       	ldi	r30, 0x38	; 56
 d5c:	f0 e0       	ldi	r31, 0x00	; 0
 d5e:	80 81       	ld	r24, Z
 d60:	80 68       	ori	r24, 0x80	; 128
 d62:	8c 93       	st	X, r24
			delay();
 d64:	ba df       	rcall	.-140    	; 0xcda <delay>
			r <<= 1;
 d66:	8a 81       	ldd	r24, Y+2	; 0x02
 d68:	88 0f       	add	r24, r24
 d6a:	8a 83       	std	Y+2, r24	; 0x02
			if	( PIN & MISO_MASK )
 d6c:	e6 e3       	ldi	r30, 0x36	; 54
 d6e:	f0 e0       	ldi	r31, 0x00	; 0
 d70:	80 81       	ld	r24, Z
 d72:	88 2f       	mov	r24, r24
 d74:	90 e0       	ldi	r25, 0x00	; 0
 d76:	80 74       	andi	r24, 0x40	; 64
 d78:	90 70       	andi	r25, 0x00	; 0
 d7a:	00 97       	sbiw	r24, 0x00	; 0
 d7c:	19 f0       	breq	.+6      	; 0xd84 <spi+0x8e>
			{
				r++;
 d7e:	8a 81       	ldd	r24, Y+2	; 0x02
 d80:	8f 5f       	subi	r24, 0xFF	; 255
 d82:	8a 83       	std	Y+2, r24	; 0x02
			}
			PORT &= ~ SCK_MASK;
 d84:	a8 e3       	ldi	r26, 0x38	; 56
 d86:	b0 e0       	ldi	r27, 0x00	; 0
 d88:	e8 e3       	ldi	r30, 0x38	; 56
 d8a:	f0 e0       	ldi	r31, 0x00	; 0
 d8c:	80 81       	ld	r24, Z
 d8e:	8f 77       	andi	r24, 0x7F	; 127
 d90:	8c 93       	st	X, r24
//			if ( status & INVERTED_SCK_MASK )
//				delay();
			
			PORT &= ~ MOSI_MASK;
 d92:	a8 e3       	ldi	r26, 0x38	; 56
 d94:	b0 e0       	ldi	r27, 0x00	; 0
 d96:	e8 e3       	ldi	r30, 0x38	; 56
 d98:	f0 e0       	ldi	r31, 0x00	; 0
 d9a:	80 81       	ld	r24, Z
 d9c:	8f 7d       	andi	r24, 0xDF	; 223
 d9e:	8c 93       	st	X, r24
	while (i != 0)
	{
	  i--;
		c = *cmd++;
		r = 0;
		for	( mask = 0x80; mask; mask >>= 1 )
 da0:	89 81       	ldd	r24, Y+1	; 0x01
 da2:	86 95       	lsr	r24
 da4:	89 83       	std	Y+1, r24	; 0x01
 da6:	89 81       	ldd	r24, Y+1	; 0x01
 da8:	88 23       	and	r24, r24
 daa:	41 f6       	brne	.-112    	; 0xd3c <spi+0x46>
//			if ( status & INVERTED_SCK_MASK )
//				delay();
			
			PORT &= ~ MOSI_MASK;
		}
		*res++ = r;
 dac:	ee 81       	ldd	r30, Y+6	; 0x06
 dae:	ff 81       	ldd	r31, Y+7	; 0x07
 db0:	8a 81       	ldd	r24, Y+2	; 0x02
 db2:	80 83       	st	Z, r24
 db4:	8e 81       	ldd	r24, Y+6	; 0x06
 db6:	9f 81       	ldd	r25, Y+7	; 0x07
 db8:	01 96       	adiw	r24, 0x01	; 1
 dba:	9f 83       	std	Y+7, r25	; 0x07
 dbc:	8e 83       	std	Y+6, r24	; 0x06
{
	byte_t	c;
	byte_t	r;
	byte_t	mask;

	while (i != 0)
 dbe:	88 85       	ldd	r24, Y+8	; 0x08
 dc0:	99 85       	ldd	r25, Y+9	; 0x09
 dc2:	00 97       	sbiw	r24, 0x00	; 0
 dc4:	09 f0       	breq	.+2      	; 0xdc8 <spi+0xd2>
 dc6:	a8 cf       	rjmp	.-176    	; 0xd18 <spi+0x22>
			
			PORT &= ~ MOSI_MASK;
		}
		*res++ = r;
	}
}
 dc8:	29 96       	adiw	r28, 0x09	; 9
 dca:	0f b6       	in	r0, 0x3f	; 63
 dcc:	f8 94       	cli
 dce:	de bf       	out	0x3e, r29	; 62
 dd0:	0f be       	out	0x3f, r0	; 63
 dd2:	cd bf       	out	0x3d, r28	; 61
 dd4:	cf 91       	pop	r28
 dd6:	df 91       	pop	r29
 dd8:	08 95       	ret

00000dda <spi_rw>:

// ----------------------------------------------------------------------
// Create and issue a read or write SPI command.
// ----------------------------------------------------------------------
static	void	spi_rw ( void )
{
 dda:	df 93       	push	r29
 ddc:	cf 93       	push	r28
 dde:	00 d0       	rcall	.+0      	; 0xde0 <spi_rw+0x6>
 de0:	00 d0       	rcall	.+0      	; 0xde2 <spi_rw+0x8>
 de2:	0f 92       	push	r0
 de4:	cd b7       	in	r28, 0x3d	; 61
 de6:	de b7       	in	r29, 0x3e	; 62
	unsigned char offset = 0;
 de8:	1d 82       	std	Y+5, r1	; 0x05
	uint_t	a;
	uint_t	tam = (status & TAMANIO_MASK);	
 dea:	80 91 0c 01 	lds	r24, 0x010C
 dee:	88 2f       	mov	r24, r24
 df0:	90 e0       	ldi	r25, 0x00	; 0
 df2:	87 70       	andi	r24, 0x07	; 7
 df4:	90 70       	andi	r25, 0x00	; 0
 df6:	9a 83       	std	Y+2, r25	; 0x02
 df8:	89 83       	std	Y+1, r24	; 0x01

	a = address++;
 dfa:	80 91 ff 00 	lds	r24, 0x00FF
 dfe:	90 91 00 01 	lds	r25, 0x0100
 e02:	9c 83       	std	Y+4, r25	; 0x04
 e04:	8b 83       	std	Y+3, r24	; 0x03
 e06:	01 96       	adiw	r24, 0x01	; 1
 e08:	90 93 00 01 	sts	0x0100, r25
 e0c:	80 93 ff 00 	sts	0x00FF, r24
	cmd[0] = cmd0;
 e10:	80 91 03 01 	lds	r24, 0x0103
 e14:	80 93 04 01 	sts	0x0104, r24
	if ( ( !(status & MICRO_S51_MASK) ) &&  ( ! (cmd0 & 0x80) ) )
 e18:	80 91 0c 01 	lds	r24, 0x010C
 e1c:	88 2f       	mov	r24, r24
 e1e:	90 e0       	ldi	r25, 0x00	; 0
 e20:	88 73       	andi	r24, 0x38	; 56
 e22:	90 70       	andi	r25, 0x00	; 0
 e24:	00 97       	sbiw	r24, 0x00	; 0
 e26:	a9 f4       	brne	.+42     	; 0xe52 <spi_rw+0x78>
 e28:	80 91 03 01 	lds	r24, 0x0103
 e2c:	88 23       	and	r24, r24
 e2e:	8c f0       	brlt	.+34     	; 0xe52 <spi_rw+0x78>
	{	//Es AVR 							// NOT eeprom
		if ( a & 1 )
 e30:	8b 81       	ldd	r24, Y+3	; 0x03
 e32:	9c 81       	ldd	r25, Y+4	; 0x04
 e34:	81 70       	andi	r24, 0x01	; 1
 e36:	90 70       	andi	r25, 0x00	; 0
 e38:	88 23       	and	r24, r24
 e3a:	29 f0       	breq	.+10     	; 0xe46 <spi_rw+0x6c>
		{
			cmd[0] |= 0x08;	//La H
 e3c:	80 91 04 01 	lds	r24, 0x0104
 e40:	88 60       	ori	r24, 0x08	; 8
 e42:	80 93 04 01 	sts	0x0104, r24
		}
		a >>= 1;	//Corro la direccion
 e46:	8b 81       	ldd	r24, Y+3	; 0x03
 e48:	9c 81       	ldd	r25, Y+4	; 0x04
 e4a:	96 95       	lsr	r25
 e4c:	87 95       	ror	r24
 e4e:	9c 83       	std	Y+4, r25	; 0x04
 e50:	8b 83       	std	Y+3, r24	; 0x03
	} 
	cmd[1] = a >> 8;
 e52:	8b 81       	ldd	r24, Y+3	; 0x03
 e54:	9c 81       	ldd	r25, Y+4	; 0x04
 e56:	89 2f       	mov	r24, r25
 e58:	99 27       	eor	r25, r25
 e5a:	80 93 05 01 	sts	0x0105, r24
	cmd[2] = a;
 e5e:	8b 81       	ldd	r24, Y+3	; 0x03
 e60:	80 93 06 01 	sts	0x0106, r24
	
	if ( (status & MICRO_S51_MASK ) == MICRO_8252 )
 e64:	80 91 0c 01 	lds	r24, 0x010C
 e68:	88 2f       	mov	r24, r24
 e6a:	90 e0       	ldi	r25, 0x00	; 0
 e6c:	88 73       	andi	r24, 0x38	; 56
 e6e:	90 70       	andi	r25, 0x00	; 0
 e70:	80 31       	cpi	r24, 0x10	; 16
 e72:	91 05       	cpc	r25, r1
 e74:	81 f4       	brne	.+32     	; 0xe96 <spi_rw+0xbc>
	{
		cmd[1] <<= 3;
 e76:	80 91 05 01 	lds	r24, 0x0105
 e7a:	88 0f       	add	r24, r24
 e7c:	88 0f       	add	r24, r24
 e7e:	88 0f       	add	r24, r24
 e80:	80 93 05 01 	sts	0x0105, r24
		cmd[1] |= cmd0;
 e84:	90 91 05 01 	lds	r25, 0x0105
 e88:	80 91 03 01 	lds	r24, 0x0103
 e8c:	89 2b       	or	r24, r25
 e8e:	80 93 05 01 	sts	0x0105, r24
		offset = 1;
 e92:	81 e0       	ldi	r24, 0x01	; 1
 e94:	8d 83       	std	Y+5, r24	; 0x05
	}
	spi( cmd + offset, res, tam );
 e96:	8d 81       	ldd	r24, Y+5	; 0x05
 e98:	88 2f       	mov	r24, r24
 e9a:	90 e0       	ldi	r25, 0x00	; 0
 e9c:	8c 5f       	subi	r24, 0xFC	; 252
 e9e:	9e 4f       	sbci	r25, 0xFE	; 254
 ea0:	49 81       	ldd	r20, Y+1	; 0x01
 ea2:	5a 81       	ldd	r21, Y+2	; 0x02
 ea4:	28 e0       	ldi	r18, 0x08	; 8
 ea6:	31 e0       	ldi	r19, 0x01	; 1
 ea8:	b9 01       	movw	r22, r18
 eaa:	25 df       	rcall	.-438    	; 0xcf6 <spi>
}
 eac:	0f 90       	pop	r0
 eae:	0f 90       	pop	r0
 eb0:	0f 90       	pop	r0
 eb2:	0f 90       	pop	r0
 eb4:	0f 90       	pop	r0
 eb6:	cf 91       	pop	r28
 eb8:	df 91       	pop	r29
 eba:	08 95       	ret

00000ebc <crc>:
	.text
	.global	crc
	.type	crc, @function
crc:
	; crc = 0xffff
	movw	XL, r24
 ebc:	dc 01       	movw	r26, r24
	ldi	crc_h, 0xff
 ebe:	9f ef       	ldi	r25, 0xFF	; 255
	ldi	crc_l, 0xff
 ec0:	8f ef       	ldi	r24, 0xFF	; 255
	lsl	len
 ec2:	66 0f       	add	r22, r22
	breq	done
 ec4:	b9 f0       	breq	.+46     	; 0xef4 <done>
	ldi	zl, lo8(crc4tab)
 ec6:	4e e4       	ldi	r20, 0x4E	; 78
	ldi	ZH, hi8(crc4tab)
 ec8:	f0 e0       	ldi	r31, 0x00	; 0

00000eca <next_nibble>:

next_nibble:
	; b = (len & 1 ? b >> 4 : *data++)
	swap	b
 eca:	22 95       	swap	r18
	sbrs	len, 0
 ecc:	60 ff       	sbrs	r22, 0
	ld	b, X+
 ece:	2d 91       	ld	r18, X+

	; index = (crc ^ b) & 0x0f
	mov	ZL, crc_l
 ed0:	e8 2f       	mov	r30, r24
	eor	ZL, b
 ed2:	e2 27       	eor	r30, r18
	andi	ZL, 0x0f
 ed4:	ef 70       	andi	r30, 0x0F	; 15

	; crc >>= 4
	swap	crc_h
 ed6:	92 95       	swap	r25
	swap	crc_l
 ed8:	82 95       	swap	r24
	andi	crc_l, 0x0f
 eda:	8f 70       	andi	r24, 0x0F	; 15
	mov	tmp, crc_h
 edc:	39 2f       	mov	r19, r25
	andi	tmp, 0xf0
 ede:	30 7f       	andi	r19, 0xF0	; 240
	or	crc_l, tmp
 ee0:	83 2b       	or	r24, r19
	andi	crc_h, 0x0f
 ee2:	9f 70       	andi	r25, 0x0F	; 15

	; crc ^= crc4tab[index]
	add	ZL, zl
 ee4:	e4 0f       	add	r30, r20
	lpm	tmp, Z+
 ee6:	35 91       	lpm	r19, Z+
	eor	crc_h, tmp
 ee8:	93 27       	eor	r25, r19
	andi	tmp, 1
 eea:	31 70       	andi	r19, 0x01	; 1
	eor	crc_h, tmp
 eec:	93 27       	eor	r25, r19
	eor	crc_l, tmp
 eee:	83 27       	eor	r24, r19

	; next nibble
	dec	len
 ef0:	6a 95       	dec	r22
	brne	next_nibble
 ef2:	59 f7       	brne	.-42     	; 0xeca <next_nibble>

00000ef4 <done>:

done:
	; crc ^= 0xffff
	com	crc_l
 ef4:	80 95       	com	r24
	com	crc_h
 ef6:	90 95       	com	r25

	; append crc to buffer
	st	X+, crc_l
 ef8:	8d 93       	st	X+, r24
	st	X+, crc_h
 efa:	9d 93       	st	X+, r25

	ret
 efc:	08 95       	ret

00000efe <_exit>:
 efe:	f8 94       	cli

00000f00 <__stop_program>:
 f00:	ff cf       	rjmp	.-2      	; 0xf00 <__stop_program>
